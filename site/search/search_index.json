{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is this book about ?","text":"<p>Hi, welcome and thank you for your interest in my Zabbix book. I wrote the Zabbix cookbook and co wrote with Richards Zabbix 4 Network Monitoring a few years ago for PackPub. </p> <p> </p> <p>The cookbook the first of it's kind probably outdated and will be replaced by the Zabbix 7 IT Infrastructure Monitoring Cookbook, written by Brian and Nathan, 2 people I like a lot to work with and can higly recommend. There are many more books available from Packt about Zabbix a complete overview can be found here Zabbix books at pack. Or if you like to find some non English books Amazon has some books form Packt and other Publishers in Chinese, Spanish and maybe some other languages as well. Other books</p> <p>As Zabbix is an opensource product and making money out of the books was never my intention, it got me thinking how to do things different. How to make a new book without using a publisher like I had done before. After a while, I came up with the idea to make a book that would be free and that would be updated when new versions came out. Since I am a huge fan of documentation in markdown or asciidoc I came up with the idea to share the book in git and use markdown. The only problem left was how to make those markdown files readable in an easy way like a book ? After some searching trying to look for a good solution I found MkDocs. MkDocs is a Python-Markdown library that can convert everything to HTML and can be templated. So the problem was solved and a new book was born.</p>"},{"location":"#who-am-i","title":"Who am I ?","text":"<p>My name is Patrik Uytterhoeven and I work for a Belgium company named Open-Future. I started at this company at Januari 2013 and that's when my journey started with Zabbix as well. They gave me the opportunity to build my experience and to get certified as Zabbix trainer. Since this year I am officially 10y Zabbix trainer. If you would like to follow one of my trainings feel free to register for a training at our website www.open-future.be. Why would you follow a training if you can read this book for free are you now thinking? Because trainings just like the book explain you all the details on how to set up and do things but also give you valueable tips and feedback that you never get from a book. Books just can't cover everything.</p>"},{"location":"#what-os-do-i-need","title":"What OS do I need ?","text":"<p>Since I work mostly with RHEL based systems and since I am convinced that RHEL is the better choice in Production environments I have chosen to focus on using one of the forks that is available for free. Zabbix is supported on Ubuntu, Debian, Suse, Raspberry .... and it can be compiled on any OS that is Unix based so it's almost impossible to cover them all. However the book is Opensource and in GIT so feel free to contribute the code for your favorite flavour :). I will use Rocky Linux 9 in this book, but it should work for most of the other installations as well.</p>"},{"location":"#what-version-of-zabbix-is-used-in-this-book","title":"What version of Zabbix is used in this book ?","text":"<p>Since we are almost at the release of Zabbix 7, I will focus on version 7 since it will be the new LTS. It should also apply to most other versions but of course there will be minor changes. In the future, if there is enough support from the community to update this book together, it would be great if we could build a book for every LTS version available.</p>"},{"location":"#how-to-use-this-book","title":"How to use this book ?","text":"<p>The book will try to cover all the topics, feel free to let me know if something is missing or feel free to make a pull request.  There is no need to start from page 1 and read the book till the end. Some people will be looking for basic knowledge others might want to skip to the fun part, so I want the book to be useful for everyone. Therefor I will try to explain as best as possible in every topic the exact steps needed to reproduce.</p> <p>There will be moments in the book where you need to type some code, I will show the commands you need to type in a box just like here.</p> <pre><code># some command \n</code></pre> <p>Notes to some useful documentation will be added at the bottom of the page.</p> <p>Here is a simple footnote<sup>1</sup>. With some additional text after it.</p> <p>In case there is some important information to share I will add notes in the documentation like can be seen here :</p> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Info <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Tip <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Question <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Warning <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Bug <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Example <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <ol> <li> <p>My reference.\u00a0\u21a9</p> </li> </ol>"},{"location":"actions/zabbix-eventactions/","title":"Event based Actions","text":""},{"location":"api/zabbix-api/","title":"Zabbix API","text":""},{"location":"authentication/zabbix-http/","title":"Authentication with HTTP","text":""},{"location":"authentication/zabbix-ldap/","title":"Authentication with LDAP","text":""},{"location":"authentication/zabbix-mfa/","title":"Zabbix MFA support","text":"<p>We all know that before you can start configuring Zabbix via WebUI you have to sign in. Zabbix has several options to provide better security for user passwords by configuring password policy:</p> <ul> <li>Requirement for Minimum password length</li> <li>Requirements for password to contain an uppercase and a lowercase Latin letter, a digit, a special character</li> <li>Requirement to avoid easy-to-guess passwords</li> </ul> <p>To secure sign in process even more you can configure multi factor authentication (MFA). MFA protects Zabbix by using a second source of validation before granting access to its WebUI after a user enters his/her password correctly. Zabbix offers to types of MFA - Time-based one-time password (TOTP) and Duo MFA provider.</p>"},{"location":"authentication/zabbix-mfa/#time-based-one-time-password","title":"Time-based one-time password","text":"<p>In the menu select <code>Users</code> section and then <code>Authentication</code></p> <p></p> <p>Now in <code>MFA settings</code> tab select the <code>Enable multi-factor authentication</code> check-box, then select <code>TOTP</code> in Type drop-down list.</p> <p></p> <p>In <code>Hash function</code> drop-down list you can choose SHA-1, SHA-256 or SHA-512, the higher number is the better security.</p> <p>In <code>Code lentgh</code> you can select how many digits will be generated for you by Authenticator application on your phone.</p> <p>Click <code>Add</code> and then <code>Update</code>. Now you have TOTP MFA configured and it is the default method of MFA.</p> <p></p> <p>Now you need to tell Zabbix for which User group (or groups) to use MFA. Let's create a User group that would require MFA.</p> <p>In the menu select <code>Users</code> section and then <code>User groups</code>, then click <code>Create user group</code> button</p> <p></p> <p>In <code>Group name</code> put \"test\". Note that <code>Multi-factor authentication</code> field is \"Default\", as currently we have only one MFA method configured it does not matter whether we select \"Default\" or \"TOTP1\" that we created above. You also can disable MFA for all users belonging to this User group. Click <code>Add</code> button to create \"test\" User group.</p> <p></p> Note <p>MFA method is defined on per User group basis, i.e. MFA method configured for a User group will be applied to all users belonging to this group.</p> <p>Let's add a user to this user group. In the menu select <code>Users</code> section and then <code>Users</code>, then click <code>Create user</code> button</p> <p></p> <p>Fill in <code>Username</code>, <code>Password</code> and <code>Password (once again)</code> fields. Make sure you select <code>test</code> user group in <code>Groups</code> field.</p> <p></p> <p>Then switch to <code>Permissions</code> tab and select any role.</p> <p></p> <p>Click <code>Add</code> button to add the user.</p> <p>Now we can test how TOTP MFA works. Sign out and then try to sign in as a test user you just created. You will be presented with a QR code. That means that the user <code>test</code> has not been enrolled in TOTP MFA yet.</p> <p></p> <p>On your phone you need to install either \"Microsoft authenticator\" or \"Google authenticator\" application. The procedure of adding new QR code is quite similar, here is how it looks in \"Google authenticator\". Tap <code>Add a code</code> and then <code>Scan a QR code</code>. You'll be immediately presented with a 6 digit code (remember we selected 6 in <code>Code length</code> when we configured TOTP MFA?)</p> <p> </p> <p>Enter this code into <code>Verification code</code> field of your login screen and click <code>Sign in</code>, if you did everything right you are logged in into Zabbix at this point. At this point the user \"test\" is considered enrolled into TOTP MFA and Zabbix stores a special code used for furthe authentications in its database. The next time user \"test\" tries to login into Zabbix there will be only a field to enter verification code</p> <p></p> Warning <p>For TOTP MFA to work your Zabbix server must have correct time. Sometimes it's not the case especially if you are working with containers so pay attention to this.</p> <p>If a user changes (or loses) his/her phone, then Zabbix administrator should reset his/her enrollment. To do that in the menue select <code>Users</code> then mark a check-box to the left of \"test\" user and click \"Reset TOTP secret\" button.</p> <p></p> <p>After you reset TOTP secret the \"test\" user will have to undergo enrollment procedure again.</p>"},{"location":"authentication/zabbix-mfa/#duo-mfa-provider","title":"Duo MFA provider","text":"<p>Duo is a very famous security platform that provides a lot of security related features/products. To read more please visit https://duo.com/ . Here we'll talk about Duo only in regards to Zabbix MFA.</p> Warning <p>For Duo MFA to work your Zabbix WebUI must be configured to work with HTTPS (valid certificate is not required, self-signed certificate will work).</p> <p>First of all you need to create an account with Duo (it's free to manage up to 10 users) then login into Duo, you are an admin here. In the menu on the left select <code>Applications</code> and click <code>Protect an Application</code> button.</p> <p></p> <p>Then you will see WebSDK in applications list, click on it</p> <p></p> <p>Here you'll see all the data needed for Zabbix.</p> <p></p> <p>Now let's go to Zabbix. First we need to configure Duo MFA metod. In the menue select <code>Users</code> and click <code>Authentication</code>. Then on <code>MFA settings</code> tab click <code>Add</code> in <code>Methods</code> section.</p> <p></p> <p>Fill in all the fields with data from Duo Dashboard -&gt; Applications -&gt; Web SDK page (see screenshot above) and click <code>Add</code>, then click <code>Update</code> to update Authentication settings.</p> <p></p> <p>After the MFA method is configured let's switch the \"Test\" group to use Duo MFA. In the menu select <code>Users</code> and click <code>User groups</code>, then click \"test\" group. In the field <code>Multi-factor authentication</code> select \"DUO1\" and click <code>Update</code>.</p> <p></p> <p>Everything is ready. Let's test it. Sign out of Zabbix and sign back in with \"test\" user. You should see a welcome screen from Duo. Click several <code>Next</code> buttons.</p> <p> </p> <p>Then you need to select the method of authentication.</p> <p></p> <p>It is up to you what to select you can experiment with all these methods. Let's select \"Duo Mobile\" (you need to install \"Duo mobile\" application on your device). Click <code>I have a tablet</code> (it's just easier to activate your device this way) and confirm that you installed \"Duo mobile\" on your phone. At this point you should see a QR code that you need to scan in \"Duo mobile\" application.</p> <p> </p> <p>Open \"Duo mobile\" on your phone. If you did not have this application previously installed (thus no accounts enrolled) you will see couple of welcome screens.</p> <p> </p> <p>Tap on \"Use a QR code\" and then scan the code presented by Duo in your Zabbix logiin screen. After you do that you will see that the account is enrolled to your Duo MFA. Enter account name and tap \"Done\" and you will see the account in the list of all account enrolled into Duo MFA on this device. In Zabbix WebUI you will also see a conirmation, click \"Continue\".</p> <p> </p> <p>Duo will ask you now whether you want to add another method of authentication, click <code>Skip for now</code> and you'll see a confirmation that set up completed. Click <code>Login with Duo</code> and push notification will be pushed to your device.</p> <p> </p> <p>Now just tap on \"Approve\" on your device and you will be logged in into Zabbix.</p> <p></p> <p>Duo MFA enrollment complete. If you sign out and sign in back then immediately a push notification will be sent to your device and all you need is tap on \"Approve\". Also you will see the user \"test\" in Duo where you can delete the user, or deactivate just click on it and experiment.</p> <p></p>"},{"location":"authentication/zabbix-saml/","title":"Authentication with SAML","text":""},{"location":"automation/automating-configuration/","title":"Automating configuration","text":""},{"location":"configuration/Dashboard/","title":"Zabbix Interface","text":"<p>This chapter is going to cover the basics we need to know when it comes to the Zabbix userinterface and the thing we need to know before we can start to fully dive into our monitoring tool. We will see how the userinteface works how to add a host, groups users, items ... so that we have a good understanding of the basics. This is something that is sometimes missed and can lead to frustrations not knowing why things don't work like we had expected them to work. So even if you are an advanced user it may be usefull to have a look into this chapter.</p>"},{"location":"configuration/Dashboard/#overview-of-the-interface","title":"Overview of the interface","text":"<p>With Zabbix 7 the user interface after logging in is a bit changed. Our menu on the left side of the screen has has a small overhaul. Let's dive into it. When we login into our Zabbix setup the first time with our Admin user we see a page like this where we have our <code>main window</code> in green  our <code>main menu</code> marked in red and our <code>links</code> marked in yellow.</p> <p></p> <p>The main menu can be hidden by collapsing it completely or to reduce it to a set of small icons. </p> <p>When we click on the button with the 2 arrows to the left:</p> <p> </p> <p>You will see that the menu collapses to a set of small icons. Pressing \"&gt;&gt;\" will bring the <code>main menu</code> back to it's original state. Pressing the box with the arrow sticking out next to the \"&lt;&lt;\" button will hide the <code>main menu</code> completely.</p> <p></p> <p>To get the main menu back it's not too difficult we just look for the button on the left with three horizontal lines and click it. This will bring the menu back and clicking on the box with the arrow agian will bring the <code>main menu</code> back.</p> <p>Yet another way to make the screen bigger that is quit useful for monitors in NOK teams for example is the kiosk mode button. This one is however located on the left side of your screen and looks like 4 arrows pointing to every corner of the screen. Pressing this button will remove all the menus and leave only main window to focus on.</p> <p> </p> <p>When wanting to leave the kios mode the button will be changed to 2 arrows poiting to the inside of the screen. Pressing this button will revert us back to the original state.</p> Tip <p>We can also enter and exit kiosk mode by making use of parameters in our Zabbix url:  <code>/zabbix.php?action=dashboard.view&amp;kiosk=1</code> - activate kiosk mode or <code>/zabbix.php?action=dashboard.view&amp;kiosk=0</code> - activate normal mode</p> Note <p>There are many other page parameters we can use. A full list can be found here</p> <p>Zabbix also has a global search menu that we can use to find hosts, host groups and templates.</p> <p></p> <p>If we look in the search box for <code>server</code> you will see that we get an overview of all templates, host groups and hosts with the name <code>server</code> in it.</p> <p></p>"},{"location":"configuration/Dashboard/#main-menu","title":"Main menu","text":"<p>Our main menu on the left consists of a few sections, 9 to be exact:</p> Menu Name Details Dashboards Contains an overview of all the dashboards we have access to. Monitoring Shows us the hosts, problems, latest data, maps, ... Services An overview of all the Services and SLA settings. Inventory An overview of our collected inventory data. Reports Shows us the system information, scheduled reports, audit logs, action logs, etc . Data collection Contains all things related to collecting data like hosts, templates, maintenance, discovery, ... Alert The configuration of our media types, scripts and actions Users User configuration like user roles, user groups, authentication, API tokes, ... Administration The administration part containing all global settings, housekeeper, proxies, queue, ..."},{"location":"configuration/Dashboard/#links-menu","title":"Links menu","text":"<p>Our last part the <code>links</code> part  contain a set of useful links that we can use:</p> Menu name Details Support This brings us to the technical support page that you can buy from Zabbix. Remember that your local partner is also able to sell these contracts and can help you in your own language. Your local distributors Integrations The official zabbix integeration page Help The link to the documentation of your Zabbix version User settings The user profile settings. Sign out Log out of the current session. <p>There are still a few buttons that we need to cover on the right side of our screen</p> <p></p> <p>The edit button allows us to change our dashboard. This is something we will cover later. On the far left side there is a  \"?\" this will bring you to the Zabbix documentation page that explains everything about the dashboard. The button on the right side with the 3 horizontal lines is the one to share, rename, delete, ... our dashboards.</p> <p></p>"},{"location":"configuration/Dashboard/#system-information","title":"System Information","text":"<p>There is also a box on the dashboard called <code>System Information</code>. This widget will show you the current System status of your Zabbix setup. Let's go over the different lines of information as they are important to understand.</p> Parameter Value Details Zabbix server is running This gives us the status of our zabbix server if it is running yes or no and if it is running on our localhost or another IP and on what port the zabbix server is listening. If no trapper is listening the rest of the information can not be displayed IP and port of the Zabbix server Zabbix server version This shows us the version of the <code>Zabbix server</code> so the version you see at the bottom of your screen is the one from the Zabbix frontend and can be different but should be in the same major version. Version Number Zabbix frontend version This is the version of the frontend and should match with what you see at the bottom of your screen. Version Number Number of hosts (enabled/disabled) The total number of hosts configured on our system How many of those are enabled and disabled Number of templates The number of templates installed on our Zabbix server. Number of items (enabled/disabled/not supported) This line shows us the number of items we have configured in total in this case 99 90 are enabled and 0 are disabled but 9 of them are unsupported. This last number is important as those are items not working. We will look into this later why it happens and how to fix it. For now remember that a high number of unsupported items is not a good idea. Number of triggers (Enabled/disabled[problem/ok]) The number of triggers configured Number of enabled and disabled triggers. Just as with items we also see if there are triggers that are in a problem state or ok state. A trigger in a problem state is a non working trigger something we need to monitor and fix. We will cover this also later. Number of users (online) Here we see the number of users that are configured on our system The nunber of users currently online. Required server performance, nvps The number of new values per second that Zabbix will process per second. This is just an estimated number as some values we get are unknown so the real value is probably higher. So we can have some indication about how many IOPS we need and how busy our database is. A better indication is probably the internal item <code>zabbix[wcache,values,all]</code> High availability cluser It will show us if we are running on a Zabbix HA cluster or not Failover delay once HA is activated Tip <p>System information may display some additonal warnings like when your database doesnt have the correct character set or collation UTF-8. Also when the database you used is lower or higher then the recommended version or when there are misconfigurations on housekeeper or TimescaleDB. Another warning you can see is about database history tables that aren't upgraded or primary keys that have not been set. This is possible if you are coming from an older version before Zabbix 6 and never did the upgrade.</p>"},{"location":"configuration/Dashboard/#the-main-menu-explained","title":"The main menu explained","text":"<p>It's important to know that we have so far seen our dashboard with the Admin user and that this user is a <code>Zabbix Super Admin</code> user. This means that the user has no restrictions. Zabbix works with 3 different levels of users we have the regular users, Zabbix Admin and Zabbix Super Admin users. Let's have a look</p> <p></p> <pre><code>* A ```Zabbix User``` will only see the &lt;font color='red'&gt;red&lt;/font&gt; part of our ```main menu``` and will only be able to see our collected data.\n* A ```Zabbix Admin``` will see the red part and the &lt;font color='gold'&gt;yellow&lt;/font&gt;  part of the ```main menu``` and is able to change our configuration.\n* A ```Zabbix Super Admin``` will see the complete ```main menu``` and so is able to change the configuration and all the global settings.\n</code></pre> <p></p> <pre><code>- Problems: This page will give us an overview of all the problems. With filter we can look at recent problems past problems and problems that are active now. There are many more filters tor drill down more.\n- Hosts: This will give us a quick overview page with whats happening on our hosts and allows us to quickly go to the latest data, graphs and dashboards.\n- Latest data: This page I probably use the most, it shows us all the information collected from all our hosts.\n- Maps: The location where we can create map that are an oveview of our IT infrastructure very useful to get a high level overview of the network.\n- Discovery: When we run a network discovery this is the place where we can find the results.\n</code></pre> <p></p> <pre><code>- Services This page will give us a high level overview of all services configured in Zabbix.\n- SLA: An overview of all the SLAs configured in Zabbix.\n- SLA Report: Here we can watch all SLA reports based on our filters.\n</code></pre> <p></p> <pre><code>- Overview: A place where we can watch all our iventory data that we have retrieved from our hosts.\n- Hosts: Here we can filter by host and watch all inventory data for the hosts we have selected.\n</code></pre> <p></p> <pre><code>- System information: System information is a summary of key Zabbix server and system data.\n- Scheduled reports: The place where we can schedule our reports, a pdf of the dashboard that will be sent at a specified time and date.\n- Availability report: A nice overview where we can see what trigger has been in ok/nok state for how much % of the time \n- Top 100 triggers: Another page I visit a lot here we have our top list with triggers that have been in a nok state.\n- Audit log: An overview of the user activity that happend on our system. Useful if we want to know who did what and when.\n- Action log: A detailed overview of our actions can be found here. What mail was sent to who and when ...?\n- Notifications: A quick overview of the number of notifications sent to each user.\n</code></pre> <p></p> <pre><code>- Template groups: A place to logical group all templates together in different groups. Before it was mixed together with hosts in host groups.\n- Host groups: A logical collection of different hosts put together. Host groups are used for our permissions.\n- Templates: A set off entities like items and triggers can be grouped together on a template, A template can be applied to one or more hosts.\n- Hosts: What we need in Zabbix to monitor A  host, application, service ...\n- Maintenance: The place to configure our maintenance windows. A maintenance can be planned in this location.\n- Event correlation: When we have multiple events that fires triggers related we can configure correlations in this place.\n- Discovery: Sometimes we like to use Zabbix to discover devices, services,... on our network. This can be done here.\n</code></pre> <p></p> <pre><code>- Actions:\n- Media types:\n- Scripts:\n</code></pre> <p></p> <pre><code>- User groups:\n- User roles:\n- Users:\n- API tokens:\n- Authentication: \n</code></pre> <p></p> <pre><code>- General: \n- Audit log:\n- Housekeeping:\n- Proxies:\n- Macros:\n- Queue:\n</code></pre> Info <p>More information can be found in the online Zabbix documentation here</p> Info <p>You will see that Zabbix is using the modal forms in the frontend on many places. The problem is that they are not movable. This module created by one of the Zabbix devs <code>UI Twix</code> will solve this problem for you.</p> Note <p>At time of writing there is no Dashboard import/export functionality in zabbix. So when upgrading dashboards need to be created for admin by hand. This should be fixed in 7 onces it comes out. If not feel free to track https://support.zabbix.com/browse/ZBXNEXT-5419</p>"},{"location":"configuration/zabbix-agent/","title":"Zabbix Agent","text":""},{"location":"configuration/zabbix-agent/#zabbix-agent-linux","title":"Zabbix agent Linux","text":""},{"location":"configuration/zabbix-agent/#zabbix-agent-windows","title":"Zabbix agent windows","text":""},{"location":"configuration/zabbix-dataflow/","title":"Data Flow","text":""},{"location":"configuration/zabbix-dataflow/#data-collection","title":"Data Collection","text":""},{"location":"configuration/zabbix-dataflow/#simple-checks","title":"Simple Checks","text":""},{"location":"configuration/zabbix-hostgroups/","title":"Host groups","text":"<p>Let's have look at the concepts of host groups and what the benifits are that they provide.  We have seen that <code>Host groups</code> can be created directly when we create a new <code>Zabbix host</code>. Another way to create them is by a <code>Super Admin</code> going to Data collection -&gt; Host groups. Next press the button <code>Create host group</code> in the upper right corner of the screen. Host groups exists to make a logical group so we can add all hosts that belong together in one group or more. Ex all Linux server, all PostgreSQL server, or all the servers that belong to one team.</p> <p></p> <p>When going to our menu <code>data collection</code> you notice that there are <code>Host groups</code> and <code>Template groups</code>. If you come from an older Zabbix version you will be happy to read that Zabbix made a specific group for Templates. If you are new to Zabbix don't panic :). In older versions Zabbix had mixed Templates and host in one group. This mixing was sometimes confusing especially for new users, as Zabbix doesnt link templates to groups. </p> <p>When you click on the menu <code>Data collection</code> -&gt; Host groups. You will notice that some groups are already made. You will also see that there are some names behind the host groups with numbers in front. These names are the names from the hosts that are in the group. The number in fron is the number of hosts that are in the <code>host group.</code> To make life more easy you can click on the names of the hosts and Zabbix will bring you directly to the configuration screen for this host.</p> <p></p> <p>Zabbix allows the creation of nested groups. As you can see we are using forward slashes in our group name. When you make use of nested group you can use the '/' to separate groups. </p> <p></p> <p>Once our group or set of nested groups is made you can click again from the <code>host group</code> overview on the group. You will notice that there is now a box that says <code>Apply permissions and tag filters to all subgroups</code>. When pressing this button, all right that are this group will be applied to the sub-groups. So if we have a user <code>John</code> for example in a user group that has rights to see everything in the <code>Host group</code> with the name <code>Europe/Belgium</code> and we apply the option to the subgroups then our user <code>John</code> will suddenly see also the hosts in all our nestet groups and the tags on this host.</p> Note <p>When creating nested groups, Parent groups don't have to exist. So we can have only the group <code>open-future</code> without any of the parent groups. It's up to the user to create them or not. Also group names cannot have <code>/</code> in their names. We cannot escape the <code>/</code> character. Also leading and trailing slashes and multiple slashes in a row are not allowed.</p> Tip <p>Have you tried to put emoticons in fields like host group yet ?</p>"},{"location":"configuration/zabbix-hosts/","title":"Zabbix hosts","text":"<p>To understand how Zabbix works, it's important to know that <code>Hosts</code> in Zabbix are a reference to anything we would like to monitor.  It can be a physical host, a virtual machine, an application, a device, or even just a dummy host used to calculate data from existing  hosts into something new.</p> <p>It's probably one of the first tasks that we will do as an Admin when we first login to Zabbix because we need a host if we would like to monitor some metrics. It's however, important to know that hosts cannot be created without being in a hostgroup. </p> <p>With this said, let's see how to create our first host.</p> <p>Let's go to the menu on your <code>left</code> and select Data Collection -&gt; Hosts. We see that there is already a host configured and that the availability icon is \"RED\". Don't worry about it, this is normal. We have no Zabbix agent installed or configured.</p> <p>To add a new host to our system, we have to press <code>Create host</code>,  this button can be found in the upper right corner of our screen.</p> <p></p> <p>We now get a modal form where we need to fill in some information about our host. The fields marked with a  red  asterisk  \"*\"  are the fields that are mandatory.</p> <p></p> ParameterDescription Host nameHere we need to enter the  Host name  of the machine we would like to add. The name can contain alphanumerics, spaces, dots, dashes, and underscores. HOWEVER you are not allowed to use leading and trailing spaces. The Host name in the frontend is what we need later for the configuration of our Zabbix agent, so make sure you remember it.  Visible nameThe host name, as we have seen, is needed to configure our Zabbix agent. So in case you like to give it a unique name or one that is  randomly generated, ...  you can add a visible name here. This name will then be used on the frontend instead of what we call the technical name host name. This name has support for UTF-8, so special characters are supported. This name will be used in all the places like maps, the latest data, inventory, ... TemplatesTemplates are like blueprints that we can use on our hosts to add items, triggers, etc.  We explain more about it in the topic Zabbix templates. You can start typing the name of the template, and Zabbix will start to show a list with matches, or you can press the ```Select``` box and choose one from the list.   Host groupsEvery host must belong to atleast one ```host group```. This is because permissions are set on host groups. You can type the name of the host group, and a list of matching groups will start to appear. Another way is to select a host group from an existing list by pressing the Select button. Or you can create a new group by just typing the name and pressing on the box that shows the name of the group you typed with (new) behind it InterfacesZabbix supports several host interfaces, like the Zabbix agent, SNMP, JMX, and IPMI. By default, when we create a host, no interface is added. To add an interface, press Add and fill in the needed information, like IP or DNS, depending on the host interface chosen. When an interface is in use (items created that use the interface), then the interface cannot be removed. DescriptionA place to enter a short description about our host. Monitored by proxyIf we have proxies configured, we can select them here if we like to monitor our host through a proxy. EnabledMark the checkbox to enable the host. This will keep it monitored by Zabbix. When unchecked, the host will not be monitored."},{"location":"configuration/zabbix-hosts/#host-menu-details","title":"Host menu details","text":"<p>Before we add a host ourselves, there are a few things we need to know first. When we click on a host that we have already configured, there are a few things that we will notice. First of all, we see a <code>blue</code> line under <code>Host</code>. This means that we are on the current <code>tab</code> of the host page. As you can see, there are multiple tabs that we can click on, like IPMI, Tags, Macros,... </p> <p></p> <p>The next thing we see is that next to the tab <code>Macros</code>, there is a number 2. This is because there are two macros configured in the macro tab. So when we add information to tabs like macros or tags ... , Zabbix will show how many items we have added to these tabs by showing next to the tab name the number.</p> <p>When looking at the <code>encryption</code> tab, we notice the green dot. This shows us that an option on the tab has been activated. Now that we know this, let's get a quick overview of every tab and see what it does.</p>"},{"location":"configuration/zabbix-hosts/#ipmi","title":"IPMI","text":"<p>So looking at the <code>IPMI</code> tab, there are a few things we need to fill in when working with an IPMI interface. IPMI stands for Intelligent Platform Management Interface and is basically a set of standards to manage hardware platforms. In short, it allows us to monitor and manage our servers hardware even if the server is not turned on yet. IPMI is better known as ILO on HP servers and DRAC on Dell servers.</p> ParameterDescription Autentication algorithmSelect the authentication algorithm that we have configured on our IPMI server this can be Default, none, MD2, MD5, Straight, OEM, RMCP+ Privelege levelHere we select the privelege level: Callback, User, Operator, Admin or OEM.  UsernameThe user for authentication that was created on the host. User Macros can be used PasswordThe password for our user on the host. User macros can be used. Note <p>We will cover IPMI in more detail later in the Chapter IPMI Monitoring</p>"},{"location":"configuration/zabbix-hosts/#tags","title":"Tags","text":"<p>To Do</p>"},{"location":"configuration/zabbix-interfaces/","title":"Interfaces","text":"<p>When setting up your host, if you want to monitor him, you will quickly need to specify an IP address or a FQDN.</p> <p>This configuration is located in the interface section of the create host view.</p> <p>After clicking add, a drop-down menu will ask you to select the type of interface.</p> <p></p> Parameters Description Agent Allows use of item keys of type Zabbix Agent and Zabbix Agent Active SNMP Allows monitoring of the host via SNMP type items JMX Allows monitoring of Java applications through JMX counters IPMI Allows monitoring of IPMI through items of type <p>All types of interfaces need same information, IP or DNS and port number. If you want to use DNSremember to click on the button DNS in <code>Connect to</code>.</p> <p>SNMP interface need four more informations:</p> <ul> <li>SNMP version, depend of snmp version configured on the host</li> <li>SNMP Community, depend of snmp community configured on the host</li> <li>Max repetition count, necessary for native SNMP bulk requests Note that setting this value too high may cause the SNMP agent check timeout.</li> <li>Mark the Use combined requests checkbox to allow combined processing of SNMP requests (not related to native SNMP bulk requests)</li> </ul> <p>You can create several interfaces on a host, which may or may not be identical. If more than one interface of a type exists, you can define the default interface (which will be used by default by all items on the host)</p> Note <p>We will cover IPMI in more detail later in the Chapter IPMI Monitoring We will cover JAVA in more detail later in the Chapter IPMI Monitoring We will cover SNMP in more detail later in the Chapter IPMI Monitoring</p> Tip <p>If you want to monitor host with HTTP call, interface are not necessary.</p>"},{"location":"configuration/zabbix-items/","title":"Items","text":""},{"location":"configuration/zabbix-macros/","title":"Macros","text":""},{"location":"configuration/zabbix-templates/","title":"templates","text":""},{"location":"configuration/zabbix-users/","title":"Zabbix Users &amp; User groups","text":"<p>Now that we know how the Zabbix dashboard is build up our first task will be to create a user. In case you missed it the standard Zabbix (yes the capital Z here is eeded to login.) user is Admin and has the password zabbix so we need to change this ASAP.  The most confusing part is probably that the user Admin in zabbix is actually a <code>super admin</code> but more about that later.</p>"},{"location":"configuration/zabbix-users/#changing-the-zabbix-super-admin-password","title":"Changing the Zabbix super admin password","text":"<p>In our menu on the right side of the screen, click the <code>Users</code> section, and then choose <code>users</code>. As you can see here in the screenshot.</p> <p></p> <p>You will now see a list of all the users that are created on the system when installing a new Zabbix instance. Here you will always see a list of all users that are configured on the system.</p> <p></p> <p>To change the password, do the following steps: - Click user <code>Admin</code> - Click on the button <code>Change password</code>. - Fill in the current password, <code>zabbix</code> - Fill in the new password twice and press <code>Update</code> at the bottom of the page.</p>"},{"location":"configuration/zabbix-users/#zabbix-user-types","title":"Zabbix User types","text":"<p>Before we create new users, it's important to know that Zabbix has three user types that are built-in.</p> User typeDescription Zabbix UserThis is a normal user that only has read-only permissions if given. So there are no permissions assigned by default. Zabbix AdminA user with read/write permissions. Just like the Zabbix user, there are no permissions by default. However access can be denied to some groups. Zabbix Super AdminA user with group read/write permissions. The user will have read/write access to all host and template groups. Access can't be revoked by denying access to groups, like with a normal admin. <p>Besides these differences, these users also have different access rights to our menu. Let's have a closer look.</p> <ul> <li>A normal user will only see a part of our menu on the left. Also, some sub-sections of the menu will not be visible. An <code>Admin</code> user will have more rights than a regular user and will be able to make some configuration changes in Zabbix. A <code>Super Admin</code> user will have unlimted right and see every part of the menu. The only way to limit a <code>Super Admin</code> will be by making use of roles. Something we cover later.</li> <li>An <code>Admin</code> user will have more rights than a regular user and will be able to make some configuration changes in Zabbix.</li> <li>A <code>Super Admin</code> can access all parts of the menu. </li> </ul> <p>This table gives an overview of all the permissions a Zabbix user, admin, and super admin have in the Zabbix menu:</p> Zabbix UserZabbix AdminZabbix Super Admin Dashboards\u2705\u2705\u2705 Monitoring\u2705\u2705\u2705 - Problems\u2705\u2705\u2705 - Hosts\u2705\u2705\u2705 - Latest data\u2705\u2705\u2705 - Maps\u2705\u2705\u2705 - Discovery\u274c\u2705\u2705 Services\u2705\u2705\u2705 - Services\u2705\u2705\u2705 - SLA\u274c\u2705\u2705 - SLA Report\u2705;\u2705\u2705 Inventory\u2705\u2705\u2705 - Overview\u2705\u2705\u2705 - Hosts\u2705\u2705\u2705 Reports\u2705\u2705\u2705 - System information\u274c\u274c\u2705 - Scheduled reports\u274c\u2705\u2705 - Availability report\u2705\u2705\u2705 - Triggers top 100\u2705\u2705\u2705 - Audit log\u274c\u274c\u2705 - Action log\u274c\u274c\u2705 - Notifications\u274c\u2705\u2705 Data Collection\u274c\u2705\u2705 - Template groups\u274c\u2705\u2705 - Host groups\u274c\u2705\u2705 - Templates\u274c\u2705\u2705 - Hosts\u274c\u2705\u2705 - Maintenance\u274c\u2705\u2705 - Event correlation\u274c\u274c\u2705 - Discovery\u274c\u2705\u2705 Alerts\u274c\u2705\u2705 - Trigger actions\u274c\u2705\u2705 - Service actions\u274c\u2705\u2705 - Autoregistration actions\u274c\u2705\u2705 - Internal actions\u274c\u2705\u2705 - Media types\u274c\u274c\u2705 - Scripts\u274c\u274c\u2705 Users\u274c\u274c\u2705 - User groups\u274c\u274c\u2705 - User roles\u274c\u274c\u2705 - Users\u274c\u274c\u2705 - Api tokens\u274c\u274c\u2705 - Authentication\u274c\u274c\u2705 Administration\u274c\u274c\u2705 - General\u274c\u274c\u2705 - Audit log\u274c\u274c\u2705 - Housekeeping\u274c\u274c\u2705 - Proxies\u274c\u274c\u2705 - Macros\u274c\u274c\u2705 - Queue\u274c\u274c\u2705 <ul> <li>An <code>Admin</code> user will have more rights than a regular user and will be able to make some configuration changes in Zabbix.</li> <li>A <code>Super Admin</code> can access all parts of the menu. </li> </ul>"},{"location":"configuration/zabbix-users/#creating-a-new-user-in-zabbix","title":"Creating a new User in Zabbix","text":"<p>So now that we are in the users section of Zabbix, it's probably a good time to create a new user for our system. If you skipped the previous step, go to the menu <code>Users</code> -&gt; <code>Users</code>.</p> <p>Click on the top right on <code>Create user</code> and fill in the details of your new users. You will see that some fields have red asterisks in front of them, like Username and Password, ... this means that those fields are mandatory to fill in.</p> <p></p>"},{"location":"configuration/zabbix-users/#strengthen-the-zabbix-password-policy","title":"Strengthen the Zabbix password policy.","text":"<p>Zabbix passwords rely on a minimum length of 8 characters and also block a list of easy-to-guess passwords. We can make our passwords more secure by telling Zabbix that our passwords must contain uppercase and lowercase characters, a digit, and a special character. This policy is a global policy that will be enforced, and we have to set this policy as Super Admin. Go to the menu Users -&gt; Authentication. In older versions, you can find it under Administration Authentication.</p> <p></p> ParameterDescription UsernameA unique name that will be used as username when we login. NameThe users firstname this field is optional visible in acknowledgment information and notification recipient information if set. Last NameUsers last name. Optional, this field is optional visible in acknowledgment information and notification recipient information if set. GroupsSelect what group the user will belong to. Atleast 1 group needs to be selected. This feeld will auto complete or you can press the '''Select''' button at the end of the field. PasswordThere are 2 password fields they can only be used for internal authentication but more about this later. If the user has the Super admin role then clicking on the Change password button opens an additional field to entering the current (old) password. On a successful password change, the user for which the password was changed will be logged out of all active sessions. LanguageLanguage of the frontend. The php gettext extension is required for the translations to work. And the language needs to be configured on the system. See the chapter \"Installing Zabbix\" in case you forgot. TimezoneSelect the time zone per user or use the default timezone that is configured on the Zabbix server. ThemeHere users can select their own look and feel by choosing one of the 4 themes provided by Zabbix or another custom made theme. Default will switch to the default theme chosen by the admin. Auto-LoginCheck this box so that the user will be remembered for 30 days. The browser must accept cookies for this to work. Auto-LogoutChecking this box makes sure the user gets logged out automatically, after the set amount of seconds (minimum 90 seconds, maximum 1 day). Time suffixes are supported, e.g. 90s, 5m, 2h, 1d. Note that this option will not work if : <li>If the \"Show warning if Zabbix server is down\" global configuration option is enabled and Zabbix frontend is kept open.</li><li>When Monitoring menu pages perform background information refreshes.</li><li>If logging in with the Remember me for 30 days option checked.</li> RefreshSet the refresh rate used for graphs, plain text data, etc. Can be set to 0 to disable. Time suffixes are supported. Ex: 90s, 5m, 1h. Rows per pageDefine how many rows per page will be displayed in lists. URL(after login)You can make Zabbix transfer the user to a specific URL after successful login. This can be useful for monitors in NOC team for example so you arrive on a specific dashboard that is maximised. You can make Zabbix transfer the user to a specific URL after successful login. This can be useful for monitors in NOC team for example so you arrive on a specific dashboard that is maximised."},{"location":"configuration/zabbix-users/#user-media","title":"User Media","text":"<p>The tab ''' Media ''' contains a list of all media that are defined for our user. Media is used for sending notifications to the user. We can click the <code>Add</code> button.</p> <p></p> <p>Adding the media here is not enough to receive notification; we also need to configure our media properly, and we still need to configure actions as well. When pressing the ''' Add ''' button, we get a popup where we can select some information.</p> <p></p> ParameterDescription TypeA drop down list with the names of all media types. When a media type is disabled it will be in red. Send toHere we can provide contact information. For an email media type it is possible to add several addresses by clicking on '''Add'''  below the address field. In this case, the notification will be sent to all email addresses provided. It's also possible to specify recipient name in the Send to field of the email recipient in a format 'Recipient name &lt;address1@company.com&gt;'. Note that if a recipient name is provided, an email address should be wrapped in angle brackets (&lt;&gt;). UTF-8 characters in the name are supported, quoted pairs and comments are not. For example: John Doe &lt;manager@open-future.com&gt; and manager@nycdatacenter.com are both valid formats. Incorrect examples: John Doe manager@open-future.com, %%\"Zabbix\\@\\&lt;H(comment)Q\\&gt;\" zabbix@company.com %%. when activeThe time when media will be active from monday till sundat, 1-7 and the time from 00:00 till 24:00 for example only in weekends from 6 in the morning till 5 in the evening: 6-7,06-17:00i. This is based on the user his timezone Use if severityA list of checkboxes from the severities you would like to recieve notifications from. Selected severities will be displayed in color. !! Read the warning below!! StatusStatus of the media we have selected either enabled or disabled ( in use or not ) Warning <p>When selecting the different severity levels, be aware that you have to select <code>Not classified</code> if you want to receive notifications about non-trigger events, like internal events. For more information, check out Event Sources. This is something that is not obvious, and Zabbix documentation could be better at explaining this.</p>"},{"location":"configuration/zabbix-users/#user-permissions","title":"User permissions","text":"<p>When we go to the <code>Permissions</code> tab in our <code>Users</code>, we will get an overview of all permissions our users had in the menu structure. Or when creating a new user, we have the option to select a <code>User Role</code>. Zabbix has four different <code>User Roles</code> built-in. There is a User role, Admin role, Super admin role, and a Guest role.</p> <p>The <code>Guest role</code> is a role with very strict access limitations. Its role is intended for users to access Zabbix without any user account. I never advise using this role unless you know what you are doing. When you open your GUI to users without any authorization, this could leak potential sensitive data like hostnames, IPs, etc.</p> <p>Choosing a <code>User type</code> is one thing; based on the <code>User type</code> we choose, our users will have more or less rights in our main menu. But there is another important part when choosing the <code>User Type</code>. This also has an impact on the rights each user has over host groups. For example, a regular user can only have read rights or no rights. A Zabbix admin user can have full, read-only, or no rights, and a Zabbix Super Admin always has full rights on host groups, and his rights on the host groups cannot be revoked.</p> <p>Here is an overview of every user and his rights:</p> Group rightsZabbix UserZabbix AdminZabbix Super Admin Read/WriteRead OnlyFullFull Read onlyRead OnlyRead OnlyFull DenyNoneNoneFull Note <p>With all this knowledge, we now know that if we want to create a regular user who also has access to certain parts of the Administration menu, that it's not possible. We can never create a user that has only RO access to certain host groups and RW access to the <code>Administration</code> part. What we could do, however, is create a <code>Super Administrator</code> account and remove access from the menu for certain parts of the <code>Administration</code>menu by creating a special role. There is no limit on the number of roles you can create.</p> Note <p>Also, be aware that when you click on an item on the dashboard on <code>Update</code>, you will see a modal window popup with some options to change the severity, close a problem, etc., so some will be greyed out. This is because the user needs write permissions. For example, a user needs write permissions to close a problem and change the severity level.</p> <p></p> Note <p>With Zabbix 7 Permission checks have been made much faster. This was made possible by making some improvements on how permissions are stored. This should make the frontend faster when when we have permission havy pages to load like the ones with hosts or problems widgets. - New tables have been introduced for the check of non-privileged users. - The new tables will keep hashes (SHA-256) of user group sets and host group sets for each user/host. - Also a new permission table was introduced for storing only the accessible combinations of users and hosts, specified by the hash IDs. - Hashes and permissons are not calculated for Super Admin users.</p>"},{"location":"configuration/zabbix-users/#user-roles","title":"User Roles","text":"<p>User roles have been in Zabbix since version 5.2 and make our lives easier by allowing us to make some custom adjustments to the standard defind user types in Zabbix.</p> <p>When we go to our <code>Permissions</code> tab, we can see a box <code>Role</code>. Press the <code>Select</code> box to see a popup with a list of roles to choose from. There are four standard roles to choose from. You can create your own list of rules by going to the menu <code>Users -&gt; User Roles</code> and create your own limited user.</p> <p>The box is marked with an asterisk in front, so you need to select a user role for every user you create.</p> <p></p> Warning <p>Be aware that no permissions can be added to user roles only permissions can be revoked.</p>"},{"location":"configuration/zabbix-users/#user-groups","title":"User Groups","text":"<p>A user always needs to be member of one or more <code>User groups</code>. We will not set any user rights directly on Users in Zabbix but we do this on User groups. So if a User needs the  permission to view or edit a host or a template then this is set on the <code>User group</code> wich has the permisson to view or edit a host or template group and never on a host or a template directly.</p> <p></p> <p>Zabbix has a few different rights we can use on group level, as we have seen above. To make it easier for you I add them again:</p> Group rightsZabbix UserZabbix AdminZabbix Super Admin Read/WriteRead OnlyFullFull Read onlyRead OnlyRead OnlyFull DenyNoneNoneFull <p>When it comes to permissions in Zabbix groups, the highest level will win.  A user that has read and read-write rights on the same host will get read-write permissions. Except for Deny, Deny will always overrule. So if we have a Zabbix <code>Admin</code> user then this user can have Read/Write rights, if we add a host in a hostgroup where our usergroup has read rigths, and the same server is in another hostgroup with Read/Write rights, then our user will have Read/Write permissions on the hosts. However if the same host is only in the <code>Read</code> hostgroup then our user will only have read rights. If we also add host in a Hostgroup where our usergroup has <code>Deny</code> rights then the server will not be visible.</p> <p>Let's have a look at our <code>User groups</code>, for this go to the menu <code>Users -&gt; User groups</code> and click on one of the existing users. I used <code>Guest</code> in this case.</p> <p></p>"},{"location":"configuration/zabbix-users/#user-groups-overview","title":"User Groups Overview","text":"<p>Under the tab <code>User group</code> we see the following options:</p> <ul> <li>User group : A field where we have to specify a unique name. This field in mandatory</li> <li>Users : Here we add users to our group. Users need to exist before we can add them. Just press select or type the name.</li> <li> <p>Frontend Access : How users of the group will authenticate with Zabbix.</p> <ul> <li>System default : The global configure access method</li> <li>Internal : The most easiest way User and Password are configured in Zabbix ( Ignored if HTTP authentication is the global default.)</li> <li>LDAP: LDAP/AD authentication ( Ignored if HTTP authentication is the global default )</li> <li>Enabled : If checked the group is Enabled else it will be Disabled</li> <li>Debug : Activate debug mode for the users in this group More info about debug</li> </ul> </li> <li> <p>The next tab next to <code>User group</code> is the tab <code>Template permissions</code>. Here we can define what <code>User group</code> will have access to what <code>template group</code>. We can define if a <code>User group</code> has read, read-write permissions or if all access must be denied. When selecting a template group don't forget to press the <code>Add</code> button first so that you see the <code>Template group</code> appear in the Permissions box. Then when you are ready confirm again at the bottom of the page with <code>Updqte</code>.</p> </li> </ul> <p></p> <ul> <li>The <code>Hosts permissions</code> tab allows us to specify what <code>User group```` will have what kind of access on the selected</code>Host groups<code>this can again be read, read-write or explicit deny. Just as with the</code>Templates permissions<code>tab don't forget to click</code>Add<code>first and when you are ready defining all the permissions click</code>Update``` at the bottom. The name is a bit confusing as we don't select permissions for a host but a host group.</li> </ul> <p></p> Note <p>If we add multiple lines with the same host group or template group with different permissions Zabbix will apply the strongest permission. Alow be aware that a Super admin user can enforce nested groups to have the same level of permissions as the parent group. It can be done in the host group or template group configuration.</p> <ul> <li>The <code>Problem tag filter</code> allows us to filter problems based on tags and their value. It also allows us to separate the access to host groups from our possibility to see only the problems we want.</li> </ul> <p></p>"},{"location":"configuration/zabbix-users/#lets-do-this-together","title":"Let's do this together:","text":"<p>Let us make three <code>Host groups</code>, go to the <code>Data collection</code> menu -&gt; <code>Host groups</code> and create a Host group for <code>read</code> , <code>read-write</code>, and <code>deny</code>.</p> <p></p> <p>Next step is to create a host and add the host in our three groups. Go to the <code>Data collection</code> menu -&gt; <code>Hosts</code> and press <code>Create host</code> on the right. Add a <code>Host name</code>, the name is not that important and add the three <code>Host groups</code> we just made.</p> <p></p> <p>The only thing we need to do now is create our <code>User</code> and <code>User group</code> and give the correct rights. Go to our menu <code>Users</code> -&gt; <code>Users group</code> and click on the top right to <code>Create user group</code>. Let's call this group our <code>Admin Group</code> as we need a Zabbix <code>Admin</code> that we can give read, read-write and later deny to show this.</p> <p></p> <p>Next go to the tab <code>Host permissions</code> and start typing the name of our group <code>read</code> in the search box or press the <code>Select</code> button and select the correct group. Next before we do anything select also the correct permissions <code>Deny</code> and press the add just below NOT the button. Do this also for the group <code>read-write</code> and <code>deny</code>. If everything looks like in our screenshot then press the <code>Add</code> button</p> <p></p> <p>Now for the final step let's create a user. Go to the menu <code>Users</code> -&gt; <code>Users</code> and create a new user, in the field <code>Username</code> we can add our fictive user with the name Brian. In the <code>Groups</code> box we select our <code>Users group</code> this was <code>Admin Group</code>. Don't forget also to add a Password we need to do this twice. Next go to the tab <code>Permissions</code> and select the role <code>Admin role</code>. You will see directly once selected that our users bridan has read, write and deny on the correct groups. Press <code>Add</code> at the bottom.</p> <p> </p> <p>Now it's time to check if everything is as expected. Our user <code>Brian</code> if all goes well shouldn't have any rights as we explicitly denied accesss. Press <code>Sign out</code> at the bottom left and then login as user <code>Brian</code>. Go to the menu <code>Monitoring</code> -&gt; <code>Hosts</code>. Select all the hosts groups, you should normally only see read, and read-write. Our host group <code>Deny</code> is not visible and our host <code>postgres</code> is not visible either.</p> <p></p> <p>Now log back in as user <code>Admin</code>, our Zabbix Super Admin and remove the deny group from our <code>Admin group</code>. This can be done by selecting the <code>None</code> permissions for the group <code>Deny</code> in the <code>Host permissions</code> tab from our <code>User group</code>.</p> <p>Log back in as our user Brian go back to the <code>Monitoring</code> menu to <code>Hosts</code>. If all goes well our groups <code>read</code> and <code>read-write</code> are still selected if nog you just select them again. You will see that our host <code>postgres</code> is visisble and that you can click on it to edit the host propreties.</p> <p></p> <p>As final test you can try to remove the group <code>read-write</code> same as we did before with the <code>Deny</code> group. This time only the <code>read</code> group will be visible for our user and Brian will not be able to edit our host <code>postgres</code> anymore.</p>"},{"location":"configuration/zabbix-users/#lets-try-out-tags","title":"Let's try out tags","text":"<p>Now let's add tags into the mix. Imagine that we only like to see problems with a tag <code>read-write</code> and value <code>off</code>. Go to <code>User groups</code> select our <code>Admin Group</code> again and go to the tab <code>Problem tag filter</code> and fill in the needed tag <code>read-write</code> and value <code>off</code>.   </p> <p></p> <p>Now we need to create a problem for this we will add an item and a trigger to our host <code>postgres</code>. Go to the menu <code>Data collection</code> -&gt; <code>Hosts</code> and click on items behind our host <code>postgres</code>. On the top right you will see a button <code>Create item</code> click on it and fill in the same data as in the screenshot below. Don't worry if you don't understand anything we will come to items later.</p> <p></p> Note <p>In this item we just tell our Zabbix server to do a ping to IP <code>192.168.10.1</code> make sure this IP doesn't exist in your lan so try to ping it first to be sure you don't get a reply back. If you do get a reply back change the IP with some address that is not pingable for you.</p> <p>Next step once you have filled in all the data is to save the item and click on top on Triggers. You will also notice now that there is a <code>1</code> next to Items. This indicates that we have made 1 item on our host <code>postgres</code>. Now that we are in the trigger tab click in the top right corner on the button <code>Create trigger</code>. Once again copy over all the data from the screenshot and save the trigger. If you changed the IP in the item make sure you use same IP in the trigger.</p> <p></p> <p>Next let's add a tag on our host <code>postgres</code> that tells Zabbix to mark everything on the host with a tag <code>read-write</code> and value <code>on</code>. Remember we added a value <code>off</code> in our <code>User group</code> problem tag filter tab. So we only want to see everything with a tag <code>read-write</code> and value <code>off</code>.</p> <p></p> <p>When you go now to the <code>Problem</code> page in the menu <code>Monitoring</code> you should see after some time a warning that there is a problem on our host postgres. You will also see that the problem got a tag read-write with value <code>on</code>.</p> <p></p> <p>You can clearly see that under our <code>Zabbix super admin</code> user the problem is visible. Now do the same but as user <code>Brian</code>. You will notice that there is no visible problem for our user even he has <code>read-write</code> access to the hostgroup where our server <code>postgres</code> belongs to.</p> <p>Now as user <code>Brian</code> I would like to see the problem so let's go to our menu <code>Data collection</code> and click on our host <code>postgres</code>. Go to the <code>Tags</code> tab and change the value from our tag <code>read-write</code> from on to <code>off</code>. So now everything on our host should get the tags <code>read-write</code> with value <code>off</code>. So now Brian should be able to see the problem right ?  Sadly <code>Brian</code> is still not able to see the problem in our Problem page. This is because the problem was already created in Zabbix and has already received the tag. So the only way to fix this is to close the problem first and let Zabbix create a new problem again.</p> <p>As <code>Super Admin</code> log back in and go to our trigger <code>Ping</code> and mark the box <code>Allow manual close</code> and press <code>Update</code>. Go back to the dashboard and behind the problem ping you will see <code>Update</code>. Click on it and selec the option <code>Close problem</code> and press <code>Update</code>.</p> <p></p> <p>Log back in as our user <code>Brian</code> and go to the problem dashboard. We will see that the problem is back. Even we closed the problem before Zabbix opened a new problem because the issue was not resolved. This time our issue has the tag with the correct value.</p> <p></p> Note <p>A Zabbix user needs to be created with a user role. You cannot create one without. </p> Warning <p>Be careful if you use the API at the time of writing it's possible to create a Zabbix user with the API without a role. When created by the API the user can even be saved by the frontend afterwards !</p> Info <p>More information can be found in the online Zabbix documentation here</p>"},{"location":"extra-monitoring/SNMP-monitoring/","title":"Monitoring SNMP,IPMI and JAVA","text":""},{"location":"installation/Requirements/","title":"Requirements","text":"<p>Zabbix has a set of requirements that need to be met on the hardware level and software level. These requirements can change over time and also depends on the size of your setup and the software you choose. So before you start buying metal or installing a random database version have a look at the Zabbix documentation and check the latest requirements for the version you want to install. The latest requirements can be found here. Don't forget to select your correct Zabbix version from the list.</p> <p>If you don't plan to run anything big just a small setup or a test setup Zabbix will run happy on a system with 2cpu and 8G ram. But all depends on how big your setup will be and how many items you will monitor, triggers you will create and for how long you want to keep that data. My advice in the days of Virtualization is you can start small and add more later.</p> <p>For the setup you can choose to install all components on 1 server or every component on a different server. For the ease of use just make a few notes for yourself:.</p> server ip zabbix server database server web server Tip <p>While zabbix uses dashes \"-\" in it's names when we need to install packages like zabbix-get or zabbix-sender  it's binaries use \"_\". like zabbix_sender or zabbix_server. This of course can vary depending if you use the packages from the original Zabbix repositories or not. Just be aaware that it's sometimes rather confusing and that if you installed somepackage with a dash that maybe the binary is with an underscore.</p>"},{"location":"installation/Requirements/#basic-os-configuration","title":"Basic OS configuration","text":""},{"location":"installation/Requirements/#firewall","title":"firewall","text":"<p>It's important for our Zabbix server to have an OS that is well prepared before we start to install our monitoring tool. First we need to make sure our firewall is installed. </p> <p><code># dnf install firewalld --now</code></p> <p>Our firewall is installed now, and we are ready to configure the needed ports. For our Zabbix server, we need to allow access to port 10051/tcp this is the port where our Zabbix trapper listens on for incoming data. So we need to open this port in our firewall to allow access to our Zabbix trapper.</p> <p><code># firewall-cmd --add-service=Zabbix-server --permanent</code></p> <p>or if the service is not known</p> <p><code># firewall-cmd --add-port=10051/tcp --permanent</code></p> <p>firewalld</p> <p>\"Firewalld is the replacement of iptables in Redhat and allows us to make changes available immediately without the need to restart a service. It's possible that your distribution is not using Firewalld in this case you have to look to the documentation of your OS.\"</p>"},{"location":"installation/Requirements/#timeserver","title":"timeserver","text":"<p>Another thing we need to configure is the setup of timeserver and sync our Zabbix server to the timeserver by making use of an ntp client. This needs to be done for the Zabbix server but also for the devices we will monitor as time is very important for Zabbix. Imagine one of our hosts having a time zone that is wrong we could end up looking for a problem in Zabbix that happened 6h ago while it had happened maybe only 2h ago.</p> <p><code># dnf install chronyd --now</code></p> <p>Chrony should be installed now and enabled and running. This can be verified with the command:</p> <p><code># systemctl status chronyd</code></p> <p>dnf</p> <p>\"dnf is a packagemanager from RedHat you need to replace dnf with your correct packagemanager like zyper, apt, yum, ... chrony is a replacement for ntpd and does a better job being faster and more accurate. If your OS does not support chrony then maybe ntpd is still available.\"</p> <p>Once Chrony is installed we also need to setup our correct time zone. We can have a look first with 'timedatectl' to see how our time is configured </p> <pre><code># timedatectl\n               Local time: Thu 2023-11-16 15:09:14 UTC\n           Universal time: Thu 2023-11-16 15:09:14 UTC\n                 RTC time: Thu 2023-11-16 15:09:15\n                Time zone: UTC (UTC, +0000)\nSystem clock synchronized: yes\n              NTP service: active\n          RTC in local TZ: no\n</code></pre> <p>Make sure that the service cronyd is active, see above on how to do if you missed it. We can choose the correct time zone from a list that we can lookup with the following command:</p> <pre><code># timedatectl list-time zones\n</code></pre> <p>This will give us a list with all available time zones. Choose the one closest to you.</p> <pre><code>Africa/Abidjan\nAfrica/Accra\n\n...\n\nPacific/Tongatapu\nPacific/Wake\nPacific/Wallis\nUTC\n</code></pre> <p>We can now configure our correct time zone with the following command:</p> <pre><code>timedatectl set-time zone Europe/Brussels\n</code></pre> <p>When we look again we should see our time zone properly configured.</p> <pre><code># timedatectl\n               Local time: Thu 2023-11-16 16:13:35 CET\n           Universal time: Thu 2023-11-16 15:13:35 UTC\n                 RTC time: Thu 2023-11-16 15:13:36\n                Time zone: Europe/Brussels (CET, +0100)\nSystem clock synchronized: yes\n              NTP service: active\n          RTC in local TZ: no\n</code></pre> Note <p>\"Some people like to install all servers in the UTC time zone so that all server logs are in the same time zone when having servers all over the world. Zabbix supports user based time zone settings so it's possible to keep the time zone in UTC on the server and then add the correct time zone in the user interface if you like.\"</p> <p>We can test if Chrony is syncronizing with the correct timeservers as well by running the command chronyc</p> <pre><code># chronyc\nchrony version 4.2\nCopyright (C) 1997-2003, 2007, 2009-2021 Richard P. Curnow and others\nchrony comes with ABSOLUTELY NO WARRANTY.  This is free software, and\nyou are welcome to redistribute it under certain conditions.  See the\nGNU General Public License version 2 for details.\n\nchronyc&gt;\n</code></pre> <p>Then we type <code>sources</code></p> <pre><code>chronyc&gt; sources\nMS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^- 51-15-20-83.rev.poneytel&gt;     2   9   377   354   +429us[ +429us] +/-  342ms\n^- 5.255.99.180                  2  10   377   620  +7424us[+7424us] +/-   37ms\n^- hachi.paina.net               2  10   377   412   +445us[ +445us] +/-   39ms\n^* leontp1.office.panq.nl        1  10   377   904  +6806ns[ +171us] +/- 2336us\n</code></pre> <p>Here we can see that we are using a bunch of ntp servers that are not in our own country so we better swicht to some timeservers in our local country or if we have a timeserver in our company we could use this one. We can find some local timeservers here : https://www.ntppool.org/</p> <p>To change this we have to edit our config file \"/etc/chrony.conf\" and replace the existing ntp server with our local one </p> <pre><code># Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\npool 2.centos.pool.ntp.org iburst\n</code></pre> <p>And change it to a local server:</p> <pre><code># Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\npool be.pool.ntp.org iburst\n</code></pre> <p>Don't forget to restart the ntpd client of course.</p> <pre><code># systemctl restart chronyd\n</code></pre> <p>When we look again we will see that we are now using our local timeservers.</p> <pre><code>chronyc&gt; sources\n\nMS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^- ntp1.unix-solutions.be        2   6    17    43   -375us[ -676us] +/-   28ms\n^* ntp.devrandom.be              2   6    17    43   -579us[ -880us] +/- 2877us\n^+ time.cloudflare.com           3   6    17    43   +328us[  +27us] +/- 2620us\n^+ time.cloudflare.com           3   6    17    43   +218us[  -83us] +/- 2815us\n</code></pre>"},{"location":"installation/installing-zabbix-ha/","title":"Configure Zabbix HA","text":"<p>In this topic  we will setup Zabbix in a High Available setup. This feature was added in Zabbix 6 and was one of the most important features added that time. The idea about this functionallity is that if your Zabbix server fails that another Zabbix server can take over. In this setup we will use 2 Zabbix servers but you are not limited to this you can add as many as you like.</p> <p>The HA setup in Zabbix is rather basic but works like a charm so don't expect fancy things like load balancing.</p> <p>Just like we did in our basic setup we will make a few notes again about the setup of the servers we have. I added the IP's that we will use here don't forgot to make notes of your own ip adresses.</p> <p></p> Server IP Zabbix Server 1 192.168.0.130 Zabbix Server 2 192.168.0.131 Postgres DB 192.168.0.132 Virtual IP 192.168.0.135 Note <p>As you notice our DB is not HA this is not a Zabbix component you have to implement your own solution this can be a HA SAN or you DB in a HA cluster setup. The cluster setup of our DB is out of the scope and not related to Zabbix so we will not cover this here. </p>"},{"location":"installation/installing-zabbix-ha/#lets-install-our-postgres-db","title":"Let's install our Postgres DB","text":"Note <p>If you are not running on x86 or like to try on another OS, then have a look at https://www.postgresql.org/download/ for the commands you need.</p> Warning <p>In this exercise we will take some shortcuts for the installation of the PostgreSQLDB and the OS. Look at our previous topics to get a better understanding where to tweak.</p> <pre><code># Install the repository RPM:\nsudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\n# Disable the built-in PostgreSQL module:\nsudo dnf -qy module disable postgresql\n\n# Install PostgreSQL:\nsudo dnf install -y postgresql16-server\n\n# Initialize the database and enable automatic start:\nsudo /usr/pgsql-16/bin/postgresql-16-setup initdb\nsudo systemctl enable postgresql-16 --now\n</code></pre>"},{"location":"installation/installing-zabbix-ha/#securing-the-postgresql-database","title":"Securing the PostgreSQL database\u00b6","text":"<p>PostgreSQL works a bit different then MySQL or MariaDB and this applies aswell to how we manage access permissions. Postgres works with a file with the name <code>pg_hba.conf</code> where we have to tell who can access our database from where and what encryption is used for the password. So let's edit this file to allow our frontend and zabbix server to access the database.</p> <pre><code># vi /var/lib/pgsql/16/data/pg_hba.conf\n</code></pre> <pre><code># \"local\" is for Unix domain socket connections only\nlocal   all             all                                         trust\n# IPv4 local connections:\nhost    zabbix          zabbix     192.168.0.130/32         scram-sha-256\nhost    zabbix          zabbix     192.168.0.131/32         scram-sha-256\nhost    all             all            127.0.0.1/32             scram-sha-256\n</code></pre> <p>After we changed the pg_hba file don't forget to restart postgres else the settings will not be applied. But before we restart let us also edit the file postgresql.conf and allow our database to listen on our network interface for incomming connections from the zabbix server. Postgresql will standard only allow connections from the socket.</p> <pre><code># vi /var/lib/pgsql/16/data/postgresql.conf\n</code></pre> <p>Replace the line with listen_addresses so that PostgreSQL will listen on all interfaces and not only on our localhost.</p> <pre><code>listen_addresses = '*'\n</code></pre> <p>When done restart the PostgreSQL cluster and see if it comes back online in case of an error check the <code>pg_hba.conf</code> file you just edited for typos.</p> <pre><code># systemctl restart postgresql-16\n</code></pre> <p>For our Zabbix server we need to create tables in the database for this we need ot install the Zabbix repository like we did for our Zabbix server and install the Zabbix package containing all the database tables images icons, ....</p>"},{"location":"installation/installing-zabbix-ha/#add-the-zabbix-repository-and-populate-the-db","title":"Add the Zabbix repository and populate the DB","text":"<p>Add the Zabbix repo to your server (Don't forget to select the correct repo for your OS and Zabbix version) for this go to www.zabbix.com/download</p> <pre><code># rpm -Uvh https://repo.zabbix.com/zabbix/7.0/rhel/9/x86_64/zabbix-release-6.5-2.el9.noarch.rpm\n</code></pre>"},{"location":"installation/installing-zabbix-ha/#install-the-database-scripts","title":"Install the database scripts.","text":"<pre><code># dnf install zabbix-sql-scripts -y\n</code></pre> <p>Next we have to unzip the database schema files. Run as user root followin command::</p> <pre><code># gzip -d /usr/share/zabbix-sql-scripts/postgresql/server.sql.gz\n</code></pre>"},{"location":"installation/installing-zabbix-ha/#create-the-db-users","title":"Create the DB users","text":"<p>Now we are ready to create our Zabbix users for the server and the frontend. If you like to separate users for frontend and server have a look at the basic installation guide.</p> <pre><code># su - postgres\n# createuser --pwprompt zabbix\nEnter password for new role: &lt;server-password&gt;\nEnter it again: &lt;server-password&gt;\n</code></pre>"},{"location":"installation/installing-zabbix-ha/#populate-the-database","title":"Populate the database.","text":"<p>We are now ready to create our database zabbix. Become user postgres again and run next command to create the database as our user zabbix:</p> <pre><code># su - postgres\n# createdb -E Unicode -O zabbix  zabbix\n</code></pre> <p>Let's upload the Zabbix SQL file we extracted earlier to populate our database with the needed schemas images users etc ... For this we need to connect to the DB as user zabbix.</p> <pre><code># psql -U zabbix -W zabbix\nPassword:\npsql (16.2)\nType \"help\" for help.\n\nzabbix=&gt; SELECT session_user, current_user;\n session_user | current_user\n--------------+--------------\n zabbix       | zabbix\n(1 row)\n\nzabbix=&gt; \\i /usr/share/zabbix-sql-scripts/postgresql/server.sql\nCREATE TABLE\nCREATE INDEX\nCREATE TABLE\n....\n....\nINSERT 0 1\nDELETE 80424\nCOMMIT\n</code></pre> <p>Make sure the owner of your tables is the user zabbix;</p> <pre><code>zabbix=&gt; \\dt\n                  List of relations\n Schema |            Name            | Type  | Owner\n--------+----------------------------+-------+--------\n public | acknowledges               | table | zabbix\n public | actions                    | table | zabbix\n...\n...\n...\n\nzabbix=&gt; \\q\n\n</code></pre>"},{"location":"installation/installing-zabbix-ha/#configure-the-firewall","title":"Configure the firewall\u00b6","text":"<p>One last thing we need to do is open the firewall and allow incoming connections for the PostgreSQL database from our Zabbix server because at the moment we dont accept any connections yet.</p> <pre><code># firewall-cmd --new-zone=postgresql-access --permanent\nsuccess\n\n# firewall-cmd --reload\nsuccess\n\n# firewall-cmd --get-zones\nblock dmz drop external home internal nm-shared postgresql-access public trusted work\n\n# firewall-cmd --zone=postgresql-access --add-source=&lt;zabbix-serverip 1&gt; --permanent\n# firewall-cmd --zone=postgresql-access --add-source=&lt;zabbix-serverip 1&gt; --permanent\n\nsuccess\n# firewall-cmd --zone=postgresql-access --add-port=5432/tcp  --permanent\n\nsuccess\n# firewall-cmd --reload\n</code></pre> <p>Now lets have a look to our firewall rules to see if they are what we expected:</p> <pre><code># firewall-cmd --zone=postgresql-access --list-all\n</code></pre> <p>Our database server is ready now to accept connections from our Zabbix server :). You can continue with the next task</p>"},{"location":"installation/installing-zabbix-ha/#install-our-zabbix-cluster","title":"Install our Zabbix Cluster","text":"<p>Setting up a Zabbix cluster is not really different from setting up a regular Zabbix server obviously we need more then one. And there are also a few parameters that we need to configure.</p> <p>Let's start by adding our Zabbix 7.0 repositories to our 2 Zabbix servers.</p> <pre><code>rpm -Uvh https://repo.zabbix.com/zabbix/7.0/rhel/9/x86_64/zabbix-release-6.5-2.el9.noarch.rpm\n</code></pre> <p>Once this is done we can install our Zabbix servers on both systems.</p> <pre><code>dnf install zabbix-server-pgsql -y\n</code></pre> <p>We will now edit the config file on our first zabbix server. Run the next command:</p> <pre><code>vi /etc/zabbix/zabbix_server.conf\n</code></pre> <p>Once in the file edit the following lines to make our Zabbix server 1 connnect to the database</p> <pre><code>DBHost=&lt;zabbix db ip&gt;\nDBName=zabbix\nDBUser=zabbix\nDBPassword=&lt;your secret password&gt;\n</code></pre> <p>In the same file we also have to edit another parameter to activate HA on this host.</p> <pre><code>HANodeName=zabbix1 (or whatever you like)\n</code></pre> <p>We are not done yet. We also have to tell Zabbix in case of a node fail to what server the frontend needs to connect.</p> <pre><code>NodeAddress=&lt;Zabbix server 1 ip&gt;&gt;:10051\n</code></pre> <p>We are now done with the configuration of our 1<sup>st</sup> Zabbix server. Now let's do the same for our second server. I case you have more then 2 servers you can update them as well.</p> <p>When you are done patching the config of your servers you can start the <code>zabbix-server</code> service on both servers</p> <pre><code>systemctl enable zabbix-server --now\n</code></pre> <p>Let's have a look at the log files from both servers to see if it came online as we had hoped. on our first server we can run:</p> <pre><code>#grep HA /var/log/zabbix/zabbix_server.log\n\n22597:20240309:155230.353 starting HA manager\n22597:20240309:155230.362 HA manager started in active mode\n</code></pre> <p>Now do the same on our other node(s)</p> <pre><code># grep HA /var/log/zabbix/zabbix_server.log\n22304:20240309:155331.163 starting HA manager\n22304:20240309:155331.174 HA manager started in standby mode\n</code></pre>"},{"location":"installation/installing-zabbix-ha/#installing-the-frontends","title":"Installing the frontends","text":"<p>First things first before we can install and configure our webserver we need to install keepalived.  Keepalived allows us to use a VIP for our frontends. Keepalived provides frameworks for both load balancing and high availability.</p> Info <p>Some useful documentation on the subject you might like. https://www.redhat.com/sysadmin/advanced-keepalived and https://keepalived.readthedocs.io/en/latest/introduction.html</p>"},{"location":"installation/installing-zabbix-ha/#setup-keepalived","title":"Setup keepalived","text":"<p>So let's get started. On both our servers we have to install keepalived.</p> <pre><code>dnf install keepalived\n</code></pre> <p>We also need to adapt the configuration of keepalived on both servers. The configuration for both servers needs to be a bit changed so let's start with our server 1. Edit the config file with the following command:</p> <pre><code># vi /etc/keepalived/keepalived.conf\n</code></pre> <p>Delete everything and replace it with the following lines:</p> <pre><code>vrrp_track_process track_nginx {\n    process nginx\n    weight 10\n}\n\nvrrp_instance VI_1 {\n    state MASTER\n    interface enp0s1\n    virtual_router_id 51\n    priority 244\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 12345\n    }\n    virtual_ipaddress {\n        192.168.0.135\n    }\n    track_process {\n         track_nginx\n      }\n}\n</code></pre> <p>Replace <code>enp0s1</code> with the interface name of your machine and replace the password with something secure. For the virual_ipaddress use aa free IP from your network. Now do the same thing for our second Zabbix server.</p> <pre><code># vi /etc/keepalived/keepalived.conf\n</code></pre> <p>Delete everything and replace it with the following lines:</p> <pre><code>vrrp_track_process track_nginx {\n      process nginx\n      weight 10\n}\n\nvrrp_instance VI_1 {\n    state BACKUP\n    interface enp0s1\n    virtual_router_id 51\n    priority 243\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 12345\n    }\n    virtual_ipaddress {\n        192.168.0.135\n    }\n    track_process {\n         track_nginx\n      }\n}\n</code></pre> <p>Just as with our 1<sup>st</sup> Zabbix server, replace <code>enp0s1</code> with the interface name of your machine and replace the password with something secure. For the virual_ipaddress use aa free IP from your network.</p>"},{"location":"installation/installing-zabbix-ha/#install-and-configure-the-frontend","title":"Install and configure the frontend","text":"<p>On both servers we can run the following commands to install our webserver and the zabbix frontend packages:</p> <pre><code>dnf install nginx zabbix-web-pgsql zabbix-nginx-conf\n</code></pre> <p>Also let's not forget to configure our firewall</p> <pre><code>firewall-cmd --add-service=http --permanent\nfirewall-cmd --add-service=zabbix-server --permanent\nfirewall-cmd --reload\n</code></pre> <p>And now we can start our keepalived and enable it so that it comes up next reboot</p> <pre><code>systemctl enable keepalived nginx --now\n</code></pre>"},{"location":"installation/installing-zabbix-ha/#configure-zabbix-frontend","title":"Configure Zabbix Frontend","text":"<p>Click next till you see the following page and fill in the ip of your DB server. The port can be 0 this means we will use the default port. fill in the database name, user and password you used for the database. Make sure you deselect TLS encryption and select store passwords as plaintext. When you click next it won't work because we did not disable SELinux. Run the following command first on both Zabbix servers.</p> <pre><code>setsebool -P httpd_can_network_connect_db on\nsetsebool -P httpd_can_connect_zabbix on\n</code></pre> <p>This will allow your webservers to communicate with our database over the network. Now when we click next it should work.</p> <p></p> <p>We are almost ready the only thing left here is now to add the name of our server and configure the default timezone.</p> <p></p> <p>Since you\u2019re using a host-based firewall, you need to add the necessary rules to permit IP protocol 112 traffic. Otherwise, Keepalived\u2019s advertisement method won\u2019t work.</p> <pre><code>firewall-cmd --add-rich-rule='rule protocol value=\"112\" accept' --permanent\n</code></pre> <p>Now that this is all taken care of stop keepalived on our server and repeat the same steps on the second server. After this is finished start keepalived again.</p> <p>Congratulations you have a HA Zabbix server now .</p>"},{"location":"installation/installing-zabbix-ha/#checking-the-database-for-ha-info","title":"Checking the Database for HA info.","text":"<p>Now that everything is up and running there is probably something you like to know.  Where can we find the info in our database ?</p> <p>It's actually very straighforward we can go to our zabbix database and run the following query to see our servers: <code>SELECT *FROM ha_node;</code></p> <pre><code>zabbix=# SELECT *FROM ha_node;\n         ha_nodeid         |  name   |    address    | port  | lastaccess | status |       ha_sessionid\n---------------------------+---------+---------------+-------+------------+--------+---------------------------\n cltk7h2n600017kkd1jtx6f1f | zabbix2 | 192.168.0.131 | 10051 | 1710085786 |      0 | cltlov4ly0000jkkdteikeo77\n cltk7ci340001inkc2befwg9f | zabbix1 | 192.168.0.130 | 10051 | 1710085787 |      3 | cltlov1r00000jtkcpeh9oqhp\n</code></pre> <p>This is also how our frontend is able to know what server it needs to connect to. Remember our picture in the first page ? Actually the frontend has a connection to our database and reads out the status from our <code>zabbix server</code>. This way it knows what server is active.</p> <p>It's probably also good to know that we can have 4 statusses:</p> status number info Active 3 Only one node can be active Standby 0 Multiple nodes can be in standby Stopped 1 A previous detected node is nog stopped Unavailable 2 A previous dtected node was lost without being shutdown Note <p>Zabbix agents need to have their Server and ServerActive addresses pointed to both active and passive Zabbix server.  This option is supported in all agents since Zabbix 6.0</p>"},{"location":"installation/installing-zabbix/","title":"Installing Zabbix","text":"<p>Before we can install Zabbix we first have to know how the design is. The Zabbix server has been build op modular based on 3 components.</p> <ul> <li>The Zabbix server</li> <li>The Zabbix web server</li> <li>The Zabbix database</li> </ul> <p></p> <p>All these components can be installed on 1 server or can be split over 3 different servers. The Zabbix server itself is the brain this part is doing all the trigger calculations and sending all the alert. The database is where the Zabbix server stores its config and all the data that we have gathered. The web server provides us with a front-end. Note that Zabbix has a API and that this is also located on the front-end and not on the Zabbix server side.</p> <p>All these parts have to work together so as you can see in our image above. The Zabbix server needs to read the config and store the data in our database and the Zabbix front-end needs to be able to write the configuration in the database as well. The Zabbix front-end also needs to check the online status of our Zabbix server and needs to read some other information as well.</p> <p>For our setup, we will use 2 VM's, 1 VM with a Zabbix server and our Zabbix web server and another VM with our Zabbix database.</p>"},{"location":"installation/installing-zabbix/#installing-the-zabbix-server","title":"Installing the Zabbix Server","text":"<p>Before you start to install your Zabbix server make sure the server is properly configure as we explained in our topic Basic OS configuration before we start. Something else that is important in this case is that we need to disable SELinux. We will see later in chapter Securing Zabbix how to do this properly.  We can check the status of SELinux with the command <code>sestatus</code> :</p> <pre><code># sestatus\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   enforcing\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre> <p>As you can see we are now in enforcing mode. To disable SELinux just run <code>setenforce 0</code> to disable it. </p> <pre><code># setenforce 0\n# sestatus\n\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   permissive\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre> <p>As you can see our current mode is now permissive.  However this is not persistent so we also need to alter our SELinux configuration file. This can be done by altering the file <code>/etc/config/selinux</code> and replacing enforcing by permissive. A more easy way is to run the following command :</p> <pre><code>sed -i 's/SELINUX=enforcing/SELINUX=permissive/g' /etc/selinux/config\n</code></pre> <p>This line will alter the config file for you. So when we run <code>sestatus</code> again we will see that we are in <code>permissive</code> mode and that our config file is also in <code>permissive</code> mode. </p> <p>We can verify this with our cat commando.</p> <pre><code># cat /etc/selinux/config\n\n# This file controls the state of SELinux on the system.\n# SELINUX= can take one of these three values:\n#     enforcing - SELinux security policy is enforced.\n#     permissive - SELinux prints warnings instead of enforcing.\n#     disabled - No SELinux policy is loaded.\n# See also:\n# https://docs.fedoraproject.org/en-US/quick-docs/getting-started-with-selinux/#getting-started-with-selinux-selinux-states-and-modes\n#\n# NOTE: In earlier Fedora kernel builds, SELINUX=disabled would also\n# fully disable SELinux during boot. If you need a system with SELinux\n# fully disabled instead of SELinux running with no policy loaded, you\n# need to pass selinux=0 to the kernel command line. You can use grubby\n# to persistently set the bootloader to boot with selinux=0:\n#\n#    grubby --update-kernel ALL --args selinux=0\n#\n# To revert back to SELinux enabled:\n#\n#    grubby --update-kernel ALL --remove-args selinux\n#\nSELINUX=permissive\n# SELINUXTYPE= can take one of these three values:\n#     targeted - Targeted processes are protected,\n#     minimum - Modification of targeted policy. Only selected processes are protected.\n#     mls - Multi Level Security protection.\nSELINUXTYPE=targeted\n</code></pre> <p>And we can also verify it with our commando <code>setstatus</code> </p> <pre><code># sestatus\n\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   permissive\nMode from config file:          permissive\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre>"},{"location":"installation/installing-zabbix/#adding-the-zabbix-repository","title":"Adding the Zabbix repository","text":"<p>From the Zabbix Download page select the correct Zabbix version you would like to install. In our case it will be 7.0 LTS. Select the correct OS distribution as well. This will be Rocky Linux 9 in our case. We are going to install the Server and will be using NGINX.</p> <p></p> <p>Our first step is to disable Zabbix packages provided by EPEL, if you have it installed. Edit file /etc/yum.repos.d/epel.repo and add the following statement.</p> <pre><code>[epel]\n...\nexcludepkgs=zabbix*\n</code></pre> Tip <p>Having the EPEL repository enabled is a bad practice and could be dangerous if you use EPEL it's best to disable the repo and use dnf install  --enablerepo=epel. This way you will never overwrite or install unwanted packages by accident. <p>Our next task is to install the Zabbix repository on our OS and do a dnf cleanup so that old cache files from our repository metadata is cleaned up.</p> <pre><code>rpm -Uvh https://repo.zabbix.com/zabbix/7.0/rhel/9/x86_64/zabbix-release-6.5-2.el9.noarch.rpm\ndnf clean all\n</code></pre> Note <p>A repository is a config in Linux that you can add to make packages available for you OS to install. The best way to look at it is maybe to think of it like an APP store that you add where you can find the software of your vendor. In this case the repository form Zabbix. There are many repositories you can add but you should be sure that they can be trusted. So it's always a good idea to stick to the repositories of your OS and only add extra repositories when you are sure they are to be trusted and needed. In our case the repository is from our vendor Zabbix so it should be safe to add. Epel is another popular repository for RedHat systems that is considered to be safe.</p>"},{"location":"installation/installing-zabbix/#installing-the-zabbix-server-for-mysqlmariadb","title":"Installing the Zabbix server for MySQL/MariaDB","text":"<p>Now that we have our repository with software added to our system we are ready to install our Zabbix server and webserver. Remember the webserver could be installed on another system. There is no need to install both on the same server.</p> <p><code>dnf install zabbix-server-mysql zabbix-web-mysql</code></p> <p>Now that we have installed our packages for the Zabbix server and our frontend we still need to change the configuration of our Zabbix server so that we can connect to our database. Open the file <code>/etc/zabbix/zabbix_server.conf</code> and replace the following lines:</p> <pre><code>DBHost=&lt;ip or dns of your MariaDB server&gt;\nDBName=&lt;the name of your database&gt;\nDBUser=&lt;the user that will connect to the database&gt;\nDBPassword=&lt;your super secret password&gt;\n</code></pre> <p>Make sure you don't have a '#' in front of the config parameter else Zabbix will see this as text and not as a parameter. Also make sure that there are not extra duplicate lines Zabbix will always take the last config parameter if there is more then 1 line with the same parameter</p> <p>In our case the config will look like this:</p> <pre><code># vi /etc/zabbix/zabbix_server.conf\n\nDBHost=&lt;ip or dns of your MariaDB server&gt;\nDBName=zabbix\nDBUser=zabbix-srv\nDBPassword=&lt;your super secret password&gt;\nDBPort=3306\n</code></pre> Note <p>The Zabbix server configuration file has the option to include an extra config file with parameters you like to alter or add. In production it's probably better to not touch the configuration file but to add a new file and include the parameters you like to change. This way you never have to edit your original configuration file after an upgrade it will also make your life more easy when working with configuration tools like Ansible, Puppet, SaltStack, .... The only thing that needs to be done is remove the # in front of the line '# Include=/usr/local/etc/zabbix_server.conf.d/*.conf' and make sure the path exists with a customized config file of your won that is readable by the user zabbix.</p> <p>Ok now that we have changed the configuration of you Zabbix server so that it is able to connect to our DB we are  ready to start. Run the following command to enable the Zabbix server and make it active on boot next time.</p> <p><code>systemctl enable zabbix-server --now</code></p> <p>Our Zabbix server service will start and if everything goes well you should see in the Zabbix server log file the following output </p> <p><code>tail /var/log/zabbix/zabbix_server.log</code></p> <pre><code>  1123:20231120:110604.440 Starting Zabbix Server. Zabbix 7.0.0alpha7 (revision 60de6a81aca).\n  1123:20231120:110604.440 ****** Enabled features ******\n  1123:20231120:110604.440 SNMP monitoring:           YES\n  1123:20231120:110604.440 IPMI monitoring:           YES\n  1123:20231120:110604.440 Web monitoring:            YES\n  1123:20231120:110604.440 VMware monitoring:         YES\n  1123:20231120:110604.440 SMTP authentication:       YES\n  1123:20231120:110604.440 ODBC:                      YES\n  1123:20231120:110604.440 SSH support:               YES\n  1123:20231120:110604.440 IPv6 support:              YES\n  1123:20231120:110604.440 TLS support:               YES\n  1123:20231120:110604.440 ******************************\n  1123:20231120:110604.440 using configuration file: /etc/zabbix/zabbix_server.conf\n  1123:20231120:110604.470 current database version (mandatory/optional): 06050143/06050143\n  1123:20231120:110604.470 required mandatory version: 06050143\n  1124:20231120:110604.490 starting HA manager\n  1124:20231120:110604.507 HA manager started in active mode\n  1123:20231120:110604.508 server #0 started [main process]\n  1126:20231120:110604.509 server #2 started [configuration syncer #1]\n  1125:20231120:110604.510 server #1 started [service manager #1]\n  1133:20231120:110604.841 server #9 started [lld worker #1]\n  1132:20231120:110604.841 server #8 started [lld manager #1]\n  1134:20231120:110604.841 server #10 started [lld worker #2]\n</code></pre> <p>If there was an error and the server was not able to connect to the database you would see something like this in the server log file :</p> <pre><code> 10773:20231118:213248.570 Starting Zabbix Server. Zabbix 7.0.0alpha7 (revision 60de6a81aca).\n 10773:20231118:213248.570 ****** Enabled features ******\n 10773:20231118:213248.570 SNMP monitoring:           YES\n 10773:20231118:213248.570 IPMI monitoring:           YES\n 10773:20231118:213248.570 Web monitoring:            YES\n 10773:20231118:213248.570 VMware monitoring:         YES\n 10773:20231118:213248.570 SMTP authentication:       YES\n 10773:20231118:213248.570 ODBC:                      YES\n 10773:20231118:213248.570 SSH support:               YES\n 10773:20231118:213248.570 IPv6 support:              YES\n 10773:20231118:213248.570 TLS support:               YES\n 10773:20231118:213248.570 ******************************\n 10773:20231118:213248.570 using configuration file: /etc/zabbix/zabbix_server.conf\n 10773:20231118:213248.574 [Z3001] connection to database 'zabbix' failed: [2002] Can't connect to server on 'xxx.xxx.xxx.xxx' (115)\n 10773:20231118:213248.574 database is down: reconnecting in 10 seconds\n 10773:20231118:213258.579 [Z3001] connection to database 'zabbix' failed: [2002] Can't connect to server on 'xxx.xxx.xxx.xxx' (115)\n 10773:20231118:213258.579 database is down: reconnecting in 10 seconds\n</code></pre> <p>Let's check the Zabbix server service to see if it's enabled so that it survives a reboot </p> <pre><code># systemctl status zabbix-server\n\n\u25cf zabbix-server.service - Zabbix Server\n     Loaded: loaded (/usr/lib/systemd/system/zabbix-server.service; enabled; preset: disabled)\n     Active: active (running) since Mon 2023-11-20 11:06:04 CET; 1h 2min ago\n   Main PID: 1123 (zabbix_server)\n      Tasks: 59 (limit: 12344)\n     Memory: 52.6M\n        CPU: 20.399s\n     CGroup: /system.slice/zabbix-server.service\n             \u251c\u25001123 /usr/sbin/zabbix_server -c /etc/zabbix/zabbix_server.conf\n             \u251c\u25001124 \"/usr/sbin/zabbix_server: ha manager\"\n             \u251c\u25001125 \"/usr/sbin/zabbix_server: service manager #1 [processed 0 events, updated 0 event tags, deleted 0 problems, synced 0 service updates, idle 5.008686 sec during 5.016382 sec]\"\n             \u251c\u25001126 \"/usr/sbin/zabbix_server: configuration syncer [synced configuration in 0.092797 sec, idle 10 sec]\"\n             \u251c\u25001127 \"/usr/sbin/zabbix_server: alert manager #1 [sent 0, failed 0 alerts, idle 5.027620 sec during 5.027828 sec]\"\n             \u251c\u25001128 \"/usr/sbin/zabbix_server: alerter #1 started\"\n             \u251c\u25001129 \"/usr/sbin/zabbix_server: alerter #2 started\"\n             \u251c\u25001130 \"/usr/sbin/zabbix_server: alerter #3 started\"\n             \u251c\u25001131 \"/usr/sbin/zabbix_server: preprocessing manager #1 [queued 1, processed 2 values, idle 5.490312 sec during 5.490555 sec]\"\n             \u251c\u25001132 \"/usr/sbin/zabbix_server: lld manager #1 [processed 1 LLD rules, idle 5.028973sec during 5.029123 sec]\"\n             \u251c\u25001133 \"/usr/sbin/zabbix_server: lld worker #1 [processed 1 LLD rules, idle 60.060180 sec during 60.085009 sec]\"\n             \u251c\u25001134 \"/usr/sbin/zabbix_server: lld worker #2 [processed 1 LLD rules, idle 60.065526 sec during 60.095165 sec]\"\n             \u251c\u25001135 \"/usr/sbin/zabbix_server: housekeeper [deleted 0 hist/trends, 0 items/triggers, 0 events, 0 sessions, 0 alarms, 0 audit items, 0 autoreg_host, 0 records in 0.019108 sec, idle for 1 hour(s)]\"\n             \u251c\u25001136 \"/usr/sbin/zabbix_server: timer #1 [updated 0 hosts, suppressed 0 events in 0.002856 sec, idle 59 sec]\"\n             \u251c\u25001137 \"/usr/sbin/zabbix_server: http poller #1 [got 0 values in 0.000059 sec, idle 5 sec]\"\n             \u251c\u25001138 \"/usr/sbin/zabbix_server: discovery manager #1 [processing 0 rules, 0.000000% of queue used, 0 unsaved checks]\"\n             \u251c\u25001139 \"/usr/sbin/zabbix_server: history syncer #1 [processed 0 values, 0 triggers in 0.000036 sec, idle 1 sec]\"\n             \u251c\u25001140 \"/usr/sbin/zabbix_server: history syncer #2 [processed 1 values, 0 triggers in 0.005016 sec, idle 1 sec]\"\n             \u251c\u25001141 \"/usr/sbin/zabbix_server: history syncer #3 [processed 0 values, 0 triggers in 0.000031 sec, idle 1 sec]\"\n             \u251c\u25001142 \"/usr/sbin/zabbix_server: history syncer #4 [processed 0 values, 0 triggers in 0.000014 sec, idle 1 sec]\"\n             \u251c\u25001143 \"/usr/sbin/zabbix_server: escalator #1 [processed 0 escalations in 0.005587 sec, idle 3 sec]\"\n             \u251c\u25001144 \"/usr/sbin/zabbix_server: proxy poller #1 [exchanged data with 0 proxies in 0.000010 sec, idle 5 sec]\"\n             \u251c\u25001145 \"/usr/sbin/zabbix_server: self-monitoring [processed data in 0.000016 sec, idle 1 sec]\"\n             \u251c\u25001146 \"/usr/sbin/zabbix_server: task manager [processed 0 task(s) in 0.002511 sec, idle 5 sec]\"\n             \u251c\u25001147 \"/usr/sbin/zabbix_server: poller #1 [got 0 values in 0.000009 sec, idle 1 sec]\"\n             \u251c\u25001148 \"/usr/sbin/zabbix_server: poller #2 [got 1 values in 0.000232 sec, idle 1 sec]\"\n             \u251c\u25001149 \"/usr/sbin/zabbix_server: poller #3 [got 0 values in 0.000015 sec, idle 1 sec]\"\n             \u251c\u25001150 \"/usr/sbin/zabbix_server: poller #4 [got 0 values in 0.000010 sec, idle 1 sec]\"\n</code></pre> <p>This concludes our chapter on installing and configuring our Zabbix server.  Next we have to configure our frontend. You can have a look at Installing Zabbix frontend with Nginx or Installing Zabbix frontend with Apache</p>"},{"location":"installation/installing-zabbix/#installing-the-zabbix-server-for-postgresql","title":"Installing the Zabbix server for PostgreSQL","text":"<p>Now that we have our repository with software added to our system we are ready to install our Zabbix server and webserver. Remember the webserver could be installed on another system. There is no need to install both on the same server.</p> <p><code>dnf install zabbix-server-pgsql zabbix-web-pgsql</code></p> <p>Now that we have installed our packages for the Zabbix server and our frontend we still need to change the configuration of our Zabbix server so that we can connect to our database. Open the file <code>/etc/zabbix/zabbix_server.conf</code> and replace the following lines:</p> <pre><code>DBHost=&lt;ip or dns of your PostgreSQL server&gt;\nDBName=&lt;the name of your database&gt;\nDBSchema=&lt;our PostgreSQL schema name&gt;\nDBUser=&lt;the user that will connect to the database&gt;\nDBPassword=&lt;your super secret password&gt;\n</code></pre> <p>Make sure you don't have a '#' in front of the config parameter else Zabbix will see this as text and not as a parameter. Also make sure that there are not extra duplicate lines Zabbix will always take the last config parameter if there is more then 1 line with the same parameter</p> <p>In our case the config will look like this:</p> <pre><code># vi /etc/zabbix/zabbix_server.conf\n\nDBHost=&lt;ip or dns of your MariaDB server&gt;\nDBName=zabbix\nDBSchema=zabbix_server\nDBUser=zabbix-srv\nDBPassword=&lt;your super secret password&gt;\nDBPort=5432\n</code></pre> Note <p>The Zabbix server configuration file has the option to include an extra config file with parameters you like to alter or add. In production it's probably better to not touch the configuration file but to add a new file and include the parameters you like to change. This way you never have to edit your original configuration file after an upgrade it will also make your life more easy when working with configuration tools like Ansible, Puppet, SaltStack, .... The only thing that needs to be done is remove the # in front of the line '# Include=/usr/local/etc/zabbix_server.conf.d/*.conf' and make sure the path exists with a customized config file of your won that is readable by the user zabbix.</p> <p>Ok now that we have changed the configuration of you Zabbix server so that it is able to connect to our DB we are  ready to start. Run the following command to enable the Zabbix server and make it active on boot next time.</p> <p><code>systemctl enable zabbix-server --now</code></p> <p>Our Zabbix server service will start and if everything goes well you should see in the Zabbix server log file the following output</p> <p><code>tail /var/log/zabbix/zabbix_server.log</code></p> <pre><code>  1123:20231120:110604.440 Starting Zabbix Server. Zabbix 7.0.0alpha7 (revision 60de6a81aca).\n  1123:20231120:110604.440 ****** Enabled features ******\n  1123:20231120:110604.440 SNMP monitoring:           YES\n  1123:20231120:110604.440 IPMI monitoring:           YES\n  1123:20231120:110604.440 Web monitoring:            YES\n  1123:20231120:110604.440 VMware monitoring:         YES\n  1123:20231120:110604.440 SMTP authentication:       YES\n  1123:20231120:110604.440 ODBC:                      YES\n  1123:20231120:110604.440 SSH support:               YES\n  1123:20231120:110604.440 IPv6 support:              YES\n  1123:20231120:110604.440 TLS support:               YES\n  1123:20231120:110604.440 ******************************\n  1123:20231120:110604.440 using configuration file: /etc/zabbix/zabbix_server.conf\n  1123:20231120:110604.470 current database version (mandatory/optional): 06050143/06050143\n  1123:20231120:110604.470 required mandatory version: 06050143\n  1124:20231120:110604.490 starting HA manager\n  1124:20231120:110604.507 HA manager started in active mode\n  1123:20231120:110604.508 server #0 started [main process]\n  1126:20231120:110604.509 server #2 started [configuration syncer #1]\n  1125:20231120:110604.510 server #1 started [service manager #1]\n  1133:20231120:110604.841 server #9 started [lld worker #1]\n  1132:20231120:110604.841 server #8 started [lld manager #1]\n  1134:20231120:110604.841 server #10 started [lld worker #2]\n</code></pre> <p>If there was an error and the server was not able to connect to the database you would see something like this in the server log file :</p> <pre><code> 10773:20231118:213248.570 Starting Zabbix Server. Zabbix 7.0.0alpha7 (revision 60de6a81aca).\n 10773:20231118:213248.570 ****** Enabled features ******\n 10773:20231118:213248.570 SNMP monitoring:           YES\n 10773:20231118:213248.570 IPMI monitoring:           YES\n 10773:20231118:213248.570 Web monitoring:            YES\n 10773:20231118:213248.570 VMware monitoring:         YES\n 10773:20231118:213248.570 SMTP authentication:       YES\n 10773:20231118:213248.570 ODBC:                      YES\n 10773:20231118:213248.570 SSH support:               YES\n 10773:20231118:213248.570 IPv6 support:              YES\n 10773:20231118:213248.570 TLS support:               YES\n 10773:20231118:213248.570 ******************************\n 10773:20231118:213248.570 using configuration file: /etc/zabbix/zabbix_server.conf\n 10773:20231118:213248.574 [Z3001] connection to database 'zabbix' failed: [2002] Can't connect to server on 'xxx.xxx.xxx.xxx' (115)\n 10773:20231118:213248.574 database is down: reconnecting in 10 seconds\n 10773:20231118:213258.579 [Z3001] connection to database 'zabbix' failed: [2002] Can't connect to server on 'xxx.xxx.xxx.xxx' (115)\n 10773:20231118:213258.579 database is down: reconnecting in 10 seconds\n</code></pre> <p>Let's check the Zabbix server service to see if it's enabled so that it survives a reboot</p> <pre><code># systemctl status zabbix-server\n</code></pre> <pre><code>\u25cf zabbix-server.service - Zabbix Server\n     Loaded: loaded (/usr/lib/systemd/system/zabbix-server.service; enabled; preset: disabled)\n     Active: active (running) since Mon 2023-11-20 11:06:04 CET; 1h 2min ago\n   Main PID: 1123 (zabbix_server)\n      Tasks: 59 (limit: 12344)\n     Memory: 52.6M\n        CPU: 20.399s\n     CGroup: /system.slice/zabbix-server.service\n             \u251c\u25001123 /usr/sbin/zabbix_server -c /etc/zabbix/zabbix_server.conf\n             \u251c\u25001124 \"/usr/sbin/zabbix_server: ha manager\"\n             \u251c\u25001125 \"/usr/sbin/zabbix_server: service manager #1 [processed 0 events, updated 0 event tags, deleted 0 problems, synced 0 service updates, idle 5.008686 sec during 5.016382 sec]\"\n             \u251c\u25001126 \"/usr/sbin/zabbix_server: configuration syncer [synced configuration in 0.092797 sec, idle 10 sec]\"\n             \u251c\u25001127 \"/usr/sbin/zabbix_server: alert manager #1 [sent 0, failed 0 alerts, idle 5.027620 sec during 5.027828 sec]\"\n             \u251c\u25001128 \"/usr/sbin/zabbix_server: alerter #1 started\"\n             \u251c\u25001129 \"/usr/sbin/zabbix_server: alerter #2 started\"\n             \u251c\u25001130 \"/usr/sbin/zabbix_server: alerter #3 started\"\n             \u251c\u25001131 \"/usr/sbin/zabbix_server: preprocessing manager #1 [queued 1, processed 2 values, idle 5.490312 sec during 5.490555 sec]\"\n             \u251c\u25001132 \"/usr/sbin/zabbix_server: lld manager #1 [processed 1 LLD rules, idle 5.028973sec during 5.029123 sec]\"\n             \u251c\u25001133 \"/usr/sbin/zabbix_server: lld worker #1 [processed 1 LLD rules, idle 60.060180 sec during 60.085009 sec]\"\n             \u251c\u25001134 \"/usr/sbin/zabbix_server: lld worker #2 [processed 1 LLD rules, idle 60.065526 sec during 60.095165 sec]\"\n             \u251c\u25001135 \"/usr/sbin/zabbix_server: housekeeper [deleted 0 hist/trends, 0 items/triggers, 0 events, 0 sessions, 0 alarms, 0 audit items, 0 autoreg_host, 0 records in 0.019108 sec, idle for 1 hour(s)]\"\n             \u251c\u25001136 \"/usr/sbin/zabbix_server: timer #1 [updated 0 hosts, suppressed 0 events in 0.002856 sec, idle 59 sec]\"\n             \u251c\u25001137 \"/usr/sbin/zabbix_server: http poller #1 [got 0 values in 0.000059 sec, idle 5 sec]\"\n             \u251c\u25001138 \"/usr/sbin/zabbix_server: discovery manager #1 [processing 0 rules, 0.000000% of queue used, 0 unsaved checks]\"\n             \u251c\u25001139 \"/usr/sbin/zabbix_server: history syncer #1 [processed 0 values, 0 triggers in 0.000036 sec, idle 1 sec]\"\n             \u251c\u25001140 \"/usr/sbin/zabbix_server: history syncer #2 [processed 1 values, 0 triggers in 0.005016 sec, idle 1 sec]\"\n             \u251c\u25001141 \"/usr/sbin/zabbix_server: history syncer #3 [processed 0 values, 0 triggers in 0.000031 sec, idle 1 sec]\"\n             \u251c\u25001142 \"/usr/sbin/zabbix_server: history syncer #4 [processed 0 values, 0 triggers in 0.000014 sec, idle 1 sec]\"\n             \u251c\u25001143 \"/usr/sbin/zabbix_server: escalator #1 [processed 0 escalations in 0.005587 sec, idle 3 sec]\"\n             \u251c\u25001144 \"/usr/sbin/zabbix_server: proxy poller #1 [exchanged data with 0 proxies in 0.000010 sec, idle 5 sec]\"\n             \u251c\u25001145 \"/usr/sbin/zabbix_server: self-monitoring [processed data in 0.000016 sec, idle 1 sec]\"\n             \u251c\u25001146 \"/usr/sbin/zabbix_server: task manager [processed 0 task(s) in 0.002511 sec, idle 5 sec]\"\n             \u251c\u25001147 \"/usr/sbin/zabbix_server: poller #1 [got 0 values in 0.000009 sec, idle 1 sec]\"\n             \u251c\u25001148 \"/usr/sbin/zabbix_server: poller #2 [got 1 values in 0.000232 sec, idle 1 sec]\"\n             \u251c\u25001149 \"/usr/sbin/zabbix_server: poller #3 [got 0 values in 0.000015 sec, idle 1 sec]\"\n             \u251c\u25001150 \"/usr/sbin/zabbix_server: poller #4 [got 0 values in 0.000010 sec, idle 1 sec]\"\n</code></pre> <p>This concludes our chapter on installing and configuring our Zabbix server. Next we have to configure our frontend. You can have a look at Installing Zabbix frontend with Nginx or Installing Zabbix frontend with Apache</p>"},{"location":"installation/installing-zabbix/#installing-zabbix-frontend-with-nginx","title":"Installing Zabbix frontend with Nginx","text":"<p>Before we can configure our frontend we need to install our package first. If you run the frontend on the same server as the Zabbix server then there is nothing else you have to do you can just run the following command on your server to install the packages needed for our frontend to install:</p> <pre><code>dnf install zabbix-nginx-conf and zabbix-web-mysql or if you used Postgres dnf install zabbix-web-pgsql\n</code></pre> <p>In case the frontend is on another server installed you need to add the Zabbix repository first like we did on our Zabbix server. In case you forgot or just skipped to this topic and don't know how to do this have a look at Adding the Zabbix repository</p> <p>First thing we have to do is alter the Nginx configuration file so that we don't  use the standard config.</p> <pre><code>vi /etc/nginx/nginx.conf\n</code></pre> <p>In this config look for the followin block that starts with :</p> <pre><code>    server {\n        listen       80;\n        listen       [::]:80;\n        server_name  _;\n        root         /usr/share/nginx/html;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n</code></pre> <p>And place the following lines in comment:</p> <pre><code>    server {\n#        listen       80;\n#        listen       [::]:80;\n#        server_name  _;\n#        root         /usr/share/nginx/html;\n</code></pre> <p>We now have to alter the Zabbix configuration file so that it matches our setup. Edit the following file:</p> <pre><code>vi /etc/nginx/conf.d/zabbix.conf\n</code></pre> <pre><code>server {\n        listen          8080;\n        server_name     example.com;\n\n        root    /usr/share/zabbix;\n\n        index   index.php;\n</code></pre> <p>Replace the first 2 lines with the correct port and domain for your frontend in case you don't have a domain you can replace server_name with _; like in the exaple below:</p> <pre><code>server {\n#        listen          8080;\n#        server_name     example.com;\n        listen          80;\n        server_name     _;\n\n        root    /usr/share/zabbix;\n\n        index   index.php;\n</code></pre> <p>We are now ready to start our websever and enable it so that it comes online after a reboot.</p> <pre><code>systemctl enable php-fpm --now\nsystemctl enable nginx --now\n</code></pre> <p>Let's verify if the service is properly started and enabled so that it survives our reboot next time.</p> <pre><code># systemctl status nginx\n\n\u25cf nginx.service - The nginx HTTP and reverse proxy server\n     Loaded: loaded (/usr/lib/systemd/system/nginx.service; enabled; preset: disabled)\n    Drop-In: /usr/lib/systemd/system/nginx.service.d\n             \u2514\u2500php-fpm.conf\n     Active: active (running) since Mon 2023-11-20 11:42:18 CET; 30min ago\n   Main PID: 1206 (nginx)\n      Tasks: 2 (limit: 12344)\n     Memory: 4.8M\n        CPU: 38ms\n     CGroup: /system.slice/nginx.service\n             \u251c\u25001206 \"nginx: master process /usr/sbin/nginx\"\n             \u2514\u25001207 \"nginx: worker process\"\n\nNov 20 11:42:18 zabbix-srv systemd[1]: Starting The nginx HTTP and reverse proxy server...\nNov 20 11:42:18 zabbix-srv nginx[1204]: nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nNov 20 11:42:18 zabbix-srv nginx[1204]: nginx: configuration file /etc/nginx/nginx.conf test is successful\nNov 20 11:42:18 zabbix-srv systemd[1]: Started The nginx HTTP and reverse proxy server.\n</code></pre> <p>The service is running and enabled so there is only 1 thing left to do before we can start the configuration in the GUI and that is to configure our firewall to allow incoming communication to the webserver.</p> <pre><code>firewall-cmd --add-service=http --permanent\nfirewall-cmd --reload\n</code></pre> <p>Open your browser and go to the url or ip of your frontend :</p> <pre><code>http://&lt;ip or dns of the zabbix frontend server&gt;/\n</code></pre> <p>If all goes well you should be greeted with a Zabbix welcome page. In case you have an error check the configuration again or have a look at the nginx log file : </p> <p><code>/var/log/nginx/error.log</code></p> <p>or run </p> <p><code>journalctl -xe</code> </p> <p>This should help you in locating the errors you made.</p> <p>When you point your browser to the correct URL you should be greeted with a page like here :</p> <p></p> <p>As you see there is only a limited list of local translations available on our Zabbix frontend to choose from </p> <p></p> <p>What if we want to install Chinese as language or another language from the list ? Run the next command to get a list of all locales available for your OS.</p> <p><code>dnf list glibc-langpack-*</code></p> <p>This will give you a list like </p> <pre><code>Installed Packages\nglibc-langpack-en.x86_64\nAvailable Packages\nglibc-langpack-aa.x86_64\n...\n\nglibc-langpack-zu.x86_64\n</code></pre> <p>Let's search for our Chinese locale to see if it is available. As you can see the code starts with zh</p> <pre><code># dnf list glibc-langpack-* | grep zh\nglibc-langpack-zh.x86_64\nglibc-langpack-lzh.x86_64\n</code></pre> <p>The command returns us 2 lines but as we have seen that the code was zh_CN we only have to install the first package.</p> <pre><code># dnf install glibc-langpack-zh.x86_64 -y\n</code></pre> <p>When we return now to our frontend we are able to select the Chinese language. </p> <p></p> Note <p>If your language is not available in the frontend don't panic it just means that there is no translation or that the translation was not 100% complete. Zabbis is free and relies on the community for it's translations so you can help in creating the translation. Go to the page <code>https://translate.zabbix.com/</code> and help us to make Zabbix get better. Once the translation is complete the next Zabbix minor patch version should have your language included.</p> <p>Click next when you are satisfied with the transaltions available. You will arrive at a screen to verifiy if all pre-requisites are met. If not fix them first but normaly it should be fine and you should be just able to click Next</p> <p></p> <p>The next page will show you a page with the connection parameters for our database.</p> <p>First you select your DB type 'MySQL' or 'PostgreSQL' and fill in the IP or DNS name of the location of your database server. Use port 3306 for MariaDB/MySQL or 5432 if you used PostgreSQL.</p> <p>Fill in the correct  database name, in our case it was <code>zabbix</code>. If you used PostgreSQL then you also need to fill in the correct schema name in our case it was <code>zabbix_server</code></p> <p>Next line will ask you for the DB users here we created a user <code>zabbix-web</code>. Enter it in the correct field and fill in the password that you used for this user.</p> <p>Make sure the option <code>Database TLS encryption</code> is not selected and press <code>Next step</code>.</p> <p></p> <p>We are almost there. The only thing that rests us to do is give our instance a name, select our timezone and select a default time we like to use.</p> <p></p> <p>Press <code>Next step</code> again you will see a page that tells you that the configuration is successful. Press Finish to end the configuration.</p> <p></p> <p>We are now ready to login :</p> <p></p> <p>Login : Admin Password : zabbix</p> <p>If you like to secure the frontend with SSL then checkout the following topic</p> <p>Securing Zabbix</p>"},{"location":"installation/installing-zabbix/#installing-zabbix-frontend-with-apache","title":"Installing Zabbix frontend with Apache","text":"<p>Before we can configure our frontend we need to install our package first. If you run the frontend on the same server as the Zabbix server then there is nothing else you have to do you can just run the following command on your server to install the packages needed for our frontend to install:</p> <pre><code>dnf install zabbix-apache-conf and zabbix-web-mysql or if you used Postgres dnf install zabbix-web-pgsql\n</code></pre> <p>In case the frontend is on another server installed you need to add the Zabbix repository first like we did on our Zabbix server. In case you forgot or just skipped to this topic and don't know how to do this have a look at Adding the Zabbix repository</p> <p>We are now ready to start our websever and enable it so that it comes online after a reboot.</p> <pre><code>systemctl enable php-fpm --now\nsystemctl enable httpd --now\n</code></pre> <p>Let's verify if the service is properly started and enabled so that it survives our reboot next time.</p> <pre><code># systemctl status httpd\n\n</code></pre> <pre><code>\u25cf httpd.service - The Apache HTTP Server\n     Loaded: loaded (/usr/lib/systemd/system/httpd.service; enabled; preset: disabled)\n    Drop-In: /usr/lib/systemd/system/httpd.service.d\n             \u2514\u2500php-fpm.conf\n     Active: active (running) since Mon 2024-03-04 08:50:17 CET; 7min ago\n       Docs: man:httpd.service(8)\n   Main PID: 690 (httpd)\n     Status: \"Total requests: 96; Idle/Busy workers 100/0;Requests/sec: 0.213; Bytes served/sec: 560 B/sec\"\n      Tasks: 278 (limit: 22719)\n     Memory: 39.6M\n        CPU: 1.132s\n     CGroup: /system.slice/httpd.service\n             \u251c\u2500 690 /usr/sbin/httpd -DFOREGROUND\n             \u251c\u2500 736 /usr/sbin/httpd -DFOREGROUND\n             \u251c\u2500 737 /usr/sbin/httpd -DFOREGROUND\n             \u251c\u2500 738 /usr/sbin/httpd -DFOREGROUND\n             \u251c\u2500 739 /usr/sbin/httpd -DFOREGROUND\n             \u2514\u25004534 /usr/sbin/httpd -DFOREGROUND\n\nMar 04 08:50:17 localhost.localdomain systemd[1]: Starting The Apache HTTP Server...\nMar 04 08:50:17 localhost.localdomain httpd[690]: AH00558: httpd: Could not reliably determine the server's fully qualified domain name, using localhost.localdomain. Set th&gt;\nMar 04 08:50:17 localhost.localdomain httpd[690]: Server configured, listening on: port 80\nMar 04 08:50:17 localhost.localdomain systemd[1]: Started The Apache HTTP Server.x\n</code></pre> <p>The service is running and enabled so there is only 1 thing left to do before we can start the configuration in the GUI and that is to configure our firewall to allow incoming communication to the webserver.</p> <pre><code>firewall-cmd --add-service=http --permanent\nfirewall-cmd --reload\n</code></pre> <p>Open your browser and go to the url or ip of your frontend :</p> <pre><code>http://&lt;ip or dns of the zabbix frontend server&gt;/zabbix/\n</code></pre> <p>If all goes well you should be greeted with a Zabbix welcome page. In case you have an error check the configuration again or have a look at the Apache log file :</p> <p><code>/var/log/httpd/error_log</code></p> <p>or run</p> <p><code>journalctl -xe</code></p> <p>This should help you in locating the errors you made.</p> <p>When you point your browser to the correct URL you should be greeted with a page like here :</p> <p></p> <p>As you see there is only a limited list of local translations available on our Zabbix frontend to choose from</p> <p></p> <p>What if we want to install Chinese as language or another language from the list ? Run the next command to get a list of all locales available for your OS.</p> <p><code>dnf list glibc-langpack-*</code></p> <p>This will give you a list like</p> <pre><code>Installed Packages\nglibc-langpack-en.x86_64\nAvailable Packages\nglibc-langpack-aa.x86_64\n...\n\nglibc-langpack-zu.x86_64\n</code></pre> <p>Let's search for our Chinese locale to see if it is available. As you can see the code starts with zh</p> <pre><code># dnf list glibc-langpack-* | grep zh\nglibc-langpack-zh.x86_64\nglibc-langpack-lzh.x86_64\n</code></pre> <p>The command returns us 2 lines but as we have seen that the code was zh_CN we only have to install the first package.</p> <pre><code># dnf install glibc-langpack-zh.x86_64 -y\n</code></pre> <p>When we return now to our frontend we are able to select the Chinese language.</p> <p></p> Note <p>If your language is not available in the frontend don't panic it just means that there is no translation or that the translation was not 100% complete. Zabbis is free and relies on the community for it's translations so you can help in creating the translation. Go to the page <code>https://translate.zabbix.com/</code> and help us to make Zabbix get better. Once the translation is complete the next Zabbix minor patch version should have your language included.</p> <p>Click next when you are satisfied with the transaltions available. You will arrive at a screen to verifiy if all pre-requisites are met. If not fix them first but normaly it should be fine and you should be just able to click Next</p> <p></p> <p>The next page will show you a page with the connection parameters for our database.</p> <p>First you select your DB type 'MySQL' or 'PostgreSQL' and fill in the IP or DNS name of the location of your database server. Use port 3306 for MariaDB/MySQL or 5432 if you used PostgreSQL.</p> <p>Fill in the correct  database name, in our case it was <code>zabbix</code>. If you used PostgreSQL then you also need to fill in the correct schema name in our case it was <code>zabbix_server</code></p> <p>Next line will ask you for the DB users here we created a user <code>zabbix-web</code>. Enter it in the correct field and fill in the password that you used for this user.</p> <p>Make sure the option <code>Database TLS encryption</code> is not selected and press <code>Next step</code>.</p> <p></p> <p>We are almost there. The only thing that rests us to do is give our instance a name, select our timezone and select a default time we like to use.</p> <p></p> <p>Press <code>Next step</code> again you will see a page that tells you that the configuration is successful. Press Finish to end the configuration.</p> <p></p> <p>We are now ready to login :</p> <p></p> <p>Login : Admin Password : zabbix</p> <p>In case you are like me and don't like the /zabbix path at the end of you url then there is an easy way to remove this. Edit you <code>httpd</code> config file and add the lines below and replace it with your own domain:</p> <pre><code>vi /etc/httpd/conf/httpd.conf\n</code></pre> <pre><code>NameVirtualHost 172.1.11.21:80\n\n&lt;VirtualHost \"your ip or dns\":80&gt;\n  ServerName zabbixserver.mydomain.org\n  ServerAlias zabbixserver\n  DocumentRoot /usr/share/zabbix\n&lt;/VirtualHost&gt;\n</code></pre> <p>Don't forget to restart the <code>httpd</code> service</p> <pre><code>systemctl restart httpd\n</code></pre>"},{"location":"installation/installing-zabbixdb/","title":"Installing Zabbix DB Server","text":""},{"location":"installation/installing-zabbixdb/#installing-zabbix-with-mariadb","title":"Installing Zabbix with MariaDB","text":"<p>Let us start with the installation of the MariaDB server, you need to create a MariaDB repository configuration file <code>mariadb.repo</code> manually in the following path <code>/etc/yum.repos.d/</code>. To create a MariaDB repository file, you can use the following command.</p>"},{"location":"installation/installing-zabbixdb/#add-the-mariadb-repo","title":"Add the MariaDB repo","text":"<pre><code># vi /etc/yum.repos.d/mariadb.repo\n</code></pre> <p>The above command will create a new repository file, Once it is created, you need to add the following configuration into the file. Make sure your version, in this case 10.11, is supported by Zabbix by looking at the latest requirements for your version. </p> <pre><code># MariaDB 10.11 RedHatEnterpriseLinux repository list - created 2023-11-01 14:20 UTC\n# https://mariadb.org/download/\n[mariadb]\nname = MariaDB\n# rpm.mariadb.org is a dynamic mirror if your preferred mirror goes offline. See https://mariadb.org/mirrorbits/ for details.\n# baseurl = https://rpm.mariadb.org/10.11/rhel/$releasever/$basearch\nbaseurl = https://mirror.23m.com/mariadb/yum/10.11/rhel/$releasever/$basearch\n# gpgkey = https://rpm.mariadb.org/RPM-GPG-KEY-MariaDB\ngpgkey = https://mirror.23m.com/mariadb/yum/RPM-GPG-KEY-MariaDB\ngpgcheck = 1\n\n\n</code></pre> <p>Lets update our OS first with the latest patches</p> <pre><code># dnf update -y\n</code></pre>"},{"location":"installation/installing-zabbixdb/#install-the-mariadb-database","title":"Install the MariaDB database","text":"<p>Now we are ready to install our MariaDB database.</p> <pre><code># dnf install MariaDB-server MariaDB-client\n</code></pre> <p>We are now ready to enable and start or MariaDB database.</p> <pre><code># systemctl enable mariadb --now\n</code></pre> <p>Once the installation is complete, you can verify the version of the MariaDB server by using the following command:</p> <pre><code># mysql -V\n</code></pre> <p>The output should look like this:</p> <pre><code>mysql  Ver 15.1 Distrib 10.11.6-MariaDB, for Linux (x86_64) using  EditLine wrapper\n</code></pre> <p>And when we ask the status of our MariaDB server we should get an output like this:</p> <pre><code># systemctl status mariadb\n\n\u25cf mariadb.service - MariaDB 10.11.6 database server\n     Loaded: loaded (/usr/lib/systemd/system/mariadb.service; enabled; preset: disabled)\n    Drop-In: /etc/systemd/system/mariadb.service.d\n             \u2514\u2500migrated-from-my.cnf-settings.conf\n     Active: active (running) since Sat 2023-11-18 19:19:36 CET; 2min 13s ago\n       Docs: man:mariadbd(8)\n             https://mariadb.com/kb/en/library/systemd/\n    Process: 41986 ExecStartPre=/bin/sh -c systemctl unset-environment _WSREP_START_POSITION (code=exited, status=0/SUCCESS)\n    Process: 41987 ExecStartPre=/bin/sh -c [ ! -e /usr/bin/galera_recovery ] &amp;&amp; VAR= ||   VAR=`cd /usr/bin/..; /usr/bin/galera_recovery`; [ $? -eq 0 ]   &amp;&amp; systemctl set-environment _WSREP_START&gt;\n    Process: 42006 ExecStartPost=/bin/sh -c systemctl unset-environment _WSREP_START_POSITION (code=exited, status=0/SUCCESS)\n   Main PID: 41995 (mariadbd)\n     Status: \"Taking your SQL requests now...\"\n      Tasks: 9 (limit: 12344)\n     Memory: 206.8M\n        CPU: 187ms\n\n\n</code></pre>"},{"location":"installation/installing-zabbixdb/#securing-the-mariadb-database","title":"Securing the MariaDB database","text":"<p>It's time to secure our database by removing the test database and user and set our own root password.  Run the command <code>mariadb-secure-installation</code>, you should get the following output.</p> <pre><code>\n\n# mariadb-secure-installation\n\nNOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB\n      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!\n\nIn order to log into MariaDB to secure it, we'll need the current\npassword for the root user. If you've just installed MariaDB, and\nhaven't set the root password yet, you should just press enter here.\n\nEnter current password for root (enter for none):\nOK, successfully used password, moving on...\n\nSetting the root password or using the unix_socket ensures that nobody\ncan log into the MariaDB root user without the proper authorisation.\n\nYou already have your root account protected, so you can safely answer 'n'.\n\nSwitch to unix_socket authentication [Y/n] n\n ... skipping.\n\nYou already have your root account protected, so you can safely answer 'n'.\n\nChange the root password? [Y/n] y\nNew password:\nRe-enter new password:\nPassword updated successfully!\nReloading privilege tables..\n ... Success!\n\n\nBy default, a MariaDB installation has an anonymous user, allowing anyone\nto log into MariaDB without having to have a user account created for\nthem.  This is intended only for testing, and to make the installation\ngo a bit smoother.  You should remove them before moving into a\nproduction environment.\n\nRemove anonymous users? [Y/n] y\n ... Success!\n\nNormally, root should only be allowed to connect from 'localhost'.  This\nensures that someone cannot guess at the root password from the network.\n\nDisallow root login remotely? [Y/n] y\n ... Success!\n\nBy default, MariaDB comes with a database named 'test' that anyone can\naccess.  This is also intended only for testing, and should be removed\nbefore moving into a production environment.\n\nRemove test database and access to it? [Y/n] y\n - Dropping test database...\n ... Success!\n - Removing privileges on test database...\n ... Success!\n\nReloading the privilege tables will ensure that all changes made so far\nwill take effect immediately.\n\nReload privilege tables now? [Y/n] y\n ... Success!\n\nCleaning up...\n\nAll done!  If you've completed all of the above steps, your MariaDB\ninstallation should now be secure.\n\nThanks for using MariaDB!\n</code></pre>"},{"location":"installation/installing-zabbixdb/#create-the-zabbix-database","title":"Create the Zabbix database","text":"<pre><code># mysql -uroot -p\npassword\n\nMariaDB [(none)]&gt; CREATE DATABASE zabbix CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\nMariaDB [(none)]&gt; CREATE USER 'zabbix-web'@'&lt;zabbix server ip&gt;' IDENTIFIED BY '&lt;password&gt;';\nMariaDB [(none)]&gt; CREATE USER 'zabbix-srv'@'&lt;zabbix server ip&gt;' IDENTIFIED BY '&lt;password&gt;';\nMariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON zabbix.* TO 'zabbix-srv'@'&lt;zabbix server ip&gt;';\nMariaDB [(none)]&gt; GRANT SELECT, UPDATE, DELETE, INSERT ON zabbix.* TO 'zabbix-web'@'&lt;zabbix server ip&gt;';\nMariaDB [(none)]&gt; SET GLOBAL log_bin_trust_function_creators = 1;\nMariaDB [(none)]&gt; QUIT\n\n</code></pre> Warning <p>\"The Zabbix documentation explicitly mentions that deterministic triggers need to be created during the import of schema. On MySQL and MariaDB, this requires GLOBAL log_bin_trust_function_creators = 1 to be set if binary logging is enabled and there is no superuser privileges and log_bin_trust_function_creators = 1 is not set in MySQL configuration file.\"</p>"},{"location":"installation/installing-zabbixdb/#add-the-zabbix-repository-and-populate-the-db","title":"Add the Zabbix repository and populate the DB","text":"<pre><code># rpm -Uvh https://repo.zabbix.com/zabbix/6.5/rocky/9/x86_64/zabbix-release-6.5-2.el9.noarch.rpm\n# dnf clean all\n# dnf install zabbix-sql-scripts\n</code></pre> <p>Upload the data from zabbix (db structure, images, user, ... )</p> <pre><code># zcat /usr/share/zabbix-sql-scripts/mysql/server.sql.gz | mysql --default-character-set=utf8mb4 -uroot -p zabbix\n</code></pre> Warning <p>\"Depending on the speed of your hardware or VM this can take a few seconds upto a few minutes so please don't cancel just sit and wait for the prompt.\"</p> <p>Log back into your MariaDB Database as root</p> <pre><code># mysql -uroot -p\n</code></pre> <p>Remove the global parameter again as its not needed anymore and also for security reasons.</p> <pre><code>MariaDB [(none)]&gt; SET GLOBAL log_bin_trust_function_creators = 0;\nQuery OK, 0 rows affected (0.001 sec)\n</code></pre>"},{"location":"installation/installing-zabbixdb/#configure-the-firewall","title":"Configure the firewall","text":"<p>One last thing we need to do is open the firewall and allow incoming connections for the MariaDB database from our Zabbix server because at the moment we dont accept any connections yet.</p> <pre><code># firewall-cmd --list-all\npublic (active)\n  target: default\n  icmp-block-inversion: no\n  interfaces: enp0s3 enp0s8\n  sources:\n  services: cockpit dhcpv6-client  ssh\n  ports:\n  protocols:\n  forward: yes\n  masquerade: no\n  forward-ports:\n  source-ports:\n  icmp-blocks:\n  rich rules:\n</code></pre> <p>First we will create an appropriate zone for our MariaDB and open port 3306/tcp but only for the ip from our Zabbix server.</p> <pre><code># firewall-cmd --new-zone=mariadb-access --permanent\nsuccess\n\n# firewall-cmd --reload\nsuccess\n\n# firewall-cmd --get-zones\nblock dmz drop external home internal mariadb-access nm-shared public trusted work\n\n# firewall-cmd --zone=mariadb-access --add-source=&lt;zabbix-serverip&gt; --permanent\n\nsuccess\n# firewall-cmd --zone=mariadb-access --add-port=3306/tcp  --permanent\n\nsuccess\n# firewall-cmd --reload\n</code></pre> <p>Now lets have a look to our firewall rules to see if they are what we expected:</p> <pre><code># firewall-cmd --zone=mariadb-access --list-all\n</code></pre> <pre><code>mariadb-access (active)\n  target: default\n  icmp-block-inversion: no\n  interfaces:\n  sources: &lt;ip from zabbix-server&gt;\n  services:\n  ports: 3306/tcp\n  protocols:\n  forward: no\n  masquerade: no\n  forward-ports:\n  source-ports:\n  icmp-blocks:\n  rich rules:\n</code></pre> <p>Our database server is ready now to accept connections from our Zabbix server :). You can continue with the next task Installing the Zabbix Server</p>"},{"location":"installation/installing-zabbixdb/#installing-zabbix-with-mysql","title":"Installing Zabbix with MySQL","text":"<p>Let us start with the installation of the MySQL server, you need to create a MySQL repository first so that we can install the proper files for our MySQL server It's alwqys best to check the Zabbix documentation to see what version is supported so you don't install a version that is not supported or is not supported anymore.</p>"},{"location":"installation/installing-zabbixdb/#add-the-mysql-repo","title":"Add the MySQL repo","text":"<p>Run the following command to install the MySQL repo for version 8.0</p> <p><code># dnf -y install https://dev.mysql.com/get/mysql80-community-release-el9-1.noarch.rpm</code></p> Note <p>\"If you install this on RedHat 8 and higher or alternatives like CentOS, Rocky or Alma 8 then you need to disable the mysql module by running 'module disable mysql'.\"</p> <p>Let's update our OS first with the latest patches</p> <p><code># dnf update -y</code></p>"},{"location":"installation/installing-zabbixdb/#installing-the-mysql-database","title":"Installing the MySQL database","text":"<p><code># dnf -y install mysql-community-server</code></p> <p>We are now ready to enable and start or MySQL database.</p> <p><code># systemctl enable mysqld --now</code></p> <p>Once the installation is complete, you can verify the version of the MySQL server by using the following command:</p> <p><code># mysql -V</code></p> <p>The output should look like this:</p> <p><code>mysql  Ver 8.0.35 for Linux on x86_64 (MySQL Community Server - GPL)</code></p> <p>And when we ask the status of our MariaDB server we should get an output like this:</p> <pre><code># systemctl status mysqld\n\n\u25cf mysqld.service - MySQL Server\n     Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; preset: disabled)\n     Active: active (running) since Mon 2023-11-20 22:15:51 CET; 1min 15s ago\n       Docs: man:mysqld(8)\n             http://dev.mysql.com/doc/refman/en/using-systemd.html\n    Process: 44947 ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=0/SUCCESS)\n   Main PID: 45012 (mysqld)\n     Status: \"Server is operational\"\n      Tasks: 37 (limit: 12344)\n     Memory: 448.3M\n        CPU: 4.073s\n     CGroup: /system.slice/mysqld.service\n             \u2514\u250045012 /usr/sbin/mysqld\n\nNov 20 22:15:43 mysql-db systemd[1]: Starting MySQL Server...\nNov 20 22:15:51 mysql-db systemd[1]: Started MySQL Server.\n</code></pre>"},{"location":"installation/installing-zabbixdb/#securing-the-mysql-database","title":"Securing the MySQL database","text":"<p>MySQL will secure our database with a random root password that is generated when we install the database. First thing we need to do is replace it with our own password. To find what the password is we need to read the log file with the followin command:</p> <p><code># grep 'temporary password' /var/log/mysqld.log</code></p> <p>Change the root password as soon as possible by logging in with the generated, temporary password and set a custom password for the superuser account:</p> <pre><code># mysql -uroot -p\n</code></pre> <pre><code>mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED BY '&lt;my mysql password&gt;';\nmysql&gt; quit\n</code></pre> <p>Next we can run the command mysql_secure_installation, you should get the following output:</p> Note <p>\"There is no need to reset the root password for MySQL again as we have reset it already. The next step is optional but recommended.\"</p> <pre><code># mysql_secure_installation\n\nSecuring the MySQL server deployment.\n\nEnter password for user root:\nThe 'validate_password' component is installed on the server.\nThe subsequent steps will run with the existing configuration\nof the component.\nUsing existing password for root.\n\nEstimated strength of the password: 100\nChange the password for root ? ((Press y|Y for Yes, any other key for No) : n\n\n ... skipping.\nBy default, a MySQL installation has an anonymous user,\nallowing anyone to log into MySQL without having to have\na user account created for them. This is intended only for\ntesting, and to make the installation go a bit smoother.\nYou should remove them before moving into a production\nenvironment.\n\nRemove anonymous users? (Press y|Y for Yes, any other key for No) : y\nSuccess.\n\n\nNormally, root should only be allowed to connect from\n'localhost'. This ensures that someone cannot guess at\nthe root password from the network.\n\nDisallow root login remotely? (Press y|Y for Yes, any other key for No) : y\nSuccess.\n\nBy default, MySQL comes with a database named 'test' that\nanyone can access. This is also intended only for testing,\nand should be removed before moving into a production\nenvironment.\n\n\nRemove test database and access to it? (Press y|Y for Yes, any other key for No) : y\n - Dropping test database...\nSuccess.\n\n - Removing privileges on test database...\nSuccess.\n\nReloading the privilege tables will ensure that all changes\nmade so far will take effect immediately.\n\nReload privilege tables now? (Press y|Y for Yes, any other key for No) : y\nSuccess.\n\nAll done!\n</code></pre> <p>Let's create our DB users and the correct permissions in the database:</p> <p><code>mysql -uroot -p</code></p> <pre><code>mysql&gt; CREATE DATABASE zabbix CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\nmysql&gt; CREATE USER 'zabbix-web'@'&lt;zabbix server ip&gt;' IDENTIFIED BY '&lt;password&gt;';\nmysql&gt; CREATE USER 'zabbix-srv'@'&lt;zabbix server ip&gt;' IDENTIFIED BY '&lt;password&gt;';\nmysql&gt; GRANT ALL PRIVILEGES ON zabbix.* TO 'zabbix-srv'@'&lt;zabbix server ip&gt;';\nmysql&gt; GRANT SELECT, UPDATE, DELETE, INSERT ON zabbix.* TO 'zabbix-web'@'&lt;zabbix server ip&gt;';\nmysql&gt; SET GLOBAL log_bin_trust_function_creators = 1;\nmysql&gt; QUIT\n</code></pre> Warning <p>\"The Zabbix documentation explicitly mentions that deterministic triggers need to be created during the import of schema. On MySQL and MariaDB, this requires GLOBAL log_bin_trust_function_creators = 1 to be set if binary logging is enabled and there is no superuser privileges and log_bin_trust_function_creators = 1 is not set in MySQL configuration file.\"</p>"},{"location":"installation/installing-zabbixdb/#add-the-zabbix-repository-and-populate-the-db_1","title":"Add the Zabbix repository and populate the DB","text":"<pre><code># rpm -Uvh https://repo.zabbix.com/zabbix/6.5/rocky/9/x86_64/zabbix-release-6.5-2.el9.noarch.rpm\n# dnf clean all\n# dnf install zabbix-sql-scripts\n\n</code></pre> <p>Now let;s upload the data from zabbix (db structure, images, user, ... )</p> <pre><code># zcat /usr/share/zabbix-sql-scripts/mysql/server.sql.gz | mysql --default-character-set=utf8mb4 -uroot -p zabbix\nEnter password:\n</code></pre> Warning <p>\"Depending on the speed of your hardware or VM this can take a few seconds upto a few minutes so please don't cancel just sit and wait for the prompt.\"</p> <pre><code>Log back into your MySQL Database as root\n\n# mysql -uroot -p\n</code></pre> <p>Remove the global parameter again as its not needed anymore and also for security reasons.</p> <pre><code>mysql&gt; SET GLOBAL log_bin_trust_function_creators = 0;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n</code></pre>"},{"location":"installation/installing-zabbixdb/#configure-the-firewall_1","title":"Configure the firewall","text":"<p>One last thing we need to do is open the firewall and allow incoming connections from our Zabbix server to our MySQL database because at the moment we dont accept any connections yet.</p> <pre><code># firewall-cmd --list-all\npublic (active)\n  target: default\n  icmp-block-inversion: no\n  interfaces: enp0s3 enp0s8\n  sources:\n  services: cockpit dhcpv6-client  ssh\n  ports:\n  protocols:\n  forward: yes\n  masquerade: no\n  forward-ports:\n  source-ports:\n  icmp-blocks:\n  rich rules:\n</code></pre> <p>First we will create an appropriate zone for our MySQL Database and open port 3306/tcp but only for the IP from our Zabbix server. This way no one unallowed is able to connect.</p> <pre><code># firewall-cmd --new-zone=mysql-access --permanent\nsuccess\n\n# firewall-cmd --reload\nsuccess\n\n# firewall-cmd --get-zones\nblock dmz drop external home internal mysql-access nm-shared public trusted work\n\n# firewall-cmd --zone=mysql-access --add-source=&lt;zabbix-serverip&gt; --permanent\n\nsuccess\n# firewall-cmd --zone=mysql-access --add-port=3306/tcp  --permanent\n\nsuccess\n# firewall-cmd --reload\n</code></pre> <p>Now lets have a look to our firewall rules to see if they are what we expected:</p> <pre><code># firewall-cmd --list-all --zone=mysql-access\n</code></pre> <pre><code>mysql-access (active)\n  target: default\n  icmp-block-inversion: no\n  interfaces:\n  sources: &lt;ip from the zabbix-server&gt;\n  services:\n  ports: 3306/tcp\n  protocols:\n  forward: no\n  masquerade: no\n  forward-ports:\n  source-ports:\n  icmp-blocks:\n  rich rules:\n</code></pre> <p>Our database server is ready now to accept connections from our Zabbix server :). You can continue with the next task Installing the Zabbix Server</p>"},{"location":"installation/installing-zabbixdb/#installing-zabbix-with-postgresql","title":"Installing Zabbix with PostgreSQL","text":"<p>For our DB setup with PostgreSQL we need to add our PostgreSQL repository first to the system. As of writing PostgreSQL 13-16 are supported but best is to have a look before you install it as new versions may be supported and older maybe unsupported both by Zabbix and PostgreSQL. Usually it's a good idea to go with the latest version that is supported by Zabbix. Zabbix also supports the extension TimescaleDB this is someting we will talk later about. As you will see the setup from PostgreSQL is very different from MySQL not only the installation but also securing the DB.</p> <p>The table of compatibility can be found here.</p>"},{"location":"installation/installing-zabbixdb/#add-the-postgresql-repo","title":"Add the PostgreSQL repo","text":"<p>So let us start first setting up our PostgreSQL repository with the folowing commands.</p> <pre><code># Install the repository RPM:\nsudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\n# Disable the built-in PostgreSQL module:\nsudo dnf -qy module disable postgresql\n\n# Install PostgreSQL:\nsudo dnf install -y postgresql16-server\n\n# Initialize the database and enable automatic start:\nsudo /usr/pgsql-16/bin/postgresql-16-setup initdb\nsudo systemctl enable postgresql-16 --now\n</code></pre>"},{"location":"installation/installing-zabbixdb/#securing-the-postgresql-database","title":"Securing the PostgreSQL database","text":"<p>As i told you PostgreSQL works a bit different then MySQL or MariaDB and this applies aswell to how we manage access permissions. Postgres works with a file with the name pg_hba.conf where we have to tell who can access our database from where and what encryption is used for the password. So let's edit this file to allow our frontend and zabbix server to access the database.</p> Note <p>\"Client authentication is configured by a configuration file with the name <code>pg_hba.conf</code>. HBA here stands for host based authentication. For more information feel free to check the PostgreSQL documentation.\"</p> <p>Add the following lines, the order here is important.</p> <pre><code># vi /var/lib/pgsql/16/data/pg_hba.conf\n</code></pre> <pre><code># \"local\" is for Unix domain socket connections only\nlocal   zabbix          zabbix-srv                                  scram-sha-256\nlocal   all             all                                         peer\n# IPv4 local connections:\nhost    zabbix          zabbix-srv      &lt;ip from zabbix server/24&gt;  scram-sha-256\nhost    zabbix          zabbix-web      &lt;ip from zabbix server/24&gt;  scram-sha-256\nhost    all             all             127.0.0.1/32                scram-sha-256\n</code></pre> <p>After we changed the pg_hba file don't forget to restart postgres else the settings will not be applied. But before we restart let us also edit the file postgresql.conf and allow our database to listen on our network interface for incomming connections from the zabbix server. Postgresql will standard only allow connections from the socket.</p> <pre><code># vi /var/lib/pgsql/16/data/postgresql.conf\n</code></pre> <p>and replace the line with listen_addresses so that PostgreSQL will listen on all interfaces and not only on our localhost.</p> <pre><code>#listen_addresses = 'localhost' with  listen_addresses = '*'\n</code></pre> <p>When done restart the PostgreSQL cluster and see if it comes back online in case of an error check the <code>pg_hba.conf</code> file you just edited for typos.</p> <pre><code># systemctl restart postgresql-16\n</code></pre> <p>For our Zabbix server we need to create tables in the database for this we need ot install the Zabbix repository like we did for our Zabbix server and install the Zabbix package containing all the database tables images icons, ....</p>"},{"location":"installation/installing-zabbixdb/#add-the-zabbix-repository-and-populate-the-db_2","title":"Add the Zabbix repository and populate the DB","text":"<pre><code># dnf install https://repo.zabbix.com/zabbix/6.0/rhel/9/x86_64/zabbix-release-6.0-4.el9.noarch.rpm -y\n# dnf install zabbix-sql-scripts -y\n</code></pre> <p>Now we are ready to create our Zabbix users for the server and the frontend:</p> <pre><code># su - postgres \n# createuser --pwprompt zabbix-srv\nEnter password for new role: &lt;server-password&gt;\nEnter it again: &lt;server-password&gt;\n</code></pre> <p>Let's do the same for our frontend let's create a user to connect to the database:</p> <pre><code># createuser --pwprompt zabbix-web\nEnter password for new role: &lt;frontend-password&gt;\nEnter it again: &lt;frontend-password&gt;\n</code></pre> <p>Next we have to unzip the database schema files. Run as user root followin command::</p> <pre><code># gzip -d /usr/share/zabbix-sql-scripts/postgresql/server.sql.gz\n</code></pre> <p>We are now ready to create our database zabbix. Become user postgres again and run next command to create the database as our user zabbix-srv:</p> <pre><code># su - postgres\n# createdb -E Unicode -O zabbix-srv  zabbix\n</code></pre> <p>Let's verify that we are really connected to the database with the correct session. Login from the Postgres shell on the zabbix database</p> <pre><code># psql -d zabbix -U zabbix-srv\n</code></pre> <p>Make sure we are logged in with our correct user <code>zabbix-srv</code>.</p> <pre><code>zabbix=&gt; SELECT session_user, current_user;\n session_user | current_user\n--------------+--------------\n zabbix-srv   | zabbix-srv\n(1 row)\n</code></pre> <p>PostgreSQL works a bit different then MySQL or MariaDB when it comes to almost everything :) One of the things that it has that MySQL not has are for example shemas. If you like to know more about it i can recommend this  URI. It explains in detail what it is and why we need it. But in short ...  In PostgreSQL schema enables a multi-user environment that allows multiple users to access the same database without interference. Schemas are important when several users use the application and access the database in their way or when various applications utilize the same database. There is a standard schema that you can use but the better way is to create our own schema.</p> Note <p>\"There is a standard schema <code>public</code> that you can use but the better way is to create our own schema this was if later something else is installed next to the Zabbix database it will be easier to create users with only access to the newly created database tables.\"</p> <pre><code>zabbix=&gt; CREATE SCHEMA zabbix_server AUTHORIZATION \"zabbix-srv\";\nCREATE SCHEMA\nzabbix=&gt; set search_path to \"zabbix_server\";\nzabbix=&gt; \\dn\n          List of schemas\n     Name      |       Owner\n---------------+-------------------\n public        | pg_database_owner\n zabbix_server | zabbix-srv\n(2 rows)\n\n\n</code></pre> <p>Now we have our DB ready with correct permissions for user <code>zabbix-srv</code> but not yet for our user <code>zabbix-web</code>. Let's fix this first and give the rights to connect to our schema.</p> <pre><code>zabbix=# GRANT USAGE ON SCHEMA zabbix_server TO \"zabbix-web\";\nGRANT\n</code></pre> <p>The user <code>zabbix-web</code> has now the rights to connect to our schema but cannot to anything yet lets fix this but also don't give too many rights.</p> <pre><code>zabbix=# GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA zabbix_server TO \"zabbix-web\";\nGRANT\nzabbix=# GRANT SELECT, UPDATE ON ALL SEQUENCES IN SCHEMA zabbix_server TO \"zabbix-web\";\nGRANT\n</code></pre> <p>There we go both users are created with the correct permissons. We are now ready to populate the database with the Zabbix table structures etc ... log back in as user postgres and run the following commands </p> <p>Let's upload the Zabbix SQL file we extracted earlier to populate our database with the needed schemas images users etc ...</p> Warning <p>\"Depending on the speed of your hardware or VM this can take a few seconds upto a few minutes so please don't cancel just sit and wait for the prompt.\"</p> <pre><code>zabbix=# \\i /usr/share/zabbix-sql-scripts/postgresql/server.sql\nCREATE TABLE\nCREATE INDEX\n...\n...\nINSERT 0 1\nINSERT 0 1\nINSERT 0 1\nINSERT 0 1\nCOMMIT\nzabbix=#\n</code></pre> Note <p>\"If the import fails with <code>psql:/usr/share/zabbix-sql-scripts/postgresql/server.sql:7: ERROR:  no schema has been selected to create in</code>  then you probably made an error in the line where you set the search path.\"</p> <p>Lets verify that our tables are properly created with the correct permissions</p> <pre><code>zabbix=# \\dt\n                        List of relations\n    Schema     |            Name            | Type  |   Owner\n---------------+----------------------------+-------+------------\n zabbix_server | acknowledges               | table | zabbix-srv\n zabbix_server | actions                    | table | zabbix-srv\n zabbix_server | alerts                     | table | zabbix-srv\n zabbix_server | auditlog                   | table | zabbix-srv\n zabbix_server | autoreg_host               | table | zabbix-srv\n...\n...\n zabbix_server | usrgrp                     | table | zabbix-srv\n zabbix_server | valuemap                   | table | zabbix-srv\n zabbix_server | valuemap_mapping           | table | zabbix-srv\n zabbix_server | widget                     | table | zabbix-srv\n zabbix_server | widget_field               | table | zabbix-srv\n(173 rows)\n</code></pre> Note <p>\"If you are like me and don't like to set the search path every time you logon with the user zabbix-srv to the correct search path you can run the following SQL. <code>zabbix=&gt; alter role \"zabbix-srv\" set search_path = \"$user\", public, zabbix_server ;</code>\"</p> <p>If you are ready you can exit the database and return as user root.</p> <pre><code>zabbix=&gt;  \\q\n# exit\n</code></pre>"},{"location":"installation/installing-zabbixdb/#configure-the-firewall_2","title":"Configure the firewall","text":"<p>One last thing we need to do is open the firewall and allow incoming connections for the PostgreSQL database from our Zabbix server because at the moment we dont accept any connections yet.</p> <pre><code># firewall-cmd --list-all\npublic (active)\n  target: default\n  icmp-block-inversion: no\n  interfaces: enp0s3 enp0s8\n  sources:\n  services: cockpit dhcpv6-client  ssh\n  ports:\n  protocols:\n  forward: yes\n  masquerade: no\n  forward-ports:\n  source-ports:\n  icmp-blocks:\n  rich rules:\n</code></pre> <p>First we will create an appropriate zone for our PostgreSQL DB and open port 5432/tcp but only for the ip from our Zabbix server.</p> <pre><code># firewall-cmd --new-zone=postgresql-access --permanent\nsuccess\n\n# firewall-cmd --reload\nsuccess\n\n# firewall-cmd --get-zones\nblock dmz drop external home internal nm-shared postgresql-access public trusted work\n\n# firewall-cmd --zone=postgresql-access--add-source=&lt;zabbix-serverip&gt; --permanent\n\nsuccess\n# firewall-cmd --zone=postgresql-access --add-port=5432/tcp  --permanent\n\nsuccess\n# firewall-cmd --reload\n</code></pre> <p>Now lets have a look to our firewall rules to see if they are what we expected:</p> <pre><code># firewall-cmd --zone=postgresql-access --list-all\n</code></pre> <pre><code>postgresql-access (active)\n  target: default\n  icmp-block-inversion: no\n  interfaces:\n  sources: 192.168.56.18\n  services:\n  ports: 5432/tcp\n  protocols:\n  forward: no\n  masquerade: no\n  forward-ports:\n  source-ports:\n  icmp-blocks:\n  rich rules:\n</code></pre> <p>Our database server is ready now to accept connections from our Zabbix server :). You can continue with the next task Installing the Zabbix Server</p>"},{"location":"maintenance/maintaining-zabbix/","title":"Maintaining Zabbix","text":""},{"location":"permissions/managing-permissions/","title":"Managing Permissions","text":""},{"location":"problems/zabbix-triggers/","title":"Triggers","text":""},{"location":"project/modbus/","title":"Modbus monitoring with Zabbix.","text":""},{"location":"project/modbus/#introduction","title":"Introduction","text":"<p>MODBUS TCP is a technology that takes MODBUS RTU packets and encapsulates this in a TCP/IP wrapper for communication over a network instead of typical RS485 serial connections. MODBUS as a technology has been around since 1979 and is one of the de-facto industrial application protocols commonly found in HVAC controllers, Generator controllers and a multitude of other PLC devices. Zabbix has the ability to monitor MODBUS using a Zabbix agent. If the Zabbix agent is running on a machine with a serial connection to the Modbus device, this monitoring can be done over serial communications.  If the Modbus device is connected to a TCP/IP network, the Zabbix agent will still be required for sending/receiving commands. TCP port 502 is commonly used for modbus TCP communications.</p> <p>In this example, all generator PLCs are connected to a TCP/IP network.</p> <p></p> <p>Due to the nature of the network used for this example, a Zabbix proxy is also required. In this case the Zabbix proxy server is a docker container on a virtual machine that can reach  both the Zabbix server network and the network the PLC devices are connected too. The Zabbix agent that is needed for the Modbus commands is also running as a docker container on the same virtual machine as the Zabbix proxy server. Different networks may require different solutions. The common element for all networks for Modbus monitoring is there needs to be a Zabbix agent that can interface with the Modbus devices.</p> <p></p> <p>In this screenshot is the initial template creation step. The template group used in this screen shot is templates/power as this example will be using a generator PLC. Templates should be named in a self explanatory way.  If monitoring a Horner XL4 PLC, it would be best to name the template \u201cHorner XL4\u201d</p> <p></p> <p>Before adding in the template, add in a default Macro under the tab macros wich is called {$DEVICE_CONNECTION} and set the value to \u201ctcp://127.0.0.1:502\u201d. Later when adding in hosts, each host that is added in will overwrite this value with the actual value of the connection string for that particular host. This will allow for troubleshooting in the future if communications are not established with a host.</p>"},{"location":"project/modbus/#template-item-creation","title":"Template Item creation","text":"<p>For a detailed explanation of all the modbus.get parameters see the Zabbix documentation:</p> <p>https://www.zabbix.com/documentation/7.0/en/manual/appendix/items/modbus</p> <p>The item key for modbus.get looks like this:</p> <pre><code>modbus.get[&lt;endpoint&gt;,&lt;slaveid&gt;,&lt;function&gt;,&lt;address&gt;,&lt;count&gt;,&lt;type&gt;,&lt;endianness&gt;,&lt;offset&gt;]\n</code></pre> <p>For creating the template of the item, in this example the following values will be set:</p> <ul> <li>Endpoint \u2013 the protocol/connection string in this example this is set to {$DEVICE_CONNECTION}</li> <li>Slaveid \u2013 for Serial communications, multiple Modbus can be on the same serial connection and this value allows addressing of those devices. For this TCP example, this value will be 1</li> <li>Function \u2013 1 - Read Coil, 2 - Read Discrete Input, 3 - Read Holding Registers, 4 - Read Input Register \u2013 please read Modbus documentation on these 4 different modes.</li> <li>Address \u2013 this is the internal address of the registry to be read. In this example, address 42 is used. This will require in-depth knowledge of the Modbus device to properly determine.</li> <li>Count \u2013 if the function is 1 or 2, then count = 1 bit, for all other cases, (count*type)/2 = real count of registers for reading. To simplify, this is the number of registers to read with this command. </li> <li>Type \u2013 this is the data type to be returned from the Modbus device, for function 1 and 2, this should be set to bit. For function 3 and 4 there is a wide variety of options from bit to double. Please see the Zabbix documentation linked above, also you will need to fully understand your Modbus device and know what data types it returns.</li> <li>Endianness \u2013 does the Modbus device return big endian, little endian, Mid-big endian, or Mid-little endian values? For bit values that are returned the value be for big endian is used here. Again knowledge of the data type returned by the Modbus device is important</li> <li>Offset \u2013 for some Modbus devices that do not support random read access an offset has to be given. This allows the Modbus device to return a data byte, and the correct bit to be selected by Zabbix. The example below allows random read access so Offset is set to 0</li> </ul>"},{"location":"project/modbus/#example-item-key","title":"Example Item key:","text":"<p>In this example the Modbus device is a generator controller. For this generator controller I have address 42 for a generator AC Fail alarm. This is a coil read operation. The Modbus.get item key will look like this:</p> <pre><code>modbus.get[{$DEVICE_CONNECTION},1,1,42,1,bit,be,0]\n</code></pre> <ul> <li>{$DEVICE_CONNECTION} \u2013 this allows the use of a macro set in the host creation step</li> <li>1 \u2013 Slaveid, for this example, MODBUS TCP is used so this is ignored</li> <li>1 \u2013 Function, for this example, it is a read coil operation</li> <li>42 \u2013 this is the internal address in the Modbus device to be read</li> <li>1 \u2013 Count is set to 1 because this value is a bit for this example</li> <li>bit \u2013 The type of data for the example</li> <li>be \u2013 endianness \u2013 big endianness for bit operations</li> <li>0 \u2013 the offset for this example.</li> </ul>"},{"location":"project/modbus/#full-item-template-example","title":"Full Item template example","text":"<p>This is the full example of the item creation window. - Name \u2013 Generator AC fail \u2013 this is the name of the item we are creating - Type \u2013 Zabbix agent \u2013 This is used so that the Modbus.get command can be used - Key \u2013 modbus.get \u2013 explained above for this example - Type of information \u2013 In this case the value is either 0 or 1 so we used numeric (unsigned) - Units \u2013 There are no units to assign to this item - Update interval \u2013 15m, this could be quicker if the Modbus device has data at a quicker interval, for this example 15m was used as a proof of concept - Value Mapping \u2013 A map was created called Alarm status where 0 = OK and 1 = Alarm which matches the expected data from this Modbus device</p>"},{"location":"project/modbus/#host-creation","title":"Host Creation","text":"<p>After creating the template, with all the items to be monitored, the hosts can be created and assigned to the template In this example:</p> <ul> <li>Host name \u2013 Test PLC for this example host</li> <li>Templates \u2013 The generic PLC template from the above example was used</li> <li>Host Group \u2013 Since this will eventually be used for a generator Modbus PLC I have a generator/Modbus host group created</li> <li>Interfaces \u2013 We use a Zabbix Agent interface with a DNS name of the Zabbix agent running on the same virtual machine as the Zabbix Proxy. This is setup due to the network configuration presented above. The Zabbix agent and Zabbix proxy are docker containers on the virtual machine with connections to both the PLC network and the Zabbix server. To communicate with a Modbus device a zabbix agent needs to be used.</li> <li>Monitored by proxy \u2013 The proxy server that will communicate with the Zabbix agent</li> </ul>"},{"location":"project/modbus/#host-creation-macro-definition","title":"Host Creation \u2013 Macro definition","text":"<p>Before adding the host in, the device connection string needs to be applied. In this case we change {$DEVICE_CONNECTION} to the actual value we will be using for this Modbus device. Doing it this way will allow for the template to be used over and over with different Modbus devices.</p> <p></p>"},{"location":"project/modbus/#network-diagram-explained","title":"Network Diagram explained","text":"<ol> <li>The Zabbix Server requests the Zabbix proxy to get the item value</li> <li>The Zabbix proxy requests the modbus.get command from the Zabbix agent</li> <li>The Zabbix Agent executes the modbus.get command to the PLC via Modbus TCP in this example</li> <li>The PLC responds to the Modbus TCP command to the Zabbix Agent</li> <li>The Zabbix agent returns the results of the modbus.get query to the Zabbix proxy </li> <li>The Zabbix proxy returns the item value to the zabbix server.</li> </ol> <p>By : Jason Drummond</p>"},{"location":"proxies/active-proxy/","title":"Active proxy","text":""},{"location":"proxies/active-proxy/#active-proxy","title":"Active proxy","text":"<p>Let's first start with the setup of an active Proxy. Things should be very simple just make sure you have a VM that you can use to install a proxy.</p>"},{"location":"proxies/active-proxy/#zabbix-gui-config","title":"Zabbix Gui config","text":"<p>First we will have to add the config in our Zabbix server frontend. From our Administration menu choose the menu <code>Proxies</code>.</p> <p></p> <p>Go to the upper right corner of the screen and press <code>Create proxy</code> You will now get a pop-up like shown here. Fill in the proxy name. I have chosen for ProxyA as it will be our active proxy. You can use for yourself whatever you like. In production I would suggest to use names that make it easy for you to see it's a proxy and where the proxy belongs to. Ex: what vlan or what division ....</p> <p>Choose Proxy mode <code>Active</code> and fill in the IP of your virtualmachine.</p> <p></p> <p>When done press <code>Add</code> at the bottom.</p>"},{"location":"proxies/active-proxy/#zabbix-proxy-config","title":"Zabbix Proxy config","text":"<p>Ok now that this is done lets go to the VM where we like to install our proxy and add the Zabbix repository so we can install our needed packages.</p> <pre><code>rpm -Uvh https://repo.zabbix.com/zabbix/7.0/rhel/9/x86_64/zabbix-release-7.0-1.el9.noarch.rpm\n</code></pre> <p>Zabbix provides the proxy with the option to connecto to a SQLiteDB this can be enough for most setups. In case you need more performance from the DB there is also the option to install the Proxy with a PostgreSQL or MySQL DB. We will cover how to do with the SQLite db as this is the most easy way. We show you later what to look for if installing a proxy With MySQL or PostgreSQL.</p> <pre><code>dnf install zabbix-proxy-sqlite3 zabbix-selinux-policy -y\n</code></pre> <p>Once this is done let's change the proxy configuration by editing the proxy configuration file.</p> <pre><code>vi /etc/zabbix/zabbix_proxy.conf\n</code></pre> <p>Here a few parameters needs to be changed before we can use our proxy</p> <ul> <li>Server=</li> <li>DBName=</li> <li>Hostname=</li> </ul> <p>Change them according to your settings:</p> <ul> <li>Server=&lt; zabbix server ip &gt;</li> <li>Hostname=ProxyA ( or the name you have used in your Zabbix frontend for the Proxy )</li> <li>DBName=/tmp/zabbix_proxy.db</li> </ul> <p>The parameters are explained as follows:</p> <ul> <li>Server: Same as with active agents this parameter is used to connect to the Zabbix server, we can use the IP or DNS name here.</li> <li>DBName: This depends a bit, it is usually the name of the database like we configured on the Zabbix server in case we use PostgreSQL or MySQL. However with SQLite we need to specify dbname and location.           Username and Password will be ignored when using SQLite. Just make sure SELinux is properly configured else the DB will not be created. It can help to put SELinux in permissive first.</li> <li>Hostname: This parameter is used by the proxy to identify itself to the Zabbix server. This needs to be the same name we have registered in the Zabbix frontend.</li> </ul> Tip <p>Another parameter that can be useful is ListenPort this is usually 10051 for Active and Passive proxies. But if you run for some reason the proxy on the zabbix server then you have to change this port to something else.</p> Note <p>With Zabbix 7 a new parameter has been introduced on the proxy side <code>ProxyBufferMode</code>. This is standard set to <code>Hybrid</code> and is what is recommended. With Hybrid the proxy will buffer will work in memory and fallback to the database if needed. The documentation states that the proxy buffer normally works like in memory mode until it runs out of memory or the oldest record exceeds the configured age. If that happens the buffer is flushed to database and it works like in disk mode until all data have been uploaded and it starts working with memory again. On shutdown the memory buffer is flushed to database.</p> Note <p>Don't worry about the file for the db not existing Zabbix will create it by itself.</p> Warning <p>If you use DNS names make sure there is DNS caching configured on the machine. If not Zabbix will do a lookup on the DNS server everytime it wants to make a connection.</p> <p>So now that we have configured everything let's start our proxy. First disable SELinux as it will block a few things this can be done by running <code>setenforce 0</code>. This is only temporary and either you keep it disabled permanent or you fix the config. An easy way is to use <code>sealert -a /var/log/audit/audit.log</code>. Once this is done there is only 1 thing that rests us to do and that is start and enable the zabbix-proxy service.</p> <pre><code>systemctl enable zabbix-proxy --now\n</code></pre> <p>If you look now in the frontend of the Zabbix server you will see that the proxy we have configured is Online</p> <p></p> Note <p>If you like to install the proxy with MySQL or PostgreSQL as database then it is important to also install the package <code>zabbix-sql-scripts</code>. There is a special shema to be used for the proxy database that can be found under <code>/usr/share/zabbix-sql-scripts/mysql|postgresql&gt;/proxy.sql</code>. Also in this case don't forget to edit the zabbix_proxy.conf file and add DBHost, DBUser, DBPassword and DBSchema as needed.</p>"},{"location":"proxies/installing-proxies/","title":"Installing Proxies","text":"<p>There are some cases where monitoring with the Zabbix server and agents \u2026. is not enough.  Imagine monitoring external clients, different VLANs or just monitoring a DMZ where you don\u2019t want to open for every agent a port in the firewall for the agent, SNMP, IPMI, \u2026  Here Zabbix proxies come to the rescue. A Zabbix proxy is a small remote Zabbix server that supports the collection of data. With Zabbix 7 it\u2019s now even possible to run Zabbix proxies in HA. Proxies will also become important in larger environments to simplify the management and most importantly to offload the Zabbix server. Our proxies can do pre-processing and it will also limit the number of connections from devices to the Zabbix server.</p> <p>So in short a Zabbix proxy can be used to : - Monitor remote locations - Monitor locations that have unreliable connections - Offload the Zabbix server when monitoring thousands of devices - Simplify the maintenance and management</p>"},{"location":"proxies/installing-proxies/#proxy-requirements","title":"Proxy requirements","text":"<p>If you like to setup a few proxies for test or in your environment you will need a few Linux hosts to install the Proxies on.  Proxies are also available in containers so a full VM is not needed. However here we will use a VM so we can show you how to install a proxy. When it comes to proxies they are very lightweight however since Zabbix 4.2 Proxies are able to do Item value preprocessing and this can use a lot of CPU power. So the number of CPUs and memory will depends on how many machines you will monitor and how many preprocessing rules you have on your hosts.</p> Note <p>Imagine that you need to restart your Zabbix server and that all proxies start to push the data they have gathered during the downtime of the Zabbix server. This would create ahuge amount of data being sent at once to the Zabbix server and bring it to its knees in no time. Since Zabbix 6 Zabbix has added protection for overload. When Zabbix server history cache is full the history cache write access is being throttled. Zabbix server will stop accepting data from proxies when history cache usage reaches 80%. Instead those proxies will be put on a throttling list. This will continue until the cache usage falls down to 60%. Now server will start accepting data from proxies one by one, defined by the throttling list. This means the first proxy that attempted to upload data during the throttling period will be served first and until it's done the server will not accept data from other proxies.</p> History write cache usage Zabbix server mode Zabbix server action Reaches 80% Wait Stops accepting proxy data, but maintains a throttling list (prioritized list of proxies to be contacted later). Drops to 60% Throttled Starts processing throttling list, but still not accepting proxy data. Drops to 20% Normal Drops the throttling list and starts accepting proxy data normally."},{"location":"proxies/installing-proxies/#configuration","title":"Configuration","text":"<p>Zabbix actually has 2 proxy modes it supports. A Zabbix proxy can be Active or Passive just like the Zabbix agent with this exception that the agent can be both on the same time. So our first problem will be choose the Zabbix proxy that fits us. When we talk about active / passive we always talk about the proxy being active or passive. Active means the Proxy will initiate the connection to the Zabbix server, passive means it will be the Zabbix server taking contact with the proxy to gather the data.</p>"},{"location":"proxies/installing-proxies/#active-vs-passive-proxy","title":"Active vs Passive proxy","text":"<p>Zabbix proxies have been available since Zabbix 1.6, at that time they where available only as what we know today as <code>Active proxies</code>. Active means that the proxy would initiate the connection by itself to the Zabbix Server. Since version 1.8.3 passive proxies where introduced. This allowed the server to connect to the proxy. As mentioned before Zabbix agents can be both active and passive however proxies cannot be both so whe have to choose the way of the communication when we install a proxy. Just remember that choosing the proxy mode <code>active</code> or <code>passive</code> has no impact on how Zabbix agents can communicate with our proxy. It's perfectly fine to have an <code>active proxy</code> and a <code>passive agent</code> working together.</p>"},{"location":"proxies/installing-proxies/#active-proxy","title":"Active proxy","text":"<p>Let's first start with the setup of an active Proxy. Things should be very simple just make sure you have a VM that you can use to install a proxy.</p>"},{"location":"proxies/installing-proxies/#zabbix-gui-config","title":"Zabbix Gui config","text":"<p>First we will have to add the config in our Zabbix server frontend. From our Administration menu choose the menu <code>Proxies</code>.</p> <p></p> <p>Go to the upper right corner of the screen and press <code>Create proxy</code> You will now get a pop-up like shown here. Fill in the proxy name. I have chosen for <code>ProxyA</code> as it will be our active proxy. In case you like to configure the Passive proxy use the name <code>ProxyP</code>.</p> <p>You can use for yourself whatever you like. In production I would suggest to use names that make it easy for you to see it's a proxy and where the proxy belongs to. Ex: what vlan or what division ....</p> <p>Choose Proxy mode <code>Active</code> and fill in the IP of your virtualmachine if you like to install an active proxy. or Choose Proxy mode <code>Passive</code> and fill in the IP of your virtualmachine if you like to install a passive proxy.</p> <p></p> <p>When done press <code>Add</code> at the bottom.</p>"},{"location":"proxies/loadbalancing-proxies/","title":"Proxy loadbalancing","text":"<p>With the introduction of Zabbix 7.0 proxy loadbalancing has been introduced. After running the server in a native HA setup this was probably the next logical step to add. So like the name implies it's not just a simple HA solution but Zabbix proxies will loadbalance the hosts connected to them in an automated way.</p> <p>Zabbix has added something new to manage how we group those proxies together with the obvious name <code>Proxy groups</code> and it works for active and for passive proxies.</p> <p>Zabbix is able to detect 3 states in our group with proxies</p> <ul> <li>Online: This implies that everything is working as expected so there was communication with all the proxies.</li> <li>Offline: The minimum number of proxies defined in our proxy config group has not been met.</li> <li>Recovering: Some proxies are offline but we still have enough proxies online to not drop below the setting <code>minimum proxies</code>.</li> </ul>"},{"location":"proxies/loadbalancing-proxies/#configuration","title":"Configuration","text":"<p>The first thing we have to do is of course set up a couple of proxies. Here I will make use of 3 active proxies but feel free to use passives if you prefer or to do a mix. If you don't know how to install a proxy take a look at the installation guides for Active proxies or Passive proxies.</p> <p>I have set up 3 proxies for this example:</p> <ul> <li>ProxyA1</li> <li>ProxyA2</li> <li>ProxyA3</li> </ul> <p>each of them has a unique IP and hostname.</p> <p>So once you have set up 3 proxies and have added them into the frontend like we did for active and passive proxies you should have a similar looking config in your Administration frontend under Proxies.</p> <p></p> <p>Before we start to create a loadbalancing group there are a few steps we need to fix first. We need to monitor our proxies and we also need to install some Zabbix agents on the proxies. To install the agents we have to follow a few simple steps.</p> <p>On every proxy run the following commands:</p> <p><code>dnf install zabbix-agent</code></p> <p>We already installed the zabbix repository when we installed the proxy so no need to add it again. Now we have to adjust a few configuration options.</p> <ul> <li>Server: A list of IP adressess or DNS names pointing to our zabbix servers. This is for the Passive agent only</li> <li>ServerActive: A list of IP adressess or DNS names pointing to our zabbix servers. This is for the Active agent only.</li> <li>Hostname: The hostname of our proxy server</li> </ul> <p>So set the unique hostname and point every proxy for Server and or ServerActive to the IP of your Zabbix proxy and not the Zabbix server. Our Proxy is in this case acting as our Zabbix server.</p> <p>Do this for all the agents that are installed on the proxies and when done start the agents and enable them to start automatic.</p> <pre><code>systemctl enable zabbix-agent --now\n</code></pre> <p>Our next step will be to create our proxies in the Zabbix frontend to monitor them. For this we go to <code>Data collection -&gt; Hosts</code> and click on <code>Create host</code>.</p> <p>Next we have to fill in a few fields:</p> <ul> <li>Host name: Name of the agent on the proxy. I used the same name for my agent as on the proxy this makes it easy to see when a proxy is down. Ex ProxyA1, ProxyA2, ProxyA3</li> <li>Templates: We will want to monitor the OS and the proxy so we have to apply 2 templates : Linux by Zabbix agent and Zabbix proxy health</li> <li>Host groups: Here we choose a group to put our proxies is you can choose what you want this is just a logical grouping used for permissions.</li> <li>Interface: Every hosts needs to have an interface where we define the IP of the host and the port.</li> </ul> <p></p> <p>Make sure your proxies are properly monitored before you continue to the next step.</p>"},{"location":"proxies/loadbalancing-proxies/#configure-proxy-groups","title":"Configure proxy groups","text":"<p>As one of the final steps we have to Create a <code>proxy group</code> to gather all proxies we want to use for our loadbalancing. In our Zabbix menu go to <code>Administration -&gt; Proxy groups</code> Click in the upper right corner on <code>Create proxy group</code>.</p> <p>Here we have to define a few options:</p> <ul> <li>Name : The name of our proxy group. This can be anything you like I have chosen for the group <code>Active proxies</code> because I have setup 3 proxies for this test.</li> <li>Failover period: Period in seconds before failover is executed (1m by default; allowed range 10s-15m).</li> <li>Minimum number of proxies: The minimum number of online proxies required for the group to be online (1 by default; allowed range 1-1000). Since we have 3 proxies I added 2 as minimum.</li> </ul> <p></p> <p>Next we have to configure our 3 existing proxies to join this proxy group. Go in the Zabbix menu to <code>Administration -&gt; Proxies</code> click on every proxy in the list you would like to add to the group and enter following details.</p> <p></p> <ul> <li>Proxy group: <code>Active proxies</code> (or whatever name you gave to your proxy group.)</li> <li>Proxy address: The active proxy ip, If specified then active proxy requests are only accepted from this list of comma-delimited IP addresses, optionally in CIDR notation, or DNS names of active Zabbix proxy.</li> <li>Address for active agents: The address and port where active agents will connect to. Usually same IP as the IP from the proxy but not needed to be the same.</li> <li>Proxy Mode: Configure if it proxy is Active or Passive </li> </ul> <p></p> <p>The next step is now to reconfigure our Agents on our proxies so that they are monitored by The proxy group <code>Active Proxies</code> instead of only the proxy they run on. Go to <code>Data collection -&gt; Hosts</code> and click on every host that you have configured to monitor the proxy agent. Switch Monitored by <code>Proxy</code> to <code>Proxy group</code>.</p> <p></p> <p>Because our proxies will accept active connections make sure to open firewall port 10051 on all the proxies and because we have Agents that we monitor passive make sure port 10050 is also open</p> <pre><code>firewall-cmd --add-port=10051/tcp --permanent\nfirewall-cmd --add-port=10050/tcp --permanent\nfirewall-cmd --reload\n</code></pre> <p>Now there is another step that we need to fix. On our Zabbix Agents we need to add all the proxy addresses to our Zabbix agents configuration.</p> <p>open the file <code>/etc/zabbix/zabbix_agentd.conf</code> and add a comma delimited list of IPs for <code>Server</code> and <code>ServerActive</code> pointing to all your proxies This way the agent can sent active data to the proxies or it can be polled by all 3 proxies</p> Note <p>Don't forget to restart your agents and proxies when making changes in the configuration files.</p>"},{"location":"proxies/loadbalancing-proxies/#loadbalancing-and-ha","title":"Loadbalancing and HA","text":"<p>Ok now that we have configured our proxies and agents properly and made a proxy group everything is up and running. When you go to <code>Data Collection -&gt; Hosts</code> you will see that your proxie agents  are monitored by the group <code>Active proxies</code>. It is possible that your ProxyA1 is monitored by ProxyA2 or A3 so don't panic if your dashboard is not the same. Zabbix proxies will besides HA also do loadbalancing.</p> <p></p> <p>It's time to test this so let us stop one of our proxies for example ProxyA2</p> <pre><code>systemctl stop zabbix-proxy\n</code></pre> <p>Since we configured our Proxy group failover period to be 1m it can take 1m before you will see changes</p> <p></p> <p>When you look at the log files of the agent you will see that he is not able to connect the proxy anymore and that he will be redirected to another proxy in the group</p> <pre><code>  1391:20240528:115433.344 Unable to connect to [xxx.xxx.xxx.xxx]:10051 [cannot connect to [[xxx.xxx.xxx.xxx]:10051]: connection error (POLLERR,POLLHUP)]\n  1391:20240528:115433.344 Unable to send heartbeat message to [xxx.xxx.xxx.xxx]:10051 [cannot connect to [[xxx.xxx.xxx.xxx]:10051]: connection error (POLLERR,POLLHUP)]\n  1392:20240528:115433.344 Unable to connect to [xxx.xxx.xxx.xxx]:10051 [cannot connect to [[xxx.xxx.xxx.xxx]:10051]: connection error (POLLERR,POLLHUP)]\n  1392:20240528:115433.353 Unable to connect to [xxx.xxx.xxx.xxx]:10051 [cannot connect to [[xxx.xxx.xxx.xxx]:10051]: connection error (POLLERR,POLLHUP)]\n  1392:20240528:115433.355 Unable to send heartbeat message to [xxx.xxx.xxx.xxx]:10051 [sequential redirect responses detected]\n  1390:20240528:115433.407 Unable to connect to [xxx.xxx.xxx.xxx]:10051 [cannot connect to [[xxx.xxx.xxx.xxx]:10051]: connection error (POLLERR,POLLHUP)]\n  1390:20240528:115433.408 Unable to connect to [xxx.xxx.xxx.xxx]:10051 [cannot connect to [[xxx.xxx.xxx.xxx]:10051]: connection error (POLLERR,POLLHUP)]\n  1390:20240528:115433.408 Unable to send heartbeat message to [xxx.xxx.xxx.xxx]:10051 [sequential redirect responses detected]\n  1392:20240528:115533.508 Successfully sent heartbeat message to [xxx.xxx.xxx.xxx]:10051\n  1390:20240528:115533.562 Successfully sent heartbeat message to [xxx.xxx.xxx.xxx]:10051\n  1392:20240528:115558.583 Active check configuration update from [xxx.xxx.xxx.xxx:10051] is working again\n  1391:20240528:115558.598 Active check configuration update from [xxx.xxx.xxx.xxx:10051] is working again\n</code></pre> Warning <p>There are a few limitations when using proxies in HA/Loadbalancing. - SNMP traps are not supported by proxies in proxy group. - Checks depending on external configuration must have the same configuration on all proxies in proxy group. That includes:   - external checks - scripts;   - database checks - odbc configuration.   - When monitored in proxy group the VMware hosts will be randomly spread between proxies in the group and will cause each proxy to cache all VMware data causing additional load to vCenter.</p>"},{"location":"proxies/passive-proxy/","title":"Passive proxy","text":""},{"location":"proxies/passive-proxy/#passive-proxy","title":"Passive proxy","text":"<p>Lets try to setup our <code>passive proxy</code>. Things should be very simple just make sure you have a VM that you can use to install a proxy.</p>"},{"location":"proxies/passive-proxy/#zabbix-gui-config","title":"Zabbix Gui config","text":"<p>First we will have to add the config in our Zabbix server frontend. From our Administration menu choose the menu <code>Proxies</code>.</p> <p></p> <p>Go to the upper right corner of the screen and press <code>Create proxy</code> You will now get a pop-up like shown here. Fill in the proxy name. I have chosen for ProxyP as it will be our passive proxy. You can use for yourself whatever you like. In production I would suggest to use names that make it easy for you to see it's a proxy and where the proxy belongs to. Ex: what vlan or what division ....</p> <p>Choose Proxy mode <code>Passive</code> and fill in the IP of your virtualmachine. Here besides IP we also have the option to specify a port. This is standard 10051, Zabbix proxy will listen on the same port as our Zabbix server does.</p> <p></p> <p>When done press <code>Add</code> at the bottom.</p>"},{"location":"proxies/passive-proxy/#zabbix-proxy-config","title":"Zabbix Proxy config","text":"<p>Ok now that this is done lets go to the VM where we like to install our proxy and add the Zabbix repository so we can install our needed packages.</p> <pre><code>rpm -Uvh https://repo.zabbix.com/zabbix/7.0/rhel/9/x86_64/zabbix-release-7.0-1.el9.noarch.rpm\n</code></pre> <p>Zabbix provides the proxy with the option to connecto to a SQLiteDB this can be enough for most setups. In case you need more performance from the DB there is also the option to install the Proxy with a PostgreSQL or MySQL DB. We will cover how to do with the SQLite db as this is the most easy way. We show you later what to look for if installing a proxy With MySQL or PostgreSQL.</p> <pre><code>dnf install zabbix-proxy-sqlite3 zabbix-selinux-policy -y\n</code></pre> <p>Once this is done let's change the proxy configuration by editing the proxy configuration file.</p> <pre><code>vi /etc/zabbix/zabbix_proxy.conf\n</code></pre> <p>Here a few parameters needs to be changed before we can use our proxy</p> <ul> <li>ProxyMode=</li> <li>Server=</li> <li>DBName=</li> <li>Hostname=</li> </ul> <p>Change them according to your settings:</p> <ul> <li>ProxyMode=1</li> <li>Server=&lt; zabbix server ip &gt;</li> <li>Hostname=ProxyA ( or the name you have used in your Zabbix frontend for the Proxy )</li> <li>DBName=/tmp/zabbix_proxy.db</li> </ul> <p>The parameters are explained as follows:</p> <ul> <li>ProxyMode: This is standard 0 for Active proxy we have to change this to 1 this will turn our proxy into a Passive proxy. Be careful there is a <code>#</code> in front of the parameter this needs to be removed. If not Zabbix will not read this value in stay in Active mode.</li> <li>Server: Same as with passive agents. We have to specify the IP or DNS name or a list of IPs from zabbix servers that are allowed to connect to this proxy.</li> <li>DBName: This depends a bit, it is usually the name of the database like we configured on the Zabbix server in case we use PostgreSQL or MySQL. However with SQLite we need to specify dbname and location.           Username and Password will be ignored when using SQLite. Just make sure SELinux is properly configured else the DB will not be created. It can help to put SELinux in permissive first.</li> <li>Hostname: This parameter is used by the proxy to identify itself to the Zabbix server. This needs to be the same name we have registered in the Zabbix frontend.</li> </ul> Tip <p>Another parameter that can be useful is ListenPort this is usually 10051 for Active and Passive proxies. But if you run for some reason the proxy on the zabbix server then you have to change this port to something else.</p> Note <p>With Zabbix 7 a new parameter has been introduced on the proxy side <code>ProxyBufferMode</code>. This is standard set to <code>Hybrid</code> and is what is recommended. With Hybrid the proxy will buffer will work in memory and fallback to the database if needed. The documentation states that the proxy buffer normally works like in memory mode until it runs out of memory or the oldest record exceeds the configured age. If that happens the buffer is flushed to database and it works like in disk mode until all data have been uploaded and it starts working with memory again. On shutdown the memory buffer is flushed to database.</p> Note <p>Don't worry about the file for the db not existing Zabbix will create it by itself.</p> Warning <p>If you use DNS names make sure there is DNS caching configured on the machine. If not Zabbix will do a lookup on the DNS server everytime it wants to make a connection.</p> <p>So now that we have configured everything let's start our proxy. First disable SELinux as it will block a few things this can be done by running <code>setenforce 0</code>. This is only temporary and either you keep it disabled permanent or you fix the config. An easy way is to use <code>sealert -a /var/log/audit/audit.log</code>. Once this is done there is only 1 thing that rests us to do and that is start and enable the zabbix-proxy service.</p> <pre><code>systemctl enable zabbix-proxy --now\n</code></pre> <p>If you look now in the frontend of the Zabbix server you will see that the proxy we have configured is Offline.</p> <p></p> <p>This is because we have configured a Passive agent remember we had to specify the IP and the Port in our Zabbix frontend? So we need to open port 10051/tcp for our zabbix server.</p> <pre><code>firewall-cmd --new-zone=proxy-access --permanent\nfirewall-cmd --zone=proxy-access --add-source=&lt;zabbix server ip&gt; --permanent\nfirewall-cmd --zone=proxy-access --add-port=10051/tcp --permanent\nfirewall-cmd --reload\n</code></pre> <p>We can now check our access rules in the firewall:</p> <pre><code># firewall-cmd --zone=proxy-access --list-all\nproxy-access (active)\n  target: default\n  icmp-block-inversion: no\n  interfaces:\n  sources: xxx.xxx.xxx.xxx\n  services:\n  ports: 10051/tcp\n  protocols:\n  forward: no\n  masquerade: no\n  forward-ports:\n  source-ports:\n  icmp-blocks:\n  rich rules:\n</code></pre> <p>When we now look at our frontend our proxy should be online </p> <p></p> Note <p>If you like to install the proxy with MySQL or PostgreSQL as database then it is important to also install the package <code>zabbix-sql-scripts</code>. There is a special shema to be used for the proxy database that can be found under <code>/usr/share/zabbix-sql-scripts/mysql|postgresql&gt;/proxy.sql</code>. Also in this case don't forget to edit the zabbix_proxy.conf file and add DBHost, DBUser, DBPassword and DBSchema as needed.</p>"},{"location":"security/securing-zabbix/","title":"Securing Zabbix Frontend","text":"<p>The frontend is what we use to login into our system. The Zabbix frontend will connect to our Zabbix server and our database. But we also send information from our laptop to the frontend. It's important that when we enter our credentials that we can do this in a safe way. So it makes sense to make use of certificates and one way to do this is by making use of Self-Signed certificates.</p> <p>To give you a better understanding of why your browser will warn you when using self signed certificates, we have to know that when we request an SSL certificate from an official Certificate Authority (CA) that you submit a Certificate Signing Reauest (CSR) to them. They in return provide you with a Signed SSL certificate. For this they make use of their root certificate and private key. Our browser comes with a copy of the root certificate (CA) from various authorities or it can access it from the OS. This is why our self signed certificates are not trusted by our browser, we don't have any CA validation. Our only workaround is to create our own root certificate and private key.</p>"},{"location":"security/securing-zabbix/#understanding-the-concepts","title":"Understanding the concepts","text":""},{"location":"security/securing-zabbix/#how-to-create-an-ssl-certificate","title":"How to create an SSL certificate","text":""},{"location":"security/securing-zabbix/#how-ssl-works-client-server-flow","title":"How SSL works - Client - Server flow","text":"Note <p>Borrowed the designs from https://www.youtube.com/watch?v=WqgzYuHtnIM this video explains well how SSL works.</p>"},{"location":"security/securing-zabbix/#securing-the-frontend-with-self-signed-ssl-on-nginx","title":"Securing the Frontend with Self signed SSL on Nginx","text":"<p>To configure this there are a few steps that we need to follow:</p> <pre><code>- Generate a private key for the CA ( Certificate Authority )\n- Generate a root certficate\n- Generating CA-Authenticated Certificates\n- Generate a Certificate Signing Request (CSR)\n- Generate an X509 V3 certificate extension configuration file\n- Generate the certificate using our CSR, the CA private key, the CA certificate, and the config file\n- Copy the SSL certificates to our Virtual Host\n- Adapt your Nginx Zabbix config\n</code></pre>"},{"location":"security/securing-zabbix/#generate-a-private-key-for-the-ca","title":"Generate a private key for the CA","text":"<p>First step is to make a folder named SSL so we can create our certificates and safe them:</p> <pre><code>&gt;- mkdir ~/ssl\n&gt;- cd ~/ssl\n&gt;- openssl ecparam -out myCA.key -name prime256v1 -genkey\n</code></pre> <p>Let's explain all the options;</p> <ul> <li>openssl : The tool to use the OpenSSL library, this library provides us with cryptographic functions and utilities.</li> <li>out myCA.key : This part of the command specifies the output file name for the generated private key. </li> <li>name prime256v1: Name of the elliptic curve; X9.62/SECG curve over a 256 bit prime field</li> <li>ecparam: This command is used to manipulate or generate EC parameter files.</li> <li>genkey: This option will generate a EC private key using the specified parameters.</li> </ul>"},{"location":"security/securing-zabbix/#generate-a-root-certificate","title":"Generate a Root Certificate","text":"<pre><code>openssl req -x509 -new -nodes -key myCA.key -sha256 -days 1825 -out myCA.pem\n</code></pre> <p>Let's explain all the options;</p> <ul> <li>openssl: The command-line tool for OpenSSL.</li> <li>req: This command is used for X.509 certificate signing request (CSR) management.</li> <li>x509: This option specifies that a self-signed certificate should be created.</li> <li>new: This option is used to generate a new certificate.</li> <li>nodes: This option indicates that the private key should not be encrypted. It will generates a private key without a passphrase, making it more convenient but potentially less secure.</li> <li>key myCA.key: This specifies the private key file (myCA.key) to be used in generating the certificate.</li> <li>sha256: This option specifies the hash algorithm to be used for the certificate. In this case, SHA-256 is chosen for stronger security.</li> <li>days 1825: This sets the validity period of the certificate in days. Here, it\u2019s set to 1825 days (5 years).</li> <li>out myCA.pem: This specifies the output file name for the generated certificate. In this case, \u201cmyCA.pem.\u201d</li> </ul> <p>The information you enter is not so important but it's best to fill it in as good as possible. Just make sure you enter for CN you IP or DNS.</p> <pre><code>You are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [XX]:BE\nState or Province Name (full name) []:vlaams-brabant\nLocality Name (eg, city) [Default City]:leuven\nOrganization Name (eg, company) [Default Company Ltd]:\nOrganizational Unit Name (eg, section) []:\nCommon Name (eg, your name or your server's hostname) []:192.168.0.134\nEmail Address []:\n</code></pre>"},{"location":"security/securing-zabbix/#generating-ca-authenticated-certificates","title":"Generating CA-Authenticated Certificates","text":"<p>It's probably good practice to use de dns name of your webiste in the name fo the private key. As we use in this case no DNS but an IP address I will use the fictive dns zabbix.mycompany.internal.</p> <pre><code>openssl genrsa -out zabbix.mycompany.internal.key 2048\n</code></pre>"},{"location":"security/securing-zabbix/#generate-a-certificate-signing-request-csr","title":"Generate a Certificate Signing Request (CSR)","text":"<pre><code>openssl req -new -key zabbix.mycompany.internal.key -out zabbix.mycompany.internal.csr\n</code></pre> <p>You will be asked the same set of questions as above. Once again your answers hold minimal significance and in our case no one will inspect the certificate so they matter even less.</p> <pre><code>You are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [XX]:BE\nState or Province Name (full name) []:vlaams-brabant\nLocality Name (eg, city) [Default City]:leuven\nOrganization Name (eg, company) [Default Company Ltd]:\nOrganizational Unit Name (eg, section) []:\nCommon Name (eg, your name or your server's hostname) []:192.168.0.134\nEmail Address []:\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []:\nAn optional company name []:\n</code></pre>"},{"location":"security/securing-zabbix/#generate-an-x509-v3-certificate-extension-configuration-file","title":"Generate an X509 V3 certificate extension configuration file.","text":"<pre><code># vi zabbix.mycompany.internal.ext\n</code></pre> <p>Add the following lines in your certificate extension file. Replace IP or DNS with your own values.</p> <pre><code>authorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName = @alt_names\n\n[alt_names]\nIP.1 = 192.168.0.133\n#DNS.1 = MYDNS (You can use DNS if you have a dns name if you use IP then use the above line)\n</code></pre>"},{"location":"security/securing-zabbix/#generate-the-certificate-using-our-csr-the-ca-private-key-the-ca-certificate-and-the-config-file","title":"Generate the certificate using our CSR, the CA private key, the CA certificate, and the config file","text":"<pre><code>openssl x509 -req -in zabbix.mycompany.internal.csr -CA myCA.pem -CAkey myCA.key \\\n-CAcreateserial -out zabbix.mycompany.internal.crt -days 825 -sha256 -extfile zabbix.mycompany.internal.ext\n</code></pre>"},{"location":"security/securing-zabbix/#copy-the-ssl-certificates-to-our-virtual-host","title":"Copy the SSL certificates to our Virtual Host","text":"<pre><code>cp zabbix.mycompany.internal.crt /etc/pki/tls/certs/. \ncp zabbix.mycompany.internal.key /etc/pki/tls/private/.\n</code></pre>"},{"location":"security/securing-zabbix/#import-the-ca-in-linux-rhel","title":"Import the CA in Linux (RHEL)","text":"<p>We need to update the CA certificate\u2019s, run the below command to update the CA certs.</p> <pre><code>cp myCA.pem /etc/pki/ca-trust/source/anchors/myCA.crt\nupdate-ca-trust extract\n</code></pre>"},{"location":"security/securing-zabbix/#import-the-ca-in-osx","title":"Import the CA in OSX","text":"<ul> <li>Open the macOS Keychain app.</li> <li>Navigate to File &gt; Import Items</li> <li>Choose your private key file (i.e., myCA.pem)</li> <li>Search for the \u201cCommon Name\u201d you provided earlier.</li> <li>Double-click on your root certificate in the list.</li> <li>Expand the Trust section.</li> <li>Modify the \u201cWhen using this certificate:\u201d dropdown to \u201cAlways Trust\u201d.</li> <li>Close the certificate window.</li> </ul>"},{"location":"security/securing-zabbix/#import-the-ca-in-windows","title":"Import the CA in Windows","text":"<ul> <li>Open the \u201cMicrosoft Management Console\u201d by pressing Windows + R, typing mmc, and clicking Open.</li> <li>Navigate to File &gt; Add/Remove Snap-in.</li> <li>Select Certificates and click Add.</li> <li>Choose Computer Account and proceed by clicking Next.</li> <li>Select Local Computer and click Finish.</li> <li>Click OK to return to the MMC window.</li> <li>Expand the view by double-clicking Certificates (local computer).</li> <li>Right-click on Certificates under \u201cObject Type\u201d in the middle column, select All Tasks, and then Import.</li> <li>Click Next, followed by Browse. Change the certificate extension dropdown next to the filename field to All Files (.) and locate the myCA.pem file.</li> <li>Click Open, then Next.</li> <li>Choose \u201cPlace all certificates in the following store.\u201d with \u201cTrusted Root Certification Authorities store\u201d as the default. Proceed by clicking Next, then Finish, to finalize the wizard.</li> <li>If all went well you should find your certficate under Trusted Root Certification Authorities &gt; Certificates</li> </ul> Warning <p>You also need to import the myCA.crt file in your OS we are not an official CA so we have to import it in our OS and tell it to trust this Certificate. This action depends on the OS you use.</p> <p>As you are using OpenSSL, you should also create a strong Diffie-Hellman group, which is used in negotiating Perfect Forward Secrecy with clients. You can do this by typing:</p> <pre><code>openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n</code></pre>"},{"location":"security/securing-zabbix/#adapt-your-nginx-zabbix-config","title":"Adapt your Nginx Zabbix config","text":"<p>Add the following lines to your Nginx configuration, modifying the file paths as needed. Replace the the already existing lines with port 80 with this configuration. This will enable SSL and HTTP2.</p> <pre><code># vi /etc/nginx/conf.d/zabbix.conf\n</code></pre> <pre><code>server {\n        listen          443 http2 ssl;\n        listen          [::]:443 http2 ssl;\n        server_name     &lt;ip qddress&gt;;\n        ssl_certificate /etc/ssl/certs/zabbix.mycompany.internal.crt;\n        ssl_certificate_key /etc/pki/tls/private/zabbix.mycompany.internal.key;\n        ssl_dhparam /etc/ssl/certs/dhparam.pem;\n</code></pre> <p>To redirect traffic from port 80 to 443 we can add the following lines above our https block:</p> <pre><code>server {\n       listen         80;\n       server_name    _; #dns or ip is also possible\n       return         301 https://$host$request_uri;\n}\n</code></pre>"},{"location":"security/securing-zabbix/#restart-all-services-and-allow-https-traffic","title":"Restart all services and allow https traffic","text":"<pre><code>systemctl restart php-fpm.service\nsystemctl restart nginx\n\nfirewall-cmd --add-service=https --permanent\nfirewall-cmd --reload\n</code></pre> <p>When we go to our url <code>http://&lt;IP or DNS&gt;/</code> we get redirected to our <code>https://</code> page and when we check we can see that our site is secure:</p> <p></p> Note <ul> <li>To be even more secure have a loot at https://cipherlist.eu/ this page maintains a list of strong ciphers that you can use so secure your Nginx even more.</li> <li>You can test your nginx config with 'nginx -t' before you restart.</li> <li>For HTTP/2 to work you need atleast nginx 1.9.5 or later</li> </ul>"},{"location":"security/securing-zabbix/#securing-the-frontend-with-lets-encrypt-on-nginx","title":"Securing the Frontend with Let's Encrypt  on Nginx","text":""},{"location":"visualising/Visualising-our-problems/","title":"Visualising our problems","text":""},{"location":"vmware/vmware-monitoring/","title":"VMware monitoring with Zabbix","text":"<p>Zabbix can automatically discover Virtual Machines and VMware hypervisors based on Low-level discovery rules. Zabbix provides a set of templates to do this out of the box to make life more easy. In this chapter, we will see how we can configure this.</p> <p>Zabbix requires VMware vCenter or vSphere to be at least 5.1 or higher but always check the official documentation to be sure this hasn't changed.</p>"},{"location":"vmware/vmware-monitoring/#what-do-we-need","title":"What do we need ?","text":"<ul> <li>VMware vCenter or vSphere to be at least 5.1</li> <li>A monitoring account with RO access to the API</li> <li>Enable performance counter statistics and requests on the VMware side as well.</li> </ul> <p>Before we start it's important to know that Zabbix does not start any processes to start monitoring VMware out of the box if we do not configure this. So the first thing we have to do is edit out <code>zabbix_server.conf</code> file. This file can be found here : <code>/etc/zabbix/zabbix_server.conf</code>.</p> <p>Look for the parameter StartVMwareCollectors, edit this line, or add a new line where you add <code>StartVMwareCollectors=2</code> and restart the server service. Why do we add 2? Is it always 2? Of course not else it would be hardcoded. But Zabbix recommends not going below 2 and it should also not exceed twice the amount of monitored VMware services.</p> <p>So we can use the next formula to calculate the optimal value?</p> <p><code>Amount of services &lt; StartVMwareCollectors &lt; (Amount of services * 2)</code></p> <p>So for the setups with 1 VMware service we will set it to 2 and with instances where we have 3 we will set it to 5 </p> Note <p>A VMware instance can be a vSphere or vCenter instance and not a virtual machine or hypervisor. So the number of collectors depends on the data points we use to collect values from.</p>"},{"location":"vmware/vmware-monitoring/#configuration","title":"Configuration","text":"<p>The first step is to create a new host. If you are unsure how to take a look at the topic Zabbix hosts. Only adding a <code>Host name</code> should be ok we don't need to configure any interfaces. Once this is done before you press <code>Add</code> go to the tab <code>Macros</code>.</p> <p></p> <p>Add the following macros :</p> <ul> <li>{$VMWARE.USERNAME}</li> <li>{$VMWARE.PASSWORD}</li> <li>{$VMWARE.URL}</li> </ul> <p></p> Tip <p>Do not use the admin account of your VMware VCenter but create a new monitoring account with RO rights to read out the information and use a secret macro for the password and even maybe the username.</p> <p>Once done go back to the <code>Host</code> tab and fill in the <code>Host group</code> and the correct template. Zabbix provides 2 templates to choose from. </p> <ul> <li>VMware FQDN : The template making use of the FQDN for the VMs (recommended) but:</li> <li>Every Monitored VM should have a unique OS name compliant with the FQDN rules.</li> <li> <p>VMware Tools must be installed on every machine</p> </li> <li> <p>VMware : The template making use of the UUID for every VM.</p> </li> <li> <p>This one is recommended if the FQDN requirements cannot be met.</p> </li> <li> <p>VMWare Guest : Will monitor the virtual machines</p> </li> <li>VMWare Hypervisor : Will monitor the hypervisors</li> <li>These 2 templates should not be linked manually Zabbix will handle this for you !</li> </ul> <p>Zabbix will discover VMware clusters, hypervisors, data stores, and virtual machines. It's possible to control which parts will be monitored by going to the template to the Discovery and disabling the Discovery rules you don't need.</p> <p>It's also possible to change the configuration of our host prototype. Ex: we can configure the host interface to <code>Inherit</code> or to create the interface with <code>Custom</code> data. A list with <code>MACROS</code> can be found here https://www.zabbix.com/documentation/7.0/en/manual/vm_monitoring/discovery_fields</p> <p></p> <p>As you have may have noticed already, in the Zabbix server configuration file there are a few more parameter that we can tweak.</p> <ul> <li>VMWareFrequency</li> <li>How often Zabbix will connect to the VMWare service to collect new data.</li> <li>VMwarePerfFrequency</li> <li>How often Zabbix will connect to the VMWare service to collect performance data.</li> <li>VMWareTimeout</li> <li>This is the maximum number of seconds that a VMWare collector will wait for a response from the VMWare vCenter or Hypervisor</li> <li>VMwareCacheSize</li> <li>This is the shared memory size for storing VMware data. A VMware internal check zabbix[vmware,buffer,...] can be used to monitor the VMware cache usage. This should be verified if enabled in your <code>zabbix server healt template</code>. The size of the cache will depend on the size of your VMware setup.</li> </ul> Note <p>It's best to keep VMWareFrequency and VMwarePerfFrequency with the same values. Using values where <code>VMWareFrequency</code> is less then <code>VMwarePerfFrequency</code> will lead to strange looking graphs.</p> Note <p>If config.vpxd.stats.maxQueryMetrics is invalid or exceeds the maximum number of characters permitted error, add a config.vpxd.stats.maxQueryMetrics parameter to the vCenter Server settings. The value of this parameter should be the same as the value of maxQuerysize in VMware's web.xml file.</p>"},{"location":"vmware/vmware-monitoring/#available-metrics","title":"Available metrics","text":"<p>After some time in latest data you should see for all the items data being populated. It can take a while before every item is populated it depends a bit on the order of the LLD rule being executed.</p> <p>These are the items that are configure with our standard Zabbix VMware template. But the template does not cover all items and more items might be added over time. A list of all keys can be found in the online documentation. https://www.zabbix.com/documentation/7.0/en/manual/vm_monitoring/vmware_keys Those items are <code>simple checks</code> so when creating a new item don't forget to select the correct item type.</p>"},{"location":"vmware/vmware-monitoring/#internal-working","title":"Internal working","text":"<p>We know now that Zabbix can monitor VMware out of the box and the setup for it is very easy. There is a lot of information that we can retreive but to get to this information there is a complex process behind it. To tune this process we have seen that there are parameters that can be set like VMWareFrequency, VMwarePerfFrequency, VMWareTimeout and VMwareCacheSize.</p> <p>The next diagram shows us how Zabbix collects the data and end up with the data in it's history Cache.</p> <p></p> <p>Here we can see the different steps involving in the data flow when monitoring VMWare with Zabbix. Connections are made from the VMWare collector to the SDK interface. The collectors will grab the data and place it in a special VMWare chache. Pollers then will look into the cache and grab the data from it and send it to the preprocessors. The data after preprocessin is then placed in the Zabbix history cache. In case of a proxy it will be sent to the Zabbix server.</p> Note <p>VMwarePerfFrequency and VMWareFrequency are both set standard to 60 seconds wich is fine for small to medium setups lowering this number could create some overload on the VMWare servers. On a larger instance it's probably best to increase then together with the VMWareTimeout parameter.</p>"},{"location":"vmware/vmware-monitoring/#debugging","title":"Debugging","text":"Warning <p>It can take some time before you will see all the VMs in your Zabbix setup popup. If you want to know what the Zabbix server or Proxy (if you monitor VMware over a proxy then you have to adjust all config on the proxy) is doing then you can increase the debug level. This can be done on they fly without changing the debug parameter in the zabbix_server.conf file. Just one the console run the following command to increase logging for all the vmware collectors.</p> <pre><code>zabbix_server -R log_level_increase=\"vmware collector\"\n</code></pre> <p>In case you like to increase logging for only collector 2 then you could run the following command:</p> <pre><code>zabbix_server -R log_level_increase=\"vmware collector,2\"\n</code></pre> Note <p>If you see a message like \"config.vpxd.stats.maxQueryMetrics' is invalid or exceeds the maximum number of characters permitted**\" in the debug don't be alarmed right away. The message is a bit confusing. Have alook at this ticket as it will explain that its not always a problem. https://support.zabbix.com/browse/ZBX-24499</p>"},{"location":"websites/monitoring-websites/","title":"Monitoring websites","text":""},{"location":"windows/monitoring-windows/","title":"Monitoring Windows","text":""}]}