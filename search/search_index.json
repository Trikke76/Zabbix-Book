{"config":{"lang":["en","fr","de","it","nl","pt","es","th","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is this book about ?","text":"<p>Welcome, and thank you for your interest in this Zabbix guide.</p> <p>In the past, I authored the Zabbix Cookbook and co-authored Zabbix 4 Network Monitoring with Richards, both published by Packt.</p> <p> </p> <p>The Zabbix Cookbook was one of the first comprehensive resources for Zabbix users, though it's now somewhat outdated. It has since been succeeded by the Zabbix 7 IT Infrastructure Monitoring Cookbook, written by Brian and Nathan\u2014two individuals I highly recommend and enjoy collaborating with.</p> <p>Packt offers a wide range of other Zabbix-related books. You can browse the full collection here. Additionally, for those looking for non-English titles, Amazon provides Zabbix books in languages such as Chinese, Spanish, and more, published by Packt and other publishers. Find them here.</p> <p>As Zabbix is an open-source product, my goal was never to make money from the books I wrote. This led me to reflect on how I could approach things differently. I wanted to create a book that would be freely available and updated with each new version of Zabbix.</p> <p>Being a strong advocate of documentation in Markdown or AsciiDoc, I decided to share the book in a Git repository, using Markdown as the format. The only challenge left was how to present those Markdown files in a reader-friendly way, like a traditional book. After some research, I discovered MkDocs, a Python-based library that converts Markdown files into HTML and can be templated. With MkDocs, the problem was solved, and a new book was born.</p>"},{"location":"#who-am-i","title":"Who Am I?","text":"<p>My name is Patrik Uytterhoeven, and I work for a Belgian company called Open-Future. I joined Open-Future in January 2013, and that's when my journey with Zabbix began. The company provided me with the opportunity to grow my expertise and become a certified Zabbix trainer. As of this year, I\u2019ve been a Zabbix trainer for 10 years.</p> <p>If you're interested in attending one of my trainings, you can register at www.open-future.be. You might wonder, \"Why take a training if I can read this book for free?\" While books provide extensive information on setup and configuration, trainings offer valuable insights, tips, and feedback that you won\u2019t find easy in a book. Books simply can't cover every detail.</p>"},{"location":"#what-operating-system-do-i-need","title":"What Operating System Do I Need?","text":"<p>As someone who primarily works with RHEL-based systems, I believe RHEL is the optimal choice for production environments. For this reason, I\u2019ve chosen to focus on one of its free forks. Zabbix is supported on Ubuntu, Debian, SUSE, Raspberry Pi, and other systems, and it can be compiled on any Unix-based OS. However, it's nearly impossible to cover every OS in this book. Since the book is open-source and hosted on Git, feel free to contribute code for your preferred distribution! In this book, I will use Rocky Linux 9, but the instructions should apply to most other installations as well.</p>"},{"location":"#what-version-of-zabbix-is-used-in-this-book","title":"What Version of Zabbix Is Used in This Book?","text":"<p>This book focuses on Zabbix 7.0, as it is the latest LTS (Long Term Support) release. Most of the content will be relevant to other versions, though minor changes may exist. In the future, if the community supports updating this book, it would be fantastic to create a version for every LTS release.</p>"},{"location":"#how-to-use-this-book","title":"How to Use This Book","text":"<p>This book is designed to cover a wide range of topics. If you feel something is missing, please reach out or make a pull request.</p> <p>You don\u2019t need to start at page one and read through to the end. Some readers may seek basic knowledge, while others might want to skip directly to more advanced topics. I aim to make this book useful for everyone by providing detailed explanations and clear steps for each topic.</p> <p>Throughout the book, you'll encounter code snippets. These will be presented in code blocks like the one below:</p> <pre><code># sudo yum install zabbix-server-mysql\n</code></pre> <p>Notes to some useful documentation will be added at the bottom of the page.</p> <p>Here is a simple footnote<sup>1</sup>. With some additional text after it.</p> <p>In case there is some important information to share I will add notes in the documentation like can be seen here :</p> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Info <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Tip <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Question <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Warning <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Bug <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Example <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <ol> <li> <p>My reference.\u00a0\u21a9</p> </li> </ol>"},{"location":"Guidlines-for-translations/","title":"Guidelines For Translations","text":""},{"location":"Guidlines-for-translations/#how-to-tranlate","title":"How to tranlate","text":"<ul> <li>Index pages are in the docs folder the english version is <code>index.md</code> if we like to tranlate to another language we need to name the page <code>index.&lt;language code&gt;.md</code>. For example index.fr.md, the correct codes are in mkdocs.md    The book images have to be created in a folder in mkdocs with the language code Ex: nl, fr</li> <li>Translation of the menu can be done in mkdocs.yml. Create the option nav_translations: and translate the menu structure.   Example:</li> </ul> <pre><code>- locale: nl\n  name: Nederlands\n  build: true\n  nav_translations:\n    Welcome: Welkom\n    Getting started: Aan de slag\n    The basics: De basis\n    Problem detection: Probleem detectie\n</code></pre> <ul> <li>If you like to translate a page then create a file with the same name as the original but add the country code before .md Ex : Requirements.md will become Requirements.nl.md. If you don't make screenshots with translations then use the same images in the image dir.</li> <li>If you like to add new screenshots create a new folder image. Ex: image/ becomes image.nl/"},{"location":"Guidlines-for-translations/#how-to-write-a-topic","title":"How to write a topic","text":"<ul> <li>All is written in markdown , HTML is supported but try to avoid if not needed</li> <li>Start the page with the Header #</li> <li>When you write a topic start with an introduction what the topic is about</li> <li>Give an overview of the topics that you will cover</li> <li>Add visuals if possible this explains better to people how things work</li> <li>Create a how to so that people see how they can do this </li> <li>place the images in a /image folder <ul> <li>You can use the english screenshots in the image folder or create your own screenshots in local language use /image. ex: /image.fr <li>Close every topic with --- this will draw a horizontal line </li>"},{"location":"Guidlines-for-translations/#translation-table","title":"Translation Table","text":"<ul> <li>This table can be used to track what has been finished and is ready for translation. For this we mark the page with . </li> <li>Once other languages are translated we mark them with </li> <li>In case a page gets updated with new information after pages are already translated we mark the page with  and remove the  from the tranlated pages.</li> </ul> <ul> <li>Webpage is ready for translation: </li> <li>Webpage is translated : </li> <li>Webpage has been updated after translation: </li> <li>Webpage is still not finished : </li> </ul> Note <p>Please don't update this table this is for reference only when doing translations. I will maintain this table when I add new topics or merge changes.</p> Webpage English French German Italian Dutch Portugese Spanish Thai Chinese Welcome Getting started Requirements Installing Zabbix DB Server Installing Zabbix Configure Zabbix HA The basics Zabbix Interface Zabbix Users &amp; User groups Zabbix hosts Host groups Interfaces templates Items Zabbix triggers Macros Data Flow Data collection Zabbix Agent Problem detection Triggers Taking action when problems come Event based Actions Managing permissions Managing Permissions Visualising Problems Visualising our problems Automating configuration Automating configuration VMWare monitoring VMware monitoring with Zabbix Monitoring websites Monitoring websites Monitoring SNMP, IPMI and JAVA SNMP Monitoring SNMP trap monitoring JAVA monitoring IPMI Monitoring Authentication Authentication with HTTP Authentication with LDAP Authentication with SAML Zabbix MFA support Monitoring with Proxies Installing Proxies Active proxy Passive proxy Proxy loadbalancing Securing Zabbix Securing Zabbix Frontend Securing Zabbix with SELinux Maintaining Zabbix Maintaining Zabbix Monitoring Windows Monitoring Windows Zabbix API Zabbix API Zabbix extras Modbus monitoring with Zabbix"},{"location":"actions/zabbix-eventactions/","title":"Event based Actions","text":""},{"location":"api/zabbix-api/","title":"Zabbix API","text":""},{"location":"authentication/zabbix-http/","title":"Authentication with HTTP","text":""},{"location":"authentication/zabbix-ldap/","title":"Authentication with LDAP","text":""},{"location":"authentication/zabbix-mfa/","title":"Zabbix MFA support","text":"<p>We all know that before you can start configuring Zabbix via WebUI you have to sign in. Zabbix has several options to provide better security for user passwords by configuring password policy:</p> <ul> <li>Requirement for Minimum password length</li> <li>Requirements for password to contain an uppercase and a lowercase Latin letter, a digit, a special character</li> <li>Requirement to avoid easy-to-guess passwords</li> </ul> <p>To secure sign in process even more you can configure multi factor authentication (MFA). MFA protects Zabbix by using a second source of validation before granting access to its WebUI after a user enters his/her password correctly. Zabbix offers to types of MFA - Time-based one-time password (TOTP) and Duo MFA provider.</p>"},{"location":"authentication/zabbix-mfa/#time-based-one-time-password","title":"Time-based one-time password","text":"<p>In the menu select <code>Users</code> section and then <code>Authentication</code></p> <p></p> <p>Now in <code>MFA settings</code> tab select the <code>Enable multi-factor authentication</code> check-box, then select <code>TOTP</code> in Type drop-down list.</p> <p></p> <p>In <code>Hash function</code> drop-down list you can choose SHA-1, SHA-256 or SHA-512, the higher number is the better security.</p> <p>In <code>Code lentgh</code> you can select how many digits will be generated for you by Authenticator application on your phone.</p> <p>Click <code>Add</code> and then <code>Update</code>. Now you have TOTP MFA configured and it is the default method of MFA.</p> <p></p> <p>Now you need to tell Zabbix for which User group (or groups) to use MFA. Let's create a User group that would require MFA.</p> <p>In the menu select <code>Users</code> section and then <code>User groups</code>, then click <code>Create user group</code> button</p> <p></p> <p>In <code>Group name</code> put \"test\". Note that <code>Multi-factor authentication</code> field is \"Default\", as currently we have only one MFA method configured it does not matter whether we select \"Default\" or \"TOTP1\" that we created above. You also can disable MFA for all users belonging to this User group. Click <code>Add</code> button to create \"test\" User group.</p> <p></p> Note <p>MFA method is defined on per User group basis, i.e. MFA method configured for a User group will be applied to all users belonging to this group.</p> <p>Let's add a user to this user group. In the menu select <code>Users</code> section and then <code>Users</code>, then click <code>Create user</code> button</p> <p></p> <p>Fill in <code>Username</code>, <code>Password</code> and <code>Password (once again)</code> fields. Make sure you select <code>test</code> user group in <code>Groups</code> field.</p> <p></p> <p>Then switch to <code>Permissions</code> tab and select any role.</p> <p></p> <p>Click <code>Add</code> button to add the user.</p> <p>Now we can test how TOTP MFA works. Sign out and then try to sign in as a test user you just created. You will be presented with a QR code. That means that the user <code>test</code> has not been enrolled in TOTP MFA yet.</p> <p></p> <p>On your phone you need to install either \"Microsoft authenticator\" or \"Google authenticator\" application. The procedure of adding new QR code is quite similar, here is how it looks in \"Google authenticator\". Tap <code>Add a code</code> and then <code>Scan a QR code</code>. You'll be immediately presented with a 6 digit code (remember we selected 6 in <code>Code length</code> when we configured TOTP MFA?)</p> <p> </p> <p>Enter this code into <code>Verification code</code> field of your login screen and click <code>Sign in</code>, if you did everything right you are logged in into Zabbix at this point. At this point the user \"test\" is considered enrolled into TOTP MFA and Zabbix stores a special code used for furthe authentications in its database. The next time user \"test\" tries to login into Zabbix there will be only a field to enter verification code</p> <p></p> Warning <p>For TOTP MFA to work your Zabbix server must have correct time. Sometimes it's not the case especially if you are working with containers so pay attention to this.</p> <p>If a user changes (or loses) his/her phone, then Zabbix administrator should reset his/her enrollment. To do that in the menue select <code>Users</code> then mark a check-box to the left of \"test\" user and click \"Reset TOTP secret\" button.</p> <p></p> <p>After you reset TOTP secret the \"test\" user will have to undergo enrollment procedure again.</p>"},{"location":"authentication/zabbix-mfa/#duo-mfa-provider","title":"Duo MFA provider","text":"<p>Duo is a very famous security platform that provides a lot of security related features/products. To read more please visit https://duo.com/ . Here we'll talk about Duo only in regards to Zabbix MFA.</p> Warning <p>For Duo MFA to work your Zabbix WebUI must be configured to work with HTTPS (valid certificate is not required, self-signed certificate will work).</p> <p>First of all you need to create an account with Duo (it's free to manage up to 10 users) then login into Duo, you are an admin here. In the menu on the left select <code>Applications</code> and click <code>Protect an Application</code> button.</p> <p></p> <p>Then you will see WebSDK in applications list, click on it</p> <p></p> <p>Here you'll see all the data needed for Zabbix.</p> <p></p> <p>Now let's go to Zabbix. First we need to configure Duo MFA metod. In the menue select <code>Users</code> and click <code>Authentication</code>. Then on <code>MFA settings</code> tab click <code>Add</code> in <code>Methods</code> section.</p> <p></p> <p>Fill in all the fields with data from Duo Dashboard -&gt; Applications -&gt; Web SDK page (see screenshot above) and click <code>Add</code>, then click <code>Update</code> to update Authentication settings.</p> <p></p> <p>After the MFA method is configured let's switch the \"Test\" group to use Duo MFA. In the menu select <code>Users</code> and click <code>User groups</code>, then click \"test\" group. In the field <code>Multi-factor authentication</code> select \"DUO1\" and click <code>Update</code>.</p> <p></p> <p>Everything is ready. Let's test it. Sign out of Zabbix and sign back in with \"test\" user. You should see a welcome screen from Duo. Click several <code>Next</code> buttons.</p> <p> </p> <p>Then you need to select the method of authentication.</p> <p></p> <p>It is up to you what to select you can experiment with all these methods. Let's select \"Duo Mobile\" (you need to install \"Duo mobile\" application on your device). Click <code>I have a tablet</code> (it's just easier to activate your device this way) and confirm that you installed \"Duo mobile\" on your phone. At this point you should see a QR code that you need to scan in \"Duo mobile\" application.</p> <p> </p> <p>Open \"Duo mobile\" on your phone. If you did not have this application previously installed (thus no accounts enrolled) you will see couple of welcome screens.</p> <p> </p> <p>Tap on \"Use a QR code\" and then scan the code presented by Duo in your Zabbix logiin screen. After you do that you will see that the account is enrolled to your Duo MFA. Enter account name and tap \"Done\" and you will see the account in the list of all account enrolled into Duo MFA on this device. In Zabbix WebUI you will also see a conirmation, click \"Continue\".</p> <p> </p> <p>Duo will ask you now whether you want to add another method of authentication, click <code>Skip for now</code> and you'll see a confirmation that set up completed. Click <code>Login with Duo</code> and push notification will be pushed to your device.</p> <p> </p> <p>Now just tap on \"Approve\" on your device and you will be logged in into Zabbix.</p> <p></p> <p>Duo MFA enrollment complete. If you sign out and sign in back then immediately a push notification will be sent to your device and all you need is tap on \"Approve\". Also you will see the user \"test\" in Duo where you can delete the user, or deactivate just click on it and experiment.</p> <p></p>"},{"location":"authentication/zabbix-saml/","title":"Authentication with SAML","text":""},{"location":"automation/automating-configuration/","title":"Automating configuration","text":""},{"location":"configuration/Dashboard/","title":"Zabbix Interface","text":"<p>This chapter is going to cover the basics we need to know when it comes to the Zabbix userinterface and the thing we need to know before we can start to fully dive into our monitoring tool. We will see how the userinteface works how to add a host, groups users, items ... so that we have a good understanding of the basics. This is something that is sometimes missed and can lead to frustrations not knowing why things don't work like we had expected them to work. So even if you are an advanced user it may be usefull to have a look into this chapter.</p>"},{"location":"configuration/Dashboard/#overview-of-the-interface","title":"Overview of the interface","text":"<p>With Zabbix 7 the user interface after logging in is a bit changed. Our menu on the left side of the screen has has a small overhaul. Let's dive into it. When we login into our Zabbix setup the first time with our Admin user we see a page</p> <p>like this where we have our <code>main window</code> in green&gt; our <code>main menu</code> marked in red and our <code>links</code> marked in yellow.</p> <p></p> <p>The main menu can be hidden by collapsing it completely or to reduce it to a set of small icons.</p> <p>When we click on the button with the 2 arrows to the left:</p> <p></p> <p>You will see that the menu collapses to a set of small icons. Pressing \"&gt;&gt;\" will bring the <code>main menu</code> back to it's original state. Pressing the box with the arrow sticking out next to the \"&lt;&lt;\" button will hide the <code>main menu</code> completely.</p> <p></p> <p>To get the main menu back it's not too difficult we just look for the button on the left with three horizontal lines and click it. This will bring the menu back and clicking on the box with the arrow again will bring the <code>main menu</code> back.</p> <p>Yet another way to make the screen bigger that is quit useful for monitors in NOK teams for example is the kiosk mode button. This one is however located on the left side of your screen and looks like 4 arrows pointing to every corner of the screen. Pressing this button will remove all the menus and leave only main window to focus on.</p> <p> </p> <p>When we want to leave the kios mode, the button will be changed to 2 arrows pointing to the inside of the screen. Pressing this button will revert us back to the original state.</p> Tip <p>We can also enter and exit kiosk mode by making use of parameters in our Zabbix url: <code>/zabbix.php?action=dashboard.view&amp;kiosk=1</code> - activate kiosk mode or <code>/zabbix.php?action=dashboard.view&amp;kiosk=0</code> - activate normal mode</p> Note <p>There are many other page parameters we can use. A full list can be found here Zabbix also has a global search menu that we can use to find hosts, host groups and templates.</p> <p></p> <p>If we look in the search box for <code>server</code> you will see that we get an overview of all templates, host groups and hosts with the name <code>server</code> in it.</p> <p></p>"},{"location":"configuration/Dashboard/#main-menu","title":"Main menu","text":"<p>Our main menu on the left consists of a few sections, 9 to be exact:</p> Menu Name Details Dashboards Contains an overview of all the dashboards we have access to. Monitoring Shows us the hosts, problems, latest data, maps, ... Services An overview of all the Services and SLA settings. Inventory An overview of our collected inventory data. Reports Shows us the system information, scheduled reports, audit logs, action logs, etc . Data collection Contains all things related to collecting data like hosts, templates, maintenance, discovery, ... Alert The configuration of our media types, scripts and actions Users User configuration like user roles, user groups, authentication, API tokes, ... Administration The administration part containing all global settings, housekeeper, proxies, queue, ..."},{"location":"configuration/Dashboard/#links-menu","title":"Links menu","text":"<p>Our last part the <code>links</code> part contain a set of useful links that we can use:</p> Menu name Details Support This brings us to the technical support page that you can buy from Zabbix. Remember that your local partner is also able to sell these contracts and can help you in your own language. Your local distributors Integrations The official zabbix integeration page Help The link to the documentation of your Zabbix version User settings The user profile settings. Sign out Log out of the current session. <p>There are still a few buttons that we need to cover on the right side of our screen</p> <p></p> <p>The edit button allows us to change our dashboard. This is something we will cover later. On the far left side there is a \"?\" this will bring you to the Zabbix documentation page that explains everything about the dashboard. The button on the right side with the 3 horizontal lines is the one to share, rename, delete, ... our dashboards.</p> <p></p>"},{"location":"configuration/Dashboard/#system-information","title":"System Information","text":"<p>There is also a box on the dashboard called <code>System Information</code>. This widget will show you the current System status of your Zabbix setup. Let's go over the different lines of information as they are important to understand.</p> Parameter Value Details Zabbix server is running This gives us the status of our zabbix server if it is running yes or no and if it is running on our localhost or another IP and on what port the zabbix server is listening. If no trapper is listening the rest of the information can not be displayed IP and port of the Zabbix server Zabbix server version This shows us the version of the <code>Zabbix server</code> so the version you see at the bottom of your screen is the one from the Zabbix frontend and can be different but should be in the same major version. Version Number Zabbix frontend version This is the version of the frontend and should match with what you see at the bottom of your screen. Version Number Number of hosts (enabled/disabled) The total number of hosts configured on our system How many of those are enabled and disabled Number of templates The number of templates installed on our Zabbix server. Number of items (enabled/disabled/not supported) This line shows us the number of items we have configured in total in this case 99 90 are enabled and 0 are disabled but 9 of them are unsupported. This last number is important as those are items not working. We will look into this later why it happens and how to fix it. For now remember that a high number of unsupported items is not a good idea. Number of triggers (Enabled/disabled[problem/ok]) The number of triggers configured Number of enabled and disabled triggers. Just as with items we also see if there are triggers that are in a problem state or ok state. A trigger in a problem state is a non working trigger something we need to monitor and fix. We will cover this also later. Number of users (online) Here we see the number of users that are configured on our system The nunber of users currently online. Required server performance, nvps The number of new values per second that Zabbix will process per second. This is just an estimated number as some values we get are unknown so the real value is probably higher. So we can have some indication about how many IOPS we need and how busy our database is. A better indication is probably the internal item <code>zabbix[wcache,values,all]</code> High availability cluser It will show us if we are running on a Zabbix HA cluster or not Failover delay once HA is activated Tip <p>System information may display some additonal warnings like when your database doesn't  have the correct character set or collation UTF-8.  Also when the database you used is lower or higher then the recommended version  or when there are misconfigurations on housekeeper or TimescaleDB.  Another warning you can see is about database history tables that aren't  upgraded or primary keys that have not been set. This is possible if you are  coming from an older version before Zabbix 6 and never did the upgrade.</p>"},{"location":"configuration/Dashboard/#the-main-menu-explained","title":"The main menu explained","text":"<p>It's important to know that we have so far seen our dashboard with the Admin user and that this user is a <code>Zabbix Super Admin</code> user. This means that the user has no restrictions. Zabbix works with 3 different levels of users we have the regular users, Zabbix Admin and Zabbix Super Admin users. Let's have a look</p> <p></p> <ul> <li>A <code>Zabbix User</code> will only see the red part of our   <code>main menu</code> and will only be able to see our collected data.</li> <li>A <code>Zabbix Admin</code> will see the red part and the yellow   part of the <code>main menu</code> and is able to change our configuration.</li> <li>A <code>Zabbix Super Admin</code> will see the complete <code>main menu</code> and so is able   to change the configuration and all the global settings.</li> </ul> <p> </p> <p></p> <ul> <li>Problems: This page will give us an overview of all the problems.   With filter we can look at recent problems past problems and problems   that are active now. There are many more filters tor drill down more.</li> <li>Hosts: This will give us a quick overview page with whats happening   on our hosts and allows us to quickly go to the latest data, graphs and dashboards.</li> <li>Latest data: This page I probably use the most, it shows us all the information   collected from all our hosts.</li> <li>Maps: The location where we can create map that are an oveview of our   IT infrastructure very useful to get a high level overview of the network.</li> <li>Discovery: When we run a network discovery this is the place where we can find   the results.</li> </ul> <p></p> <ul> <li>Services This page will give us a high level overview of all services   configured in Zabbix.</li> <li>SLA: An overview of all the SLAs configured in Zabbix.</li> <li>SLA Report: Here we can watch all SLA reports based on our filters.    </li> </ul> <p></p> <ul> <li>Overview: A place where we can watch all our iventory data that   we have retrieved from our hosts.</li> <li>Hosts: Here we can filter by host and watch all inventory data for the   hosts we have selected.    </li> </ul> <p></p> <ul> <li>System information: System information is a summary of key Zabbix server   and system data.</li> <li>Scheduled reports: The place where we can schedule our reports, a pdf of   the dashboard that will be sent at a specified time and date.</li> <li>Availability report: A nice overview where we can see what trigger has   been in ok/nok state for how much % of the time</li> <li>Top 100 triggers: Another page I visit a lot here we have our top list   with triggers that have been in a nok state.</li> <li>Audit log: An overview of the user activity that happend on our system.   Useful if we want to know who did what and when.</li> <li>Action log: A detailed overview of our actions can be found here.   What mail was sent to who and when ...?</li> <li>Notifications: A quick overview of the number of notifications sent to each user.</li> </ul> <p></p> <ul> <li>Template groups: A place to logical group all templates together in different groups.   Before it was mixed together with hosts in host groups.</li> <li>Host groups: A logical collection of different hosts put together.   Host groups are used for our permissions.</li> <li>Templates: A set off entities like items and triggers can be grouped together   on a template, A template can be applied to one or more hosts.</li> <li>Hosts: What we need in Zabbix to monitor A host, application, service ...</li> <li>Maintenance: The place to configure our maintenance windows. A maintenance can   be planned in this location.</li> <li>Event correlation: When we have multiple events that fires triggers related we   can configure correlations in this place.</li> <li>Discovery: Sometimes we like to use Zabbix to discover devices, services,...   on our network. This can be done here.</li> </ul> <p></p> <ul> <li>Actions: This menu allows us to configure actions based on <code>events</code> in   Zabbix. We can create such actions for triggers, services, discovery,   autoregistration and internal events.</li> <li>Media types: Zabbix can sent messages, emails etc ... based on the actions we   have configured. Those media types need templates and need to be activated.</li> <li>Scripts: In Zabbix it's possible to make use of scripts in our actions and   frontend. Those actions need to be created here first and configured.    </li> </ul> <p></p> <ul> <li>User groups:</li> <li>User roles:</li> <li>Users:</li> <li>API tokens:</li> <li>Authentication:    </li> </ul> <p></p> <ul> <li>General:</li> <li>Audit log:</li> <li>Housekeeping:</li> <li>Proxies:</li> <li>Macros:</li> <li>Queue:    </li> </ul> Info <p>More information can be found in the online Zabbix documentation here</p> Info <p>You will see that Zabbix is using the modal forms in the frontend on many places. The problem is that they are not movable. This module created by one of the Zabbix devs <code>UI Twix</code> will solve this problem for you.</p> Note <p>At time of writing there is no Dashboard import/export functionality in zabbix. So when upgrading dashboards it needs to be created by hand. It was on the roadmap for 7 but didnt made it so feel free to vote https://support.zabbix.com/browse/ZBXNEXT-5419</p>"},{"location":"configuration/zabbix-dataflow/","title":"Data Flow","text":""},{"location":"configuration/zabbix-dataflow/#data-collection","title":"Data Collection","text":""},{"location":"configuration/zabbix-dataflow/#simple-checks","title":"Simple Checks","text":""},{"location":"configuration/zabbix-hostgroups/","title":"Host groups","text":"<p>Let's have look at the concepts of host groups and what the benefits are that they provide. We have seen that <code>Host groups</code> can be created directly when we create a new <code>Zabbix host</code>. Another way to create them is by a <code>Super Admin</code> going to <code>Data collection</code> -&gt; <code>Host groups</code>. Next press the button <code>Create host group</code> in the upper right corner of the screen. Host groups exists to make a logical group so we can add all hosts that belong together in one group or more. Ex all Linux servers, all PostgreSQL servers, or all the servers that belong to one team.</p> <p></p> <p>When going to our menu <code>data collection</code> you notice that there are <code>Host groups</code> and <code>Template groups</code>. If you come from an older Zabbix version you will be happy to read that Zabbix made a specific group for Templates. If you are new to Zabbix don't panic :). In older versions Zabbix had mixed Templates and host in one group. This mixing was sometimes confusing especially for new users, as Zabbix doesnt link templates to groups.</p> <p>When you click on the menu <code>Data collection</code> -&gt; <code>Host groups</code>. You will notice that some groups are already made. You will also see that there are some names behind the host groups with numbers in front. These names are the names from the hosts that are in the group. The number in front is the number of hosts that are in the <code>host group.</code> To make life more easy you can click on the names of the hosts and Zabbix will bring you directly to the configuration screen for this host.</p> <p></p> <p>Zabbix allows the creation of nested groups. As you can see we are using forward slashes in our group name. When you make use of nested group you can use the '/' to separate groups.</p> <p></p> <p>Once our group or set of nested groups is made you can click again from the <code>host group</code> overview on the group. You will notice that there is now a box that says <code>Apply permissions and tag filters to all subgroups</code>. When pressing this button, all right that are this group will be applied to the sub-groups. So if we have a user <code>John</code> for example in a user group that has rights to see everything in the <code>Host group</code> with the name <code>Europe/Belgium</code> and we apply the option to the subgroups then our user <code>John</code> will suddenly see also the hosts in all our nestet groups and the tags on this host.</p> Note <p>When creating nested groups, Parent groups don't have to exist. So we can have only the group <code>open-future</code> without any of the parent groups. It's up to the user to create them or not. Also group names cannot have <code>/</code> in their names. We cannot escape the <code>/</code> character. Also leading and trailing slashes and multiple slashes in a row are not allowed.</p> Tip <p>Have you tried to put emoticons in fields like host group yet ?</p>"},{"location":"configuration/zabbix-hosts/","title":"Zabbix hosts","text":"<p>To understand how Zabbix works, it's important to know that <code>Hosts</code> in Zabbix are a reference to anything we would like to monitor. It can be a physical host, a virtual machine, an application, a device, or even just a dummy host used to calculate data from existing  hosts into something new.</p> <p>It's probably one of the first tasks that we will do as an Admin when we first login to Zabbix because we need a host if we would like to monitor some metrics. It's however, important to know that hosts cannot be created without being in a hostgroup.</p> <p>In this chapter we will teach you:</p> <ul> <li>How to add a host in Zabbix</li> <li>Host configuration tabs</li> <li>IPMI</li> <li>Tags</li> <li>Macros</li> <li>Inventory</li> <li>Encryption</li> </ul>"},{"location":"configuration/zabbix-hosts/#how-to-add-a-host-in-zabbix","title":"How to add a host in Zabbix","text":"<p>With this said, let's see how to create our first host.</p> <p>Let's go to the menu on your <code>left</code> and select <code>Data Collection</code> -&gt; <code>Hosts</code>. We see that there is already a host configured and that the availability icon is \"RED\". Don't worry about it, this is normal. We have no Zabbix agent installed or configured.</p> <p>To add a new host to our system, we have to press <code>Create host</code>, this button can be found in the upper right corner of our screen.</p> <p></p> <p>We now get a modal form where we need to fill in some information about our host. The fields marked with a  red  asterisk  \"*\"  are the fields that are mandatory.</p> <p></p> Parameter Description Host name Here we need to enter the Host name of the machine we would like to add. The name can contain alphanumerics, spaces, dots, dashes, and underscores. HOWEVER you are not allowed to use leading and trailing spaces. The Host name in the frontend is what we need later for the configuration of our Zabbix agent, so make sure you remember it. Visible name The host name, as we have seen, is needed to configure our Zabbix agent. So in case you like to give it a unique name or one that is randomly generated, ... you can add a visible name here. This name will then be used on the frontend instead of what we call the technical name host name. This name has support for UTF-8, so special characters are supported. This name will be used in all the places like maps, the latest data, inventory, ... Templates Templates are like blueprints that we can use on our hosts to add items, triggers, etc. We explain more about it in the topic Zabbix templates. You can start typing the name of the template, and Zabbix will start to show a list with matches, or you can press the <code>Select</code> box and choose one from the list. Host groups Every host must belong to atleast one <code>host group</code>. This is because permissions are set on host groups. You can type the name of the host group, and a list of matching groups will start to appear. Another way is to select a host group from an existing list by pressing the Select button. Or you can create a new group by just typing the name and pressing on the box that shows the name of the group you typed with (new) behind it Interfaces Zabbix supports several host interfaces, like the Zabbix agent, SNMP, JMX, and IPMI. By default, when we create a host, no interface is added. To add an interface, press Add and fill in the needed information, like IP or DNS, depending on the host interface chosen. When an interface is in use (items created that use the interface), then the interface cannot be removed. Description A place to enter a short description about our host. Monitored by proxy If we have proxies configured, we can select them here if we like to monitor our host through a proxy. Enabled Mark the checkbox to enable the host. This will keep it monitored by Zabbix. When unchecked, the host will not be monitored."},{"location":"configuration/zabbix-hosts/#host-configuration-tabs","title":"Host configuration tabs","text":"<p>Before we add a host ourselves, there are a few things we need to know first. When we click on a host that we have already configured, there are a few things that we will notice. First of all, we see a <code>blue</code> line under <code>Host</code>. This means that we are on the current <code>tab</code> of the host page. As you can see, there are multiple tabs that we can click on, like IPMI, Tags, Macros,...</p> <p></p> <p>The next thing we see is that next to the tab <code>Macros</code>, there is a number 2. This is because there are two macros configured in the macro tab. So when we add information to tabs like macros or tags ... , Zabbix will show how many items we have added to these tabs by showing next to the tab name the number.</p> <p>When looking at the <code>encryption</code> tab, we notice the green dot. This shows us that an option on the tab has been activated. Now that we know this, let's get a quick overview of every tab and see what it does.</p>"},{"location":"configuration/zabbix-hosts/#ipmi","title":"IPMI","text":"<p>So looking at the <code>IPMI</code> tab, there are a few things we need to fill in when working with an IPMI interface. IPMI stands for Intelligent Platform Management Interface and is basically a set of standards to manage hardware platforms. In short, it allows us to monitor and manage our servers hardware even if the server is not turned on yet. IPMI is better known as ILO on HP servers and DRAC on Dell servers.</p> Parameter Description Autentication algorithm Select the authentication algorithm that we have configured on our IPMI server this can be Default, none, MD2, MD5, Straight, OEM, RMCP+ Privelege level Here we select the privelege level: Callback, User, Operator, Admin or OEM. Username The user for authentication that was created on the host. User Macros can be used. Password The password for our user on the host. User macros can be used. Note <p>We will cover IPMI in more detail later in the Chapter IPMI Monitoring</p>"},{"location":"configuration/zabbix-hosts/#tags","title":"Tags","text":"<p>The Tags tab allows you to define host-level tags. Host-level tags are used to provide additional information about the host that can be used as a filter in the webUi.</p> <p>example:</p> <p>We add a <code>datacenter</code> tag to physical hosts servers to indicate the location of the server and thus make it easy to list all the servers present in this datacenter, impacted by incident.</p>"},{"location":"configuration/zabbix-hosts/#macros","title":"Macros","text":"<p>The macros tab allows you to define host-level user macros. Macros in Zabbix can be seen as variables that can be overloaded at will. You need to use and abuse them to make templates as reusable as possible.</p> Note <p>We will cover Macro in more detail later in the Chapter Macros</p>"},{"location":"configuration/zabbix-hosts/#inventory","title":"Inventory","text":"<p>The Inventory tab allows you to manually enter inventory information for the host. You can also select to enable Automatic inventory population, or disable inventory population for this host.</p>"},{"location":"configuration/zabbix-hosts/#encryption","title":"Encryption","text":"<p>The Encryption tab allows you to configure encrypted connections with the host. Il est possible de configurer l'encryption entre le Zabbix proxy/Zabbix server.</p> Value Description no encryption (default value) Unencrypted PSK Using pre-shared keys certificate Using certificates"},{"location":"configuration/zabbix-hosts/#value-mapping","title":"Value Mapping","text":"<p>The Value mapping tab allows to configure human-friendly representation of item data in value mappings.</p>"},{"location":"configuration/zabbix-interfaces/","title":"Interfaces","text":"<p>When setting up your host, if you want to monitor him, you will quickly need to specify an IP address or a FQDN.</p> <p>This configuration is located in the interface section of the create host view.</p> <p>After clicking add, a drop-down menu will ask you to select the type of interface.</p> <p></p> Parameters Description Agent Allows use of item keys of type Zabbix Agent and Zabbix Agent Active SNMP Allows monitoring of the host via SNMP type items JMX Allows monitoring of Java applications through JMX counters IPMI Allows monitoring of IPMI through items of type <p>All types of interfaces need same information, IP or DNS and port number. If you want to use DNSremember to click on the button DNS in <code>Connect to</code>.</p> <p>SNMP interface need four more informations:</p> <ul> <li>SNMP version, depends on the snmp version configured on the host</li> <li>SNMP Community, depend on the snmp community configured on the host.</li> <li>Max repetition count, necessary for native SNMP bulk requests   Note that setting this value too high may cause the SNMP agent check timeout.</li> <li>Mark the Use combined requests checkbox to allow   combined processing   of SNMP requests (not related to native SNMP bulk requests)</li> </ul> <p>You can create several interfaces on a host, which may or may not be identical. If more than one interface of a type exists, you can define the default interface (which will be used by default by all items on the host)</p> Note <p>We will cover IPMI in more detail later in the Chapter IPMI Monitoring We will cover JAVA in more detail later in the Chapter IPMI Monitoring We will cover SNMP in more detail later in the Chapter IPMI Monitoring</p> Tip <p>If you want to monitor host with HTTP call, interface are not necessary.</p>"},{"location":"configuration/zabbix-items/","title":"Items","text":""},{"location":"configuration/zabbix-macros/","title":"Macros","text":"<p>Macros are one of the concepts you need to understand in Zabbix. There are different types, and they make Zabbix more scalable and less static. In this topic we will explain the different types of macros and how to use them.</p> <p>We will cover:</p> <ul> <li>Built-in macros</li> <li>Function macros</li> <li>User macros</li> <li>Low-level discovery macros</li> <li>Expression macro</li> <li>User macro with context</li> </ul>"},{"location":"configuration/zabbix-macros/#built-in-macros","title":"Built-in macros","text":"<p>They correspond to Zabbix internal macros, they are represented using this notation <code>{MACRO}</code>, the complete list is available here. Each built-in macro can be used in one or more cases.</p> <p>For example, the <code>{HOST.HOST}</code> built-in macro can be used to retrieve the host in a trigger expression, or the macro <code>{HOST.IP}</code> which does the same thing but retrieves the IP of the host.</p>"},{"location":"configuration/zabbix-macros/#function-macros","title":"Function macros","text":"<p>You may want to manipulate the value of a macro, to shorten or extract a part for example. The syntax of a macro function is as follows: <code>{macro.func(params)}</code></p> Function Description fmtnum Number formatting to control the number of digits printed after the decimal point. fmttime Time formatting. iregsub Substring extraction by a regular expression match (case-insensitive). regsub Substring extraction by a regular expression match (case-sensitive)."},{"location":"configuration/zabbix-macros/#user-macros","title":"User macros","text":"<p>Macros are what give Zabbix its great flexibility. They can be defined globally, or at template or host level. They are always preceded by a $ and are noted thus: <code>{$MACRO}</code>.</p> <p>It's important to note that Zabbix prioritises user macros in the following way:</p> <ol> <li>Host level macros (checked first)</li> <li>Macros defined on first level templates of the host (i.e., templates linked    directly to the host), sorted by template ID</li> <li>Macros defined on the second level templates of the host, sorted by template ID</li> <li>Macros defined on the third level templates of the host, sorted by template    ID, etc.</li> <li>global macros (checked last)</li> </ol> <p>These macros can be used in  many locations, they are commonly used to define a threshold and serve as a default value in a template that can be overloaded with host-level macros.</p> <p>In order to have templates that are reusable and functional in the majority of the situations, users macros must be used.</p> <p>It's also recommended to not use global macros when not needed as they are not portable when exporting hosts or templates.</p> <p>So when we define <code>global macros</code> they will be overwritten by <code>template macros</code> and our template macros will be overwritten by <code>host macros</code>.</p> <p></p> <p>It's easy so overwrite a macro by accident to solve this problem Zabbix has the option on <code>Host</code> and on <code>Template</code> level to see if there are any macros defined yet with the same name. This makes it easy to see if you have this macro defined already and if it will be overwritten.</p> <p></p> <p>In this screenshot we can see that there is a <code>Global macro</code> defined with a value of 100 and that we have the same macro on <code>Template level</code> that overrides the value of the <code>Global macro</code>. However the effective vale is coming from our <code>Host macro</code>.</p>"},{"location":"configuration/zabbix-macros/#low-level-discovery-macros","title":"Low-level discovery macros","text":"<p>This type of macro is a little special, it is used in the case of Low-level discovery and is preceded by a # <code>{#MACRO}</code>. It's useful for the creation of a prototype item, prototype trigger or prototype host.</p>"},{"location":"configuration/zabbix-macros/#expression-macro","title":"Expression macro","text":"<p>These macros are very specific, they are used exclusively in name graphs and in maps, they use the following syntax: <code>{?EXPRESSION}</code>. <code>{?avg(/{HOST.HOST}/{ITEM.KEY},1h)}</code></p>"},{"location":"configuration/zabbix-macros/#user-macro-with-context","title":"User macro with context","text":"<p>There's one last subject concerning macros, and it's not the least important: very soon after using your first user macros to define thresholds, you'll realise that you want to have a different threshold depending on ... the context. For this we can use  the following syntax: <code>{$MACRO: \"static text\"}</code> If you want to set the global threshold to 80%, but on a particular partition you want to increase the threshold to 90%. To do this, we'll use the context.</p>"},{"location":"configuration/zabbix-macros/#example","title":"Example","text":"<ul> <li>{$LOW_SPACE_LIMIT}: 80</li> <li>{$LOW_SPACE_LIMIT:/tmp}:90</li> </ul> <p>In this example, all the mount points on our server will have a default threshold of 80% except for /tmp, which will have a custom threshold of 90%.</p>"},{"location":"configuration/zabbix-macros/#some-useful-links","title":"Some useful links","text":"<ul> <li>https://www.zabbix.com/documentation/7.0/en/manual/appendix/macros/supported_by_location</li> <li>https://www.zabbix.com/documentation/7.0/en/manual/config/macros/macro_functions</li> <li>https://www.zabbix.com/documentation/7.0/en/manual/config/macros/user_macros</li> <li>https://www.zabbix.com/documentation/7.0/en/manual/config/macros/lld_macros</li> <li>https://www.zabbix.com/documentation/7.0/en/manual/config/macros/expression_macros</li> <li>https://www.zabbix.com/documentation/7.0/en/manual/config/macros/user_macros_context</li> </ul>"},{"location":"configuration/zabbix-templates/","title":"Templates","text":"<p>Templates are probably the most important notion in Zabbix, and globaly in monitoring tools. They help you to make change more easily and globaly, just make the change one time and will be applied immediately to all hosts concerned.</p> <p>You can see template like a special host without interface that you can link to a classical host, the configuration added to a template are apply to all hosts using the template.</p> <p>But in return, when you make a mistake during template evolution, it spreads to all hosts. Make little change and test on one or two hosts before if you have any doubts.</p> <p>In this chapter we will teach you:</p> <ul> <li>How to add a new template</li> <li>Template configurations tabs</li> <li>Tags</li> <li>Macros</li> <li>Guidelines</li> </ul>"},{"location":"configuration/zabbix-templates/#how-to-add-a-new-template","title":"How to add a new template","text":"<p>For build a new templates use the left menu and select Data Collection &gt; Templates. On this menu you can see all templates available on you installation.</p> <p></p> <p>Before creating a new template you have to ask yourself one question : <code>Does a template already exist for monitoring this technology ?</code>. Of course the first way is to check the available template, and if no one exist you can check on : Zabbix Monitoring and Integration Solutions and more globally on the Internet.</p> <p>Unfortunitely, no template exist for your needed.  Use the <code>Create template</code> button on the top right to start the creation. Remerber the fields marked with a red asterisk \"*\" are the fields that are mandatory.</p> <p>A template is simply a name and a one or more template groups.</p> <p></p> Tip <p>Suffix the technonology name with the type of item used <code>by Zabbix agent</code>, <code>by SNMP</code>, ...</p> <p>Template groups is like hostgroup, it's use for classify template and apply rights.</p> <p>In description you can add information that could be of interest to use the template, the version tested, ...</p>"},{"location":"configuration/zabbix-templates/#tags","title":"Tags","text":"<p>Template-level tags will be visible in case of problems.</p>"},{"location":"configuration/zabbix-templates/#macros","title":"Macros","text":"<p>All user macros used by the template need to be define with default value in this section. Your template must be able to use without setting on host, except for connection informations, the default value especially the thresold must be generic.</p>"},{"location":"configuration/zabbix-templates/#some-useful-links","title":"Some useful links","text":"<p>https://www.zabbix.com/documentation/guidelines/en/thosts/configuration/templates</p>"},{"location":"configuration/zabbix-users/","title":"Zabbix Users &amp; User groups","text":"<p>Now that we know how the Zabbix dashboard is build up our first task will be to create a user. In case you missed it the standard Zabbix (yes the capital Z here is eeded to login.) user is Admin and has the password zabbix so we need to change this ASAP.  The most confusing part is probably that the user Admin in zabbix is actually a <code>super admin</code> but more about that later. In this topic we will cover:</p> <ul> <li>Changing the Zabbix super admin password</li> <li>Zabbix User types</li> <li>Creating a new User in Zabbix</li> <li>Strengthen the Zabbix password policy.</li> <li>User Media</li> <li>User permissions</li> <li>User Roles</li> <li>User Groups</li> <li>User Groups Overview</li> </ul>"},{"location":"configuration/zabbix-users/#changing-the-zabbix-super-admin-password","title":"Changing the Zabbix super admin password","text":"<p>In our menu on the right side of the screen, click the <code>Users</code> section, and then choose <code>users</code>. As you can see here in the screenshot.</p> <p></p> <p>You will now see a list of all the users that are created on the system when installing a new Zabbix instance. Here you will always see a list of all users that are configured on the system.</p> <p></p> <p>To change the password, do the following steps: - Click user <code>Admin</code> - Click on the button <code>Change password</code>. - Fill in the current password, <code>zabbix</code> - Fill in the new password twice and press <code>Update</code> at the bottom of the page.</p>"},{"location":"configuration/zabbix-users/#zabbix-user-types","title":"Zabbix User types","text":"<p>Before we create new users, it's important to know that Zabbix has three user types that are built-in.</p> User type Description Zabbix User This is a normal user that only has read-only permissions if given. So there are no permissions assigned by default. Zabbix Admin A user with read/write permissions. Just like the Zabbix user, there are no permissions by default. However access can be denied to some groups. Zabbix Super Admin A user with group read/write permissions. The user will have read/write access to all host and template groups. Access can't be revoked by denying access to groups, like with a normal admin. <p>Besides these differences, these users also have different access rights to our menu. Let's have a closer look.</p> <ul> <li>A normal user will only see a part of our menu on the left. Also, some sub-sections of the menu will not be visible. An <code>Admin</code> user will have more rights than a regular user and will be able to make some configuration changes in Zabbix. A <code>Super Admin</code> user will have unlimted right and see every part of the menu. The only way to limit a <code>Super Admin</code> will be by making use of roles. Something we cover later.</li> <li>An <code>Admin</code> user will have more rights than a regular user and will be able to make some configuration changes in Zabbix.</li> <li>A <code>Super Admin</code> can access all parts of the menu. </li> </ul> <p>This table gives an overview of all the permissions a Zabbix user, admin, and super admin have in the Zabbix menu:</p> Zabbix User Zabbix Admin Zabbix Super Admin Dashboards \u2705 \u2705 \u2705 Zabbix User Zabbix Admin Zabbix Super Admin Monitoring \u2705 \u2705 \u2705 - Problems \u2705 \u2705 \u2705 - Hosts \u2705 \u2705 \u2705 - Latest data \u2705 \u2705 \u2705 - Maps \u2705 \u2705 \u2705 - Discovery \u274c \u2705 \u2705 Zabbix User Zabbix Admin Zabbix Super Admin Services \u2705 \u2705 \u2705 - SLA \u274c \u2705 \u2705 - SLA Reports \u2705 \u2705 \u2705 Zabbix User Zabbix Admin Zabbix Super Admin Inventory \u2705 \u2705 \u2705 - Overview \u2705 \u2705 \u2705 - Hosts \u2705 \u2705 \u2705 Zabbix User Zabbix Admin Zabbix Super Admin Reports \u2705 \u2705 \u2705 - System information \u274c \u274c \u2705 - Scheduled reports \u274c \u2705 \u2705 - Availability report \u2705 \u2705 \u2705 - Triggers top 100 \u2705 \u2705 \u2705 - Audit log \u274c \u274c \u2705 - Action log \u274c \u274c \u2705 - Notifications \u274c \u2705 \u2705 Zabbix User Zabbix Admin Zabbix Super Admin Data Collection \u274c \u2705 \u2705 - Template groups \u274c \u2705 \u2705 - Host groups \u274c \u2705 \u2705 - Templates \u274c \u2705 \u2705 - Hosts \u274c \u2705 \u2705 - Maintenance \u274c \u2705 \u2705 - Event correlation \u274c \u274c \u2705 - Discovery \u274c \u2705 \u2705 Zabbix User Zabbix Admin Zabbix Super Admin Alerts \u274c \u2705 \u2705 - Trigger actions \u274c \u2705 \u2705 - Service actions \u274c \u2705 \u2705 - Autoregistration actions \u274c \u2705 \u2705 - Internal actions \u274c \u2705 \u2705 - Media types \u274c \u274c \u2705 - Scripts \u274c \u274c \u2705 Zabbix User Zabbix Admin Zabbix Super Admin Users \u274c \u274c \u2705 - User groups \u274c \u274c \u2705 - User roles \u274c \u274c \u2705 - Users \u274c \u274c \u2705 - Api tokens \u274c \u274c \u2705 - Authentication \u274c \u274c \u2705 Zabbix User Zabbix Admin Zabbix Super Admin Administration \u274c \u274c \u2705 - General \u274c \u274c \u2705 - Audit log \u274c \u274c \u2705 - Housekeeping \u274c \u274c \u2705 - Proxies \u274c \u274c \u2705 - Macros \u274c \u274c \u2705 - Queue \u274c \u274c \u2705 <ul> <li>An <code>Admin</code> user will have more rights than a regular user and will be able to make some configuration changes in Zabbix.</li> <li>A <code>Super Admin</code> can access all parts of the menu. </li> </ul>"},{"location":"configuration/zabbix-users/#creating-a-new-user-in-zabbix","title":"Creating a new User in Zabbix","text":"<p>So now that we are in the users section of Zabbix, it's probably a good time to create a new user for our system. If you skipped the previous step, go to the menu <code>Users</code> -&gt; <code>Users</code>.</p> <p>Click on the top right on <code>Create user</code> and fill in the details of your new users. You will see that some fields have red asterisks in front of them, like Username and Password, ... this means that those fields are mandatory to fill in.</p> <p></p>"},{"location":"configuration/zabbix-users/#strengthen-the-zabbix-password-policy","title":"Strengthen the Zabbix password policy.","text":"<p>Zabbix passwords rely on a minimum length of 8 characters and also block a list of easy-to-guess passwords. We can make our passwords more secure by telling Zabbix that our passwords must contain uppercase and lowercase characters, a digit, and a special character. This policy is a global policy that will be enforced, and we have to set this policy as Super Admin. Go to the menu Users -&gt; Authentication. In older versions, you can find it under Administration Authentication.</p> <p></p> Parameter Description Username A unique name that will be used as username when we login. Name The users firstname this field is optional visible in acknowledgment information and notification recipient information if set. Last Name Users last name. Optional, this field is optional visible in acknowledgment information and notification recipient information if set. Groups Select what group the user will belong to. Atleast 1 group needs to be selected. This feeld will auto complete or you can press the '''Select''' button at the end of the field Password There are 2 password fields they can only be used for internal authentication but more about this later. If the user has the Super admin role then clicking on the Change password button opens an additional field to entering the current (old) password. On a successful password change, the user for which the password was changed will be logged out of all active sessions. Language Language of the frontend. The php gettext extension is required for the translations to work. And the language needs to be configured on the system. See the chapter \"Installing Zabbix\" in case you forgot. Timezone Select the time zone per user or use the default timezone that is configured on the Zabbix server. Theme Here users can select their own look and feel by choosing one of the 4 themes provided by Zabbix or another custom made theme. Default will switch to the default theme chosen by the admin. Auto-Login Check this box so that the user will be remembered for 30 days. The browser must accept cookies for this to work. Auto-Logout Checking this box makes sure the user gets logged out automatically, after the set amount of seconds (minimum 90 seconds, maximum 1 day). Time suffixes are supported, e.g. 90s, 5m, 2h, 1d. Note that this option will not work if : <li>If the \"Show warning if Zabbix server is down\" global configuration option is enabled and Zabbix frontend is kept open.</li><li>When Monitoring menu pages perform background information refreshes.</li><li>If logging in with the Remember me for 30 days option checked.</li> Refresh Set the refresh rate used for graphs, plain text data, etc. Can be set to 0 to disable. Time suffixes are supported. Ex: 90s, 5m, 1h. Rows per page Define how many rows per page will be displayed in lists. URL(after login) You can make Zabbix transfer the user to a specific URL after successful login. This can be useful for monitors in NOC team for example so you arrive on a specific dashboard that is maximised. You can make Zabbix transfer the user to a specific URL after successful login. This can be useful for monitors in NOC team for example so you arrive on a specific dashboard that is maximised."},{"location":"configuration/zabbix-users/#user-media","title":"User Media","text":"<p>The tab ''' Media ''' contains a list of all media that are defined for our user. Media is used for sending notifications to the user. We can click the <code>Add</code> button.</p> <p></p> <p>Adding the media here is not enough to receive notification; we also need to configure our media properly, and we still need to configure actions as well. When pressing the ''' Add ''' button, we get a popup where we can select some information.</p> <p></p> Parameter Description Type A drop down list with the names of all media types. When a media type is disabled it will be in red. Send to Here we can provide contact information. For an email media type it is possible to add several addresses by clicking on '''Add''' below the address field. In this case, the notification will be sent to all email addresses provided. It's also possible to specify recipient name in the Send to field of the email recipient in a format 'Recipient name address1@company.com'. Note that if a recipient name is provided, an email address should be wrapped in angle brackets (&lt;&gt;). UTF-8 characters in the name are supported, quoted pairs and comments are not. For example: John Doe manager@open-future.com and manager@nycdatacenter.com are both valid formats. Incorrect examples: John Doe manager@open-future.com, %%\"Zabbix\\@\\&lt;H(comment)Q&gt;\" zabbix@company.com %%. when active The time when media will be active from monday till sundat, 1-7 and the time from 00:00 till 24:00 for example only in weekends from 6 in the morning till 5 in the evening: 6-7,06-17:00i. This is based on the user his timezone Use if severity A list of checkboxes from the severities you would like to recieve notifications from. Selected severities will be displayed in color. !! Read the warning below!! Status Status of the media we have selected either enabled or disabled ( in use or not ) Warning <p>When selecting the different severity levels, be aware that you have to select <code>Not classified</code> if you want to receive notifications about non-trigger events, like internal events. For more information, check out Event Sources. This is something that is not obvious, and Zabbix documentation could be better at explaining this.</p>"},{"location":"configuration/zabbix-users/#user-permissions","title":"User permissions","text":"<p>When we go to the <code>Permissions</code> tab in our <code>Users</code>, we will get an overview of all permissions our users had in the menu structure. Or when creating a new user, we have the option to select a <code>User Role</code>. Zabbix has four different <code>User Roles</code> built-in. There is a User role, Admin role, Super admin role, and a Guest role.</p> <p>The <code>Guest role</code> is a role with very strict access limitations. Its role is intended for users to access Zabbix without any user account. I never advise using this role unless you know what you are doing. When you open your GUI to users without any authorization, this could leak potential sensitive data like hostnames, IPs, etc.</p> <p>Choosing a <code>User type</code> is one thing; based on the <code>User type</code> we choose, our users will have more or less rights in our main menu. But there is another important part when choosing the <code>User Type</code>. This also has an impact on the rights each user has over host groups. For example, a regular user can only have read rights or no rights. A Zabbix admin user can have full, read-only, or no rights, and a Zabbix Super Admin always has full rights on host groups, and his rights on the host groups cannot be revoked.</p> <p>Here is an overview of every user and his rights:</p> Group rights Zabbix User Zabbix Admin Zabbix Super Admin Read/Write Read Only Full Full Read Only Read Only Read Only Full Deny None None Full Note <p>With all this knowledge, we now know that if we want to create a regular user who also has access to certain parts of the Administration menu, that it's not possible. We can never create a user that has only RO access to certain host groups and RW access to the <code>Administration</code> part. What we could do, however, is create a <code>Super Administrator</code> account and remove access from the menu for certain parts of the <code>Administration</code>menu by creating a special role. There is no limit on the number of roles you can create.</p> Note <p>Also, be aware that when you click on an item on the dashboard on <code>Update</code>, you will see a modal window popup with some options to change the severity, close a problem, etc., so some will be greyed out. This is because the user needs write permissions. For example, a user needs write permissions to close a problem and change the severity level.</p> <p></p> Note <p>With Zabbix 7 Permission checks have been made much faster. This was made possible by making some improvements on how permissions are stored. This should make the frontend faster when when we have permission havy pages to load like the ones with hosts or problems widgets. - New tables have been introduced for the check of non-privileged users. - The new tables will keep hashes (SHA-256) of user group sets and host group sets for each user/host. - Also a new permission table was introduced for storing only the accessible combinations of users and hosts, specified by the hash IDs. - Hashes and permissons are not calculated for Super Admin users.</p>"},{"location":"configuration/zabbix-users/#user-roles","title":"User Roles","text":"<p>User roles have been in Zabbix since version 5.2 and make our lives easier by allowing us to make some custom adjustments to the standard defind user types in Zabbix.</p> <p>When we go to our <code>Permissions</code> tab, we can see a box <code>Role</code>. Press the <code>Select</code> box to see a popup with a list of roles to choose from. There are four standard roles to choose from. You can create your own list of rules by going to the menu <code>Users -&gt; User Roles</code> and create your own limited user.</p> <p>The box is marked with an asterisk in front, so you need to select a user role for every user you create.</p> <p></p> Warning <p>Be aware that no permissions can be added to user roles only permissions can be revoked.</p>"},{"location":"configuration/zabbix-users/#user-groups","title":"User Groups","text":"<p>A user always needs to be member of one or more <code>User groups</code>. We will not set any user rights directly on Users in Zabbix but we do this on User groups. So if a User needs the  permission to view or edit a host or a template then this is set on the <code>User group</code> wich has the permisson to view or edit a host or template group and never on a host or a template directly.</p> <p></p> <p>Zabbix has a few different rights we can use on group level, as we have seen above. To make it easier for you I add them again:</p> Group rights Zabbix User Zabbix Admin Zabbix Super Admin Read/Write Read Only Read/Write Read/Write Read only Read Only Read Only Read/Write Deny None None Read/Write <ul> <li>Read Only : The user has only read access and cannot modify anything.</li> <li>Read/Write : The user can see and edit.</li> <li>Deny: There is not even the options to see any data</li> </ul> <p>When it comes to permissions in Zabbix groups, the highest level will win.  A user that has read and read-write rights on the same host will get read-write permissions. Except for Deny, Deny will always overrule. So if we have a Zabbix <code>Admin</code> user then this user can have Read/Write rights, if we add a host in a hostgroup where our usergroup has read rigths, and the same server is in another hostgroup with Read/Write rights, then our user will have Read/Write permissions on the hosts. However if the same host is only in the <code>Read</code> hostgroup then our user will only have read rights. If we also add host in a Hostgroup where our usergroup has <code>Deny</code> rights then the server will not be visible.</p> <p>Let's have a look at our <code>User groups</code>, for this go to the menu <code>Users -&gt; User groups</code> and click on one of the existing users. I used <code>Guest</code> in this case.</p> <p></p>"},{"location":"configuration/zabbix-users/#user-groups-overview","title":"User Groups Overview","text":"<p>Under the tab <code>User group</code> we see the following options:</p> <ul> <li>User group : A field where we have to specify a unique name. This field in mandatory</li> <li>Users : Here we add users to our group. Users need to exist before we can add them. Just press select or type the name.</li> <li> <p>Frontend Access : How users of the group will authenticate with Zabbix.</p> <ul> <li>System default : The global configure access method</li> <li>Internal : The most easiest way User and Password are configured in Zabbix ( Ignored if HTTP authentication is the global default.)</li> <li>LDAP: LDAP/AD authentication ( Ignored if HTTP authentication is the global default )</li> <li>Enabled : If checked the group is Enabled else it will be Disabled</li> <li>Debug : Activate debug mode for the users in this group More info about debug</li> </ul> </li> <li> <p>The next tab next to <code>User group</code> is the tab <code>Template permissions</code>. Here we can define what <code>User group</code> will have access to what <code>template group</code>. We can define if a <code>User group</code> has read, read-write permissions or if all access must be denied. When selecting a template group don't forget to press the <code>Add</code> button first so that you see the <code>Template group</code> appear in the Permissions box. Then when you are ready confirm again at the bottom of the page with <code>Updqte</code>.</p> </li> </ul> <p></p> <ul> <li>The <code>Hosts permissions</code> tab allows us to specify what <code>User group```` will have what kind of access on the selected</code>Host groups<code>this can again be read, read-write or explicit deny. Just as with the</code>Templates permissions<code>tab don't forget to click</code>Add<code>first and when you are ready defining all the permissions click</code>Update``` at the bottom. The name is a bit confusing as we don't select permissions for a host but a host group.</li> </ul> <p></p> Note <p>If we add multiple lines with the same host group or template group with different permissions Zabbix will apply the strongest permission. Alow be aware that a Super admin user can enforce nested groups to have the same level of permissions as the parent group. It can be done in the host group or template group configuration.</p> <ul> <li>The <code>Problem tag filter</code> allows us to filter problems based on tags and their value. It also allows us to separate the access to host groups from our possibility to see only the problems we want.</li> </ul> <p></p>"},{"location":"configuration/zabbix-users/#lets-do-this-together","title":"Let's do this together:","text":"<p>Let us make three <code>Host groups</code>, go to the <code>Data collection</code> menu -&gt; <code>Host groups</code> and create a Host group for <code>read</code> , <code>read-write</code>, and <code>deny</code>.</p> <p></p> <p>Next step is to create a host and add the host in our three groups. Go to the <code>Data collection</code> menu -&gt; <code>Hosts</code> and press <code>Create host</code> on the right. Add a <code>Host name</code>, the name is not that important and add the three <code>Host groups</code> we just made.</p> <p></p> <p>The only thing we need to do now is create our <code>User</code> and <code>User group</code> and give the correct rights. Go to our menu <code>Users</code> -&gt; <code>Users group</code> and click on the top right to <code>Create user group</code>. Let's call this group our <code>Admin Group</code> as we need a Zabbix <code>Admin</code> that we can give read, read-write and later deny to show this.</p> <p></p> <p>Next go to the tab <code>Host permissions</code> and start typing the name of our group <code>read</code> in the search box or press the <code>Select</code> button and select the correct group. Next before we do anything select also the correct permissions <code>Deny</code> and press the add just below NOT the button. Do this also for the group <code>read-write</code> and <code>deny</code>. If everything looks like in our screenshot then press the <code>Add</code> button</p> <p></p> <p>Now for the final step let's create a user. Go to the menu <code>Users</code> -&gt; <code>Users</code> and create a new user, in the field <code>Username</code> we can add our fictive user with the name Brian. In the <code>Groups</code> box we select our <code>Users group</code> this was <code>Admin Group</code>. Don't forget also to add a Password we need to do this twice. Next go to the tab <code>Permissions</code> and select the role <code>Admin role</code>. You will see directly once selected that our users bridan has read, write and deny on the correct groups. Press <code>Add</code> at the bottom.</p> <p> </p> <p>Now it's time to check if everything is as expected. Our user <code>Brian</code> if all goes well shouldn't have any rights as we explicitly denied accesss. Press <code>Sign out</code> at the bottom left and then login as user <code>Brian</code>. Go to the menu <code>Monitoring</code> -&gt; <code>Hosts</code>. Select all the hosts groups, you should normally only see read, and read-write. Our host group <code>Deny</code> is not visible and our host <code>postgres</code> is not visible either.</p> <p></p> <p>Now log back in as user <code>Admin</code>, our Zabbix Super Admin and remove the deny group from our <code>Admin group</code>. This can be done by selecting the <code>None</code> permissions for the group <code>Deny</code> in the <code>Host permissions</code> tab from our <code>User group</code>.</p> <p>Log back in as our user Brian go back to the <code>Monitoring</code> menu to <code>Hosts</code>. If all goes well our groups <code>read</code> and <code>read-write</code> are still selected if nog you just select them again. You will see that our host <code>postgres</code> is visisble and that you can click on it to edit the host propreties.</p> <p></p> <p>As final test you can try to remove the group <code>read-write</code> same as we did before with the <code>Deny</code> group. This time only the <code>read</code> group will be visible for our user and Brian will not be able to edit our host <code>postgres</code> anymore.</p>"},{"location":"configuration/zabbix-users/#lets-try-out-tags","title":"Let's try out tags","text":"<p>Now let's add tags into the mix. Imagine that we only like to see problems with a tag <code>read-write</code> and value <code>off</code>. Go to <code>User groups</code> select our <code>Admin Group</code> again and go to the tab <code>Problem tag filter</code> and fill in the needed tag <code>read-write</code> and value <code>off</code>.   </p> <p></p> <p>Now we need to create a problem for this we will add an item and a trigger to our host <code>postgres</code>. Go to the menu <code>Data collection</code> -&gt; <code>Hosts</code> and click on items behind our host <code>postgres</code>. On the top right you will see a button <code>Create item</code> click on it and fill in the same data as in the screenshot below. Don't worry if you don't understand anything we will come to items later.</p> <p></p> Note <p>In this item we just tell our Zabbix server to do a ping to IP <code>192.168.10.1</code> make sure this IP doesn't exist in your lan so try to ping it first to be sure you don't get a reply back. If you do get a reply back change the IP with some address that is not pingable for you.</p> <p>Next step once you have filled in all the data is to save the item and click on top on Triggers. You will also notice now that there is a <code>1</code> next to Items. This indicates that we have made 1 item on our host <code>postgres</code>. Now that we are in the trigger tab click in the top right corner on the button <code>Create trigger</code>. Once again copy over all the data from the screenshot and save the trigger. If you changed the IP in the item make sure you use same IP in the trigger.</p> <p></p> <p>Next let's add a tag on our host <code>postgres</code> that tells Zabbix to mark everything on the host with a tag <code>read-write</code> and value <code>on</code>. Remember we added a value <code>off</code> in our <code>User group</code> problem tag filter tab. So we only want to see everything with a tag <code>read-write</code> and value <code>off</code>.</p> <p></p> <p>When you go now to the <code>Problem</code> page in the menu <code>Monitoring</code> you should see after some time a warning that there is a problem on our host postgres. You will also see that the problem got a tag read-write with value <code>on</code>.</p> <p></p> <p>You can clearly see that under our <code>Zabbix super admin</code> user the problem is visible. Now do the same but as user <code>Brian</code>. You will notice that there is no visible problem for our user even he has <code>read-write</code> access to the hostgroup where our server <code>postgres</code> belongs to.</p> <p>Now as user <code>Brian</code> I would like to see the problem so let's go to our menu <code>Data collection</code> and click on our host <code>postgres</code>. Go to the <code>Tags</code> tab and change the value from our tag <code>read-write</code> from on to <code>off</code>. So now everything on our host should get the tags <code>read-write</code> with value <code>off</code>. So now Brian should be able to see the problem right ?  Sadly <code>Brian</code> is still not able to see the problem in our Problem page. This is because the problem was already created in Zabbix and has already received the tag. So the only way to fix this is to close the problem first and let Zabbix create a new problem again.</p> <p>As <code>Super Admin</code> log back in and go to our trigger <code>Ping</code> and mark the box <code>Allow manual close</code> and press <code>Update</code>. Go back to the dashboard and behind the problem ping you will see <code>Update</code>. Click on it and selec the option <code>Close problem</code> and press <code>Update</code>.</p> <p></p> <p>Log back in as our user <code>Brian</code> and go to the problem dashboard. We will see that the problem is back. Even we closed the problem before Zabbix opened a new problem because the issue was not resolved. This time our issue has the tag with the correct value.</p> <p></p> Note <p>A Zabbix user needs to be created with a user role. You cannot create one without. </p> Warning <p>Be careful if you use the API at the time of writing it's possible to create a Zabbix user with the API without a role. When created by the API the user can even be saved by the frontend afterwards !</p> Info <p>More information can be found in the online Zabbix documentation here</p>"},{"location":"data-collection/zabbix-agent/","title":"Zabbix Agent","text":"<p>In this topic we will talk about the Zabbix agent. The Zabbix agent is a native agent made by Zabbix that we can deploy on different Operating Systems and that supports a wide range of build-in items keys. Zabbix has 2 agents we have the <code>Zabbix agent</code> and we have the <code>Zabbix agent 2</code> So when you read in this book about the <code>Zabbix agent</code> we talk about the 1<sup>st</sup> agent. This can sound a bit weird having 2 agents but it's not. The agent was developed years ago when zabbix was first released and is written in C the agent 2 is written in GO and is developed next to the Agent 1. We will see later what the advantages and disadvantages are of both and give you tips to choose the agent that fits best for you. To make things more complex both agents can be configure to work in <code>active</code> or in <code>passive</code> mode or in both. When we create an item on our host and we want to use the item that works with our Zabbix agent we have 2 options to choose from.</p> <p></p> <p>We can create items that are active or passive depending on how our agent has been configured. A zabbix agent can either be active or passive or both active and passive.</p> Note <p>Zabbix 7.0 is backwards compatible with agents back to 1.4 but of course newer item keys added after 1.4 will not be recognized in those older agents. So if you like to use the new items keys it's best to upgrade your agents when you can.</p> <p>Sometimes there are cases when the item keys provided by Zabbix are just not enough.</p> <p>In this case it's possible to extend our agents with UserParameters. This allows us to extend the agent with our own keys based on scripts that we make to extend our agents. This is something we cover in the topic <code>UserParameters</code>.</p> <p>Zabbix has a huge list of items keys it supports on linux but when we select our item keys we have to careful read the documentation careful as some items keys are OS specific. For example there are item keys that only work on MS Windows.</p> <p>https://www.zabbix.com/documentation/7.0/en/manual/config/items/itemtypes/zabbix_agent/win_keys</p> <p>Some item keys can only be used on the new Agent 2.</p> <p>https://www.zabbix.com/documentation/7.0/en/manual/config/items/itemtypes/zabbix_agent/zabbix_agent2</p> <p>Here is a list of the item keys that will work on Linux. But also here be careful as some things can be different depending on the OS or the kernel version.</p> <p>https://www.zabbix.com/documentation/7.0/en/manual/config/items/itemtypes/zabbix_agent</p> <p>When we want to add an item we can either lookup the item in the online documetation, try to remember it and just write it in the box or press the select button next to the item field. This will give a popup with a short explanation about what the items does.</p> <p></p> <p>However you will see that it's lacking lots of information. My advice is to use the online documentation.</p> <p>So in this topic we will explain you all the differences :</p> <ul> <li>Zabbix Agent (Legacy)</li> <li>Zabbix Agent 2</li> <li>Agent vs Agent 2</li> <li>Active Agent</li> <li>Passive Agent</li> <li>Active vs Passive</li> <li>Zabbix agent Linux</li> <li>Zabbix agent Windows</li> </ul>"},{"location":"data-collection/zabbix-agent/#zabbix-agent-legacy","title":"Zabbix Agent (Legacy)","text":"<p>Our Zabbix agent or the legacy agent can run on a whole set of supported platforms. At the time of writing the agent on Zabbix 7 supports:</p> <ul> <li>Linux (Redhat, Suse, Ubuntu, Debian, Rocky, Alma, ...)</li> <li>FreeBSD</li> <li>Windows</li> <li>MacOS</li> <li>Raspberry Pi</li> <li>HPUnix</li> <li>OpenBSD</li> <li>AIX</li> <li>Solaris</li> </ul> Info <p>A full up to date list can be found here https://www.zabbix.com/download</p> <p>The agent can be installed on a host to collect data from that host or from an application running on that host. The advantage is that the agent has a very small footprint and that we can extend the agent by creating our own scripts. Agents can work in active or in passive mode or can do this in both ways simultaniously.</p> <p>The legacy agent can be extended with modules that are written in C. More information about modues can be found in the Zabbix documentation https://www.zabbix.com/documentation/7.0/en/manual/extensions/loadablemodules.</p> <p>The Zabbix agent will run with limited privileges and user <code>zabbix</code>. With the legacy agent this can be changed easy if you want.</p> <p>In the config file there is an option <code>User=zabbix</code> that can be changed. This however will not work if you are like 99% running on an OS that uses SystemD. Same it's not possible to run the agent with <code>root</code> privileges by enabeling the option <code>AllowRoot</code>. Changing these options will only work on non SystemD systems.</p> <p>What we need to do is change the SystemD service for our <code>zabbix-agent</code>.</p> <p><code>systemctl edit zabbix-agent</code></p> <p>Next we have to add the following content. If you like to run as another user then root then just create an account and replace root with this account.</p> <pre><code>[Service]\nUser=root\nGroup=root\n</code></pre> <p>Exit the file and save it. We now have to tell SystemD to reload the config by running the next command.</p> <pre><code>systemctl daemon-reload\n</code></pre> <p>The only thing that rests us now is restarting the <code>zabbix-agent</code> so that it picks up the config changes.</p> <pre><code>systemctl restart zabbix-agent\n</code></pre> Warning <p>Running the Zabbix agent under root privileges is not recommended. It's a high security risk but in some cases it is maybe needed and then this is your only solution. </p> Note <p>The agent will inculde by default all the files under /etc/zabbix/zabbix_agentd.d/ with extension .conf. Its good practice to not edit the standard config file and just add your changes in a dedicated file in this folder.</p>"},{"location":"data-collection/zabbix-agent/#zabbix-agent-2","title":"Zabbix Agent 2","text":"<p>The Zabbix Agent2 is the new generation of agent and is written in GO. Because of this i's not possible to install the Agent 2 on systems like BSD or HPUniX. At the moment there are only clients for linux and Windows.</p> <p>Since </p> Info <p>A full up to date list can be found here https://www.zabbix.com/download If your OS supports GO and there are no packages you could always try to download the source and compile it by your own.</p> <p>Our agent 2 can be extended with plugins just like the Agent was extensible with modules. However plugins are way more advanced then the modules on agent 1 and there is already an extensive list of modules that are supported. The full list can be found here https://www.zabbix.com/documentation/7.0/en/manual/appendix/config/zabbix_agent2_plugins.</p> <p>Running the Agent2 under root or another non privilege account is more or less the same as with the legacy agent. This agent only runs on Linux systems with SystemD.</p> <p><code>systemctl edit zabbix-agent2</code></p> <p>Next we have to add the following content. If you like to run as another user then root then just create an account and replace root with this account.</p> <pre><code>[Service]\nUser=root\nGroup=root\n</code></pre> <p>Exit the file and save it. We now have to tell SystemD to reload the config by running the next command.</p> <pre><code>systemctl daemon-reload\n</code></pre> <p>The only thing that rests us now is restarting the <code>zabbix-agent</code> so that it picks up the config changes.</p> <pre><code>systemctl restart zabbix-agent2\n</code></pre> <p>The plugins have their own timeout settings and the agent will do a compatibility check when it starts up.</p> <p>Another advantage of the agent2 is that it supports scheduled and flexible intervals for active and for passive checks. Something that is not possible with the agent.</p> <p>Plugins can execute tasks in parallel and scaling up to 1000 workers per plugin. Every plugin has it's own set of configuration parameters. The syntax used for this is <code>Plugins.&lt;PluginName&gt;.&lt;Parameter&gt;=&lt;Value&gt;. As example the plugin to configure the logging of remote commands looks like</code>Plugins.SystemRun.LogRemoteCommands=0```.  Some of the plugins even work with together with templates. This makes it easy so configure some settings by changing macro values in the templates. Some more advanced parameters can then still be adjusted in the config of the plugin.</p> Warning <p>Running the Zabbix agent under root privileges is not recommended. It's a high security risk but in some cases it is maybe needed and then this is your only solution.</p> Note <p>The agent will inculde by default all the files under /etc/zabbix/zabbix_agent2.d/ with extension .conf. Its good practice to not edit the standard config file and just add your changes in a dedicated file in this folder.</p>"},{"location":"data-collection/zabbix-agent/#agent1-vs-agent2","title":"Agent1 vs Agent2","text":"Parameter Agent Agent 2 Programming language C Go and some parts in C Linux daemonization Yes By systemd only Run as Windows service Yes Yes Supported extensions Loadable Modules in C Plugins in Go Supported platforms All Linux, Window, any OS with GO Concurrency Active checks are executed sequentialy All check executed concurrently Scheduled/flexible intervals Passive check only Acive and Passsive checks Persistent storage No Yes (SQLite3) Timeout settings On agent level only Plugins can override the timout Changes user at runtime Yes (on Unix like sytems only) No (controlled by SystemD Cipersuits user configurable Yes No Info <p>For more details bout the differences check the official documentation. https://www.zabbix.com/documentation/6.0/en/manual/appendix/agent_comparison</p> <p>We can detect the generation from the agent by using the <code>agent.variant</code> item key this will return us 1 for the legacy agent and 2 for agent2. agent.variant</p>"},{"location":"data-collection/zabbix-agent/#active-agent","title":"Active Agent","text":""},{"location":"data-collection/zabbix-agent/#passive-agent","title":"Passive Agent","text":""},{"location":"data-collection/zabbix-agent/#active-vs-passive","title":"Active vs Passive","text":""},{"location":"data-collection/zabbix-agent/#userparameters","title":"UserParameters","text":""},{"location":"data-collection/zabbix-agent/#zabbix-agent-linux","title":"Zabbix agent Linux","text":"<p>The agent can be installed on Linux in different ways. The most easy way however is probably installing the agent from Package.</p> <p>Most of the popular operating systems are supported by Zabbix and installation instrucations are provided on the Zabbix webpage when you go to https://www.zabbix.com/download</p> <p>Here we just have to choose that we like to install from Zabbix packages and choose our OS and the version. Then we just need to follow the instructions to add the repository to our OS. From here we can install the Agent.</p> <p></p> <p>After selecting the correct settings we get to see the instructions how to add our repo to the OS.</p> <p></p> <p>In case your OS was not in the list there is still the option to download the agents pre compiled. Choose <code>Zabbix agents</code> and select your correct kernel version.</p> <p></p> <p>Then select the Zabbix release and press <code>Download</code> to get a binary version.</p> <p></p> <p>If all this fails then there is still the option to download the source and compile the agent yourself.</p> <p>The Agent can be installed from the reposity with <code>dnf install zabbix-agent</code> after the installation the configuration files can be found at <code>/etc/zabbix/zabbix_agentd.conf</code>. The log files will be written in <code>/var/log/zabbix_agentd.log</code> by default.</p> <p>The Agent2 can be installed from our repository with <code>dnf install zabbix-agent2</code>. After the installation, the configuration files can be found at <code>/etc/zabbix/zabbix_agent2.conf</code>. The log files will be written in <code>/var/log/zabbix_agent2.log</code> by default.</p>"},{"location":"data-collection/zabbix-agent/#zabbix-agent-windows","title":"Zabbix agent windows","text":""},{"location":"extra-monitoring/IPMI-monitoring/","title":"IPMI Monitoring","text":"<p>We have already seen a few ways to monitor with Zabbix what we havent seen yet is monitoring with IPMI.  IPMI stands for <code>Intelligent Platform Management Interface</code> and is usually an extra interface in your hardware that needs to be added. It's a set of standard specification for hardware platforms that allows to control and monitor the hardware.</p> <p>An IPMI system has several key components:</p> <ul> <li>BMC (Baseboard management controller) : This is a microcontroller that monitors and manages the hardware of the system independently even when the server is offline.</li> <li>IPMB (Intelligent platform management bus) : This is a framework that allows interactions between all the IPMI components. This is the most important part for us as it has a key role in system monitoring by supporting sensor data collection and the execution of control commands.</li> <li>IPMI Memory : All sensor data, configuration settings and event logs will be stored in memory to make it easier to run diagnostics during failures when the server is offline.</li> <li>Dedicated management network : This network is designed explicitly for IPMI traffic, providing a reliable channel of communication with the BMC.</li> </ul> <p>The features that are provided by IPMI are:</p> <ul> <li>Out-of-band management:  A feature that enables the remote management of servers independently of the operating system and it's status. It is neededfor performing firmware updates, troubleshooting, and executing recovery procedures without the need for direct physical access to the hardware.</li> <li>Hardware monitoring : IPMI provides real-time information  of critical system parameters, like temperature, voltage, fan speed, power consumption, disk health, .... . By monitoring these metrics, IPMI can help to quicklyidentify and address potential issues before they escalate.</li> <li>Event logging: The System Event Log (SEL), records system events, this will offering valuable resources for post-event analysis and troubleshooting.</li> <li>Remote power control: This offers administrators control over the equipment's power state from a distance. It maes it easy to turn devices on/off, performing resets, and cycling power for system management and recovery.</li> <li>Virtual media: IPMI enables mounting remote storage devices as though they were physically connected to the server, this makes remote installations more easy.</li> <li>Security features: IPMI includes security to authenticate user identity and control access permissions. This ensures only authorized users can access.</li> </ul> Note <p>When writing, the landscape of IPMI is defined by two prominent versions: 1.5 and 2.0. Although both versions are in active use, IPMI 2.0 is distinguished by its advanced features, heightened security measures, and superior performance, making it the preferred option for modern server management.</p> <p>In this chapter you will learn how to :</p> <ul> <li>Configuring an IPMI device</li> <li>Configure Zabbix to monitor an IPMI device</li> <li>Setting up an IPMI item</li> <li>Configure LLD with IPMI</li> <li>Monitor discrete sensors</li> </ul>"},{"location":"extra-monitoring/IPMI-monitoring/#configuring-an-ipmi-device","title":"Configuring an IPMI device","text":"<p>Usually you need some hardware device with an IPMI interface. This can be for example a iDrac interface from DELL or an ILO interface from HP. Every hardware vendor has some card based on IPMI but names can be vendor specific</p> <p>If you don't have a hardware device that supports open IPMI don't worry you can install an ipmi simulator. It does not provide any network information but provides the basic functionality to play with.</p> <p>To Install the container run the following commands:</p> <pre><code>sudo dnf install podman\nsudo podman pull vaporio/ipmi-simulator\nsudo podman run --name ipmi_simulator --publish 623:623/udp docker.io/vaporio/ipmi-simulator:latest\nsudo dnf install ipmitool\n</code></pre> <p>Once done everything should be up and running and we can test to see if we can connect to it .</p> <pre><code>ipmitool -H 127.0.0.1 -U ADMIN -I lanplus -P ADMIN chassis status\n</code></pre> <p>if you like to do it from another VM that is also possible we will have to do it later from our Zabbix server anyway but then don't forget to open the firewall port 623/udp.</p> <pre><code>firewall-cmd --add-port=623/udp --permanent\nfirewall-cmmd --reload\n</code></pre> Note <p>It's good to know that IPMI is not free from security problems. Intel , Dell, HP , ... even encourage not to use it and we should not expect any updates on the IPMI specifications in the future. https://www.intel.com/content/www/us/en/products/docs/servers/ipmi/ipmi-home.html?wapkw=ipmi</p>"},{"location":"extra-monitoring/IPMI-monitoring/#configure-zabbix-to-monitor-an-ipmi-device","title":"Configure Zabbix to monitor an IPMI device","text":"<p>Before we can start configuring items in Zabbix we need to configure the Zabbix server to start some IPMI pollers. This can be done in the <code>zabbix_server.conf</code> file. Zabbix relies on the OpenIPMI library to monitor IPMI. So to get things started let's edit <code>/etc/zabbix/zabbix_server.conf</code> and change the line <code># StartIPMIPollers=0</code>.</p>"},{"location":"extra-monitoring/IPMI-monitoring/#setting-up-an-ipmi-items","title":"Setting up an IPMI items","text":"<p>Before we can dive into Zabbix and start adding items we need to be sure we have access to our IPMI. IPMI makes use of port 623 and works on top of UDP, so it's in the OSI 5-7 range so we need to be sure there is no firewall blocking this port. Make sure you have enough pollers in the <code>zabbix_server.conf</code>  for example <code>StartIPMIPollers=3</code> and dont forget to restart the server.</p> <p>We can test the access to the IPMI console with the following command:</p> <pre><code>ipmitool -U &lt;User&gt; -H &lt;IP address of the IPMI host&gt; -I lanplus -P &lt;password&gt; -L user sensor\n</code></pre> <p>The -L is to give user access so that we dont need any administrative privileges. The <code>lanplus</code> option instructs our ipmitool to use the IPMI 2.0 Lan interface and the sensor queries the host for a list of available sensors. You could launch the command without the word sensor then the command will return you a list of options to choose from.</p> <p>+??? info     We have used the openipmi tool so far to query the IPMI interface Zabbix however uses the OpenIPMI library for this. So a working ipmitool is not guarantee that Zabbix will work or vice versa. Also if you use the container for testing then the last command will not work as the test container is rather limited in what it can do. For more options check out the webpage of the owner https://github.com/vapor-ware/ipmi-simulator.</p> <p>Let us launch the following command to see the Power status of our machine:</p> <pre><code># ipmitool -H 192.168.0.23 -U ADMIN -I lanplus -P ADMIN chassis power status\nUnable to Get Channel Cipher Suites\nChassis Power is \n</code></pre>"},{"location":"extra-monitoring/IPMI-monitoring/#_1","title":"IPMI Monitoring","text":""},{"location":"extra-monitoring/IPMI-monitoring/#configure-lld-with-ipmi","title":"Configure LLD with IPMI","text":""},{"location":"extra-monitoring/IPMI-monitoring/#monitor-discrete-sensors","title":"Monitor discrete sensors","text":""},{"location":"extra-monitoring/SNMP-monitoring/","title":"SNMP Monitoring","text":"<p>In this topic we will explain you how to monitor devices over SNMP.</p>"},{"location":"extra-monitoring/SNMP-traps-monitoring/","title":"SNMP trap monitoring","text":"<p>If you have been reading previous topic about SMNP monitoring then you know by now that SNMP monitoring is all about polling information form a device. However there is another way to gather information from a device with SNMP that does not expect us to poll for information but that accepts information being sent from the SNMP device to our Zabbix server or Proxy. This is what we call SNMP traps.</p> <p>Traps are sent from a device to our Zabbix server or proxy and usually are only being sent when there is a change in the status of a device. Traps also dont use TCP but are being sent over UDP to port 162. So why would we use traps as we already can poll SNMP devices ?</p> <p>Well first of all let's imagine there is a short fluke in the power of your switch for only a second. This would never be noticed by Zabbx as we usually poll an item once per minute or even less. If we had to poll every second it would create a huge load on the device and we would maybe overload it and we would need also a more beefy Zabbix server if we had to to this for every item.</p> <p>A trap is sent when a problem is detected so this is extra data that else would probably be missed by Zabbix. There are of course some disadvantages with traps else we would only use traps and never poll for problems. The problem with traps is that they are sent over UDP and the problem with UDP is that packages are being sent without waiting for any acknowledgement that they have arrived at the destination. It's a bit like talking to your wife not even knowing she is in the same room and then thinking she has understood you.</p> <p>We all know how that works out ....</p> <p>So the best way to monitor SNMP devices is probably an implementation of both SNMP polling and SNMP traps.</p> <p>There is one small problem that is not really a problem but complicates things a bit and that is that Zabbix has no build in trap receiver. Zabbix can use SNMP traps but it needs to rely on the OS for this and so we need to install snmptrapd to catch traps when they are bein sent to our Zabbix server/proxy .</p> <p>Once we have catched the trap we need to process the trap to make it readable by Zabbix and for this there are 2 ways:</p> <ul> <li>We can make use of a script usually a perl script that is delivered with the sourcecode from Zabbix or a bash script</li> <li>by making use of SNMPTT.</li> </ul> <p>Since there are 2 solutions it makes sense that they both have advantages and disadvantages as you probably already know.</p> <ul> <li>The perl/bash script is the most easy solution and quit performant but more difficult to make customizations so less flexible.</li> <li>The SNMPTT,snmptrapfmt, ...  is more complex but give more flexiblity.</li> </ul> <p>This table will give us a short overview of the differences between the 2 solutions:</p> Perl Script SNMPTT MIBS Not Required Required Trap formatting Script Config file Trap matching snmptrap[\"PCRE\"] snmptrap[\"PCRE\"] Unknown traps snmptrap.fallback Configuration file Acc or reject trap No Yes Search and replace No Yes <p>The perl script is the most easy way so if you don't need any of the fancy features that are not possible with the perl script it's probably best to stick to this script. In this book we will cover the script. The other way is more or less the same but you will have to do some tuning yourself on the config of SNMPTT or other solution.</p> <p>The script can be found in the source code. You can download the source here. Once downloaded you can find the perl script in the folder <code>/misc/snmptrap/zabbix_trap_receiver.pl</code> If you can not use perl you can find the bash script in the same location.</p>"},{"location":"extra-monitoring/SNMP-traps-monitoring/#setting-up-snmptraps","title":"Setting up snmptraps","text":"<p>Now that we know a bit more about snmptraps let's set it up and configure our Zabbix server. Traps are sent to the zabbix server so in case we have a proxy insteqd of the zabbix server we need to send traps to the proxy.</p> Warning <p>At this moment Zabbix has loadbalancing for proxies implemented but there is no support for SNMP traps in this case. So only the active proxy will accept traps.</p>"},{"location":"extra-monitoring/SNMP-traps-monitoring/#configure-snmp-traps-on-our-system-with-snmptrapd","title":"Configure SNMP traps on our system with snmptrapd","text":"<p>First thing first we will have to open our firewall if we want to accept traps. Traps are being sent over UDP and arrive on port 162 so let's open a port.</p> <pre><code># firewall-cmd --add-port=162/udp --permanent\n# firewall-cmd --reload\n</code></pre> <p>Next we need to install the net-snmp, net-snmp-utils package and the net-snmp-perl package for our perl script to work with snmptrapd.</p> <pre><code>dnf install -y net-snmp net-snmp-utils net-snmp-perl\n</code></pre> <p>Copy our zabbix_trap_receiver file to /usr/bin/ and make it executable</p> <pre><code># cp zabbix_trap_receiver.pl /usr/bin/.\n# chmod +x /usr/bin/zabbix_trap_receiver.pl\n</code></pre> <p>We can now configure <code>snmptrapd</code>  and tell our server what traps it should accept.</p> <pre><code># vi /etc/snmp/snmptrapd.conf\nadd the following line\n</code></pre> <pre><code>authCommunity execute public\nperl do \"/usr/bin/zabbix_trap_receiver.pl\";\n</code></pre> <p>This line will tell our <code>snmptrapd</code> to accept all the traps that are being sent to our device with the community string set as public. so please adapt it to your needs.</p> <p>We also need to tell our Zabbix server to start up the trapper process this can be done in the configuration file of the server. Edit the following file </p> <pre><code># vi /etc/zabbix/zabbix_server.conf\n</code></pre> <p>And look for the line with the parameter <code>StartSNMPTrapper=</code> and make sure that the line is active by removing the # in front and replace <code>0</code> with <code>1</code> so that Zabbix knows it needs to activate the trapper for SNMP</p> <pre><code>StartSNMPTrapper=1\n</code></pre> <p>There is another parameter that we need to configure and that is <code>SNMPTrapperFile=</code>. Same here make sure that the line is active by removing the <code>#</code> in front and poit to the location of the location where Zabbix can read the traps that are written by our perl script. If it's not the same then adapt the script or zabbix_server.conf file so thqt in both files the location point to the same path: The perl script will write with trap information in this file and Zabbix server will look for this file to read the information.</p> <pre><code>SNMPTrapperFile=/var/log/snmptrap/snmptrap.log\n</code></pre> <p>Make sure the folder exists</p> <pre><code>mkidr /var/log/snmptrap/\n</code></pre> <p>Once everything is done restart the Zabbix server so that it picks up the config changes.</p> <pre><code># systemct restart zabbix-server\n</code></pre> <p>Also enable <code>snmptrapd</code> and make sure it starts at boot.</p> <pre><code># systemctl enable snmptrapd --now\n</code></pre> <p>There is one thing we need to do extra and that is to configure log rotate. Snmptrapd will sent traps to the <code>/var/log/zabbix_traps.tmp</code> file and the file weill keep growing and growing so we need to make sure logrotate will cleanup from time to time.</p> <p>Zabbix is not managing the trap file so we need to create the logrotate config for our trap file else it will keep growing over time</p> <pre><code># vi /etc/logrotate.d/zabbix_traps\n</code></pre> <p>Copy following content in to this file and adqpt to your own needs.</p> <pre><code>/var/log/snmptrap/snmptrap.log { \n   weekly \n   size 10M \n   compress \n   notifempty \n   dateext \n   dateformat -%Y%m%d \n   olddir /var/log/snmptrap/\n   maxage 365 \n   rotate 10 \n} \n</code></pre>"},{"location":"extra-monitoring/SNMP-traps-monitoring/#testing-if-traps-are-received","title":"Testing if traps are received","text":"<p>To see if we can receive traps let's run a few tests on our system. In case things don't work as expected verify every step again  see that snmptrapd is calling the perl script on the correct location ,verify that your community names are correct, make sure snmptraps are active in the Zabbix server configureation. And in your perl script check that file will be written to the correct folder and that the script is executable.</p> <pre><code>- # snmptrap -v 1 -c public 127.0.0.1 '.1.3.6.1.6.3.1.1.5.4' '0.0.0.0' 6 33 '55' .1.3.6.1.6.3.1.1.5.4 s \"enp0s1\"\n</code></pre> <p>If all goes well we should now see in our log file the trap </p> <pre><code># cat snmptrap.log\n\n2024-06-08T19:03:08+0200 ZBXTRAP 127.0.0.1\nPDU INFO:\n  messageid                      0\n  requestid                      0\n  version                        0\n  community                      public\n  notificationtype               TRAP\n  errorstatus                    0\n  receivedfrom                   UDP: [127.0.0.1]:32790-&gt;[127.0.0.1]:162\n  errorindex                     0\n  transactionid                  5\nVARBINDS:\n  DISMAN-EVENT-MIB::sysUpTimeInstance type=67 value=Timeticks: (55) 0:00:00.55\n  SNMPv2-MIB::snmpTrapOID.0      type=6  value=OID: IF-MIB::linkUp.0.33\n  IF-MIB::linkUp                 type=4  value=STRING: \"enp0s1\"\n  SNMP-COMMUNITY-MIB::snmpTrapCommunity.0 type=4  value=STRING: \"public\"\n  SNMPv2-MIB::snmpTrapEnterprise.0 type=6  value=OID: IF-MIB::linkUp\n</code></pre> <p>We can now do the same for a snmp trap v2</p> <pre><code>- # snmptrap -v 2c -c public localhost '' 1.3.6.1.4.1.8072.2.3.0.1 1.3.6.1.4.1.8072.2.3.2.1 i 123456\n</code></pre> <p>This should return the following information</p> <pre><code># cat snmptrap.log\n\n2024-06-08T19:03:08+0200 ZBXTRAP 127.0.0.1\nPDU INFO:\n  messageid                      0\n  requestid                      0\n  version                        0\n  community                      public\n  notificationtype               TRAP\n  errorstatus                    0\n  receivedfrom                   UDP: [127.0.0.1]:32790-&gt;[127.0.0.1]:162\n  errorindex                     0\n  transactionid                  5\nVARBINDS:\n  DISMAN-EVENT-MIB::sysUpTimeInstance type=67 value=Timeticks: (55) 0:00:00.55\n  SNMPv2-MIB::snmpTrapOID.0      type=6  value=OID: IF-MIB::linkUp.0.33\n  IF-MIB::linkUp                 type=4  value=STRING: \"enp0s1\"\n  SNMP-COMMUNITY-MIB::snmpTrapCommunity.0 type=4  value=STRING: \"public\"\n  SNMPv2-MIB::snmpTrapEnterprise.0 type=6  value=OID: IF-MIB::linkUp\n2024-06-08T19:05:31+0200 ZBXTRAP 127.0.0.1\nPDU INFO:\n  notificationtype               TRAP\n  community                      public\n  messageid                      0\n  requestid                      2002881661\n  version                        1\n  transactionid                  6\n  errorindex                     0\n  receivedfrom                   UDP: [127.0.0.1]:53810-&gt;[127.0.0.1]:162\n  errorstatus                    0\nVARBINDS:\n  DISMAN-EVENT-MIB::sysUpTimeInstance type=67 value=Timeticks: (218161) 0:36:21.61\n  SNMPv2-MIB::snmpTrapOID.0      type=6  value=OID: NET-SNMP-EXAMPLES-MIB::netSnmpExampleHeartbeatNotification\n  NET-SNMP-EXAMPLES-MIB::netSnmpExampleHeartbeatRate type=2  value=INTEGER: 123456\n</code></pre> <p>First trap has sent us the name of our networkcard the second trap has sent us the value <code>123456</code>.</p>"},{"location":"extra-monitoring/SNMP-traps-monitoring/#create-a-trap-item-in-zabbix","title":"Create a trap item in Zabbix","text":"<p>So we have our traps working but there is still something missing. We don't see any traps yet in Zabbix. This is because we have not created an item yet. We still have to tell zabbix to look in our trap file for items that we like to monitor.</p> <p>Zabbix can monitor for specific items like for example the trap with the networkcard we just sent or in case we don't know what exact item will arrive Zabbix has also a fallback option. Let's create both items so that we have an idea how to do this.</p>"},{"location":"extra-monitoring/SNMP-traps-monitoring/#create-a-fallback-item","title":"Create a fallback item","text":""},{"location":"extra-monitoring/SNMP-traps-monitoring/#create-a-specific-item","title":"Create a specific item","text":"<p>Before we can create an item we have to add a <code>SNMP</code> host interface on our host. Go to <code>Data collection</code> -&gt; <code>Host</code> click on the host where you would like to sent the trap to and add a <code>SNMP</code> host interface with the correct IP of your host. In my case I am sending a trap to the zabbix server with the loopback interface as the IP. This will be different for every host. Zabbix will look in your log file and match the IP in the log with the host in your Zabbix setup.</p> <p>Also for this to work you will have to disable <code>SeLinux</code> as it will block or Zabbix server from accessing the log file. So don't forget to fix this afterwards. to temporary disable run <code>setenforce 0</code>.</p> <p></p> <p>Once you have added your SNMP interface go to <code>Data collection</code> -&gt; <code>Hosts</code> and click on items behind the name of your hosts. Let's create or fallback item by clicking on <code>Create item</code> in the upper right corner.</p> <p>When you see the popup to create the new item we have to add a few things copy everything I will explain later what it does.</p> <p>Name : SNMP Fallback Type : SNMP trap Key : snmptrap.fallback Type of information : Numeric Host interface :  <p></p> <p>Go to the tab Preporcessing and fill in the following information for our Preprocessing setp 1:</p> <ul> <li>Name: Regular expression </li> <li>Parameters: INTEGER:.(\\d+)</li> <li>after the parameter field there is another field here you can fill in : \\1</li> </ul> <p></p> <p>So let us explain quick what we just filled in. The name is just the name that will be visible in our latest data page etc for our item. The type we have to select <code>SNMP trap</code> as we are monitoring for incoming SNMP traps. The key is freeform and needs to be unique so we just choose something that makes sense in this case <code>snmptrap.fallback</code> as this item is a catch all item. Type of information I have chosen numeric usually you will want to keep it as text. I have chosen numeric because with preprocessing I will extract a numeric value from our test trap.</p> <p>In the <code>Preprocessing tab</code>  We added a regular expression in Perl this expression will look for the line starting with <code>INTEGER:</code> and the numeric value behind it. by adding ( ) we created a group. the \\1 is a selector for the number of groups we like to extract in this case we have only 1 group so we look for group 1</p> <p>Sent the following trap to your zabbix server and replace the IP with the IP of the hosts you have added. </p> <pre><code>snmptrap -v 2c -c public 127.0.0.1 '' 1.3.6.1.4.1.8072.2.3.0.1 1.3.6.1.4.1.8072.2.3.2.1 i 123456\n</code></pre> <p>Just run the trap on your Zabbix server and have a look in the latest data page of your hosts Monitoring -&gt; Latest data and fill the name in of your <code>host</code> in the <code>Hosts</code> field. In the <code>Name</code> field you can filter for fallback if there are too many items</p> <p></p> <p>Adding a specific SNMP trap item works exactly the same only here we dont use the item key <code>snmptrap.fallback</code> but the item key <code>snmptrap[regex]</code>. So in our case it will be snmptrap[123456].</p> <p>Create the same item as before but don't add any Preprocessing rules this time.</p> <p></p> <p>Let's send the trap again and go to latest data to see what we have received this time.</p> <pre><code>snmptrap -v 2c -c public 127.0.0.1 '' 1.3.6.1.4.1.8072.2.3.0.1 1.3.6.1.4.1.8072.2.3.2.1 i 123456\n</code></pre> <p></p> <p>It looks like something went wrong in latest data we got a warning. This warning as in the screenshot above can be seen when you go with your mouse over the <code>i</code> in red at the end of you item.</p> <p>So what happened here is that Zabbix looks for a regex in this case <code>123456</code> it has found in the trap the value <code>123456</code> and it will show us the complete trap.</p> <p>So we have 2 options here :</p> <ul> <li>We can change the item it's <code>type of information</code> to <code>Text</code> and choose to see the whole trap. or </li> <li>We can add again a Preprocessing step like we did with our fallback and filter for the numbers <code>123456</code>.</li> </ul> <p>Once this is done our items will work.</p>"},{"location":"extra-monitoring/SNMP-traps-monitoring/#working-with-snmpv3-traps","title":"Working with SNMPv3 Traps","text":"<p>If you like to use SNMPv3 devices and protect the traps that are being sent then this is also possible. It works like with SNMPv1 and v2 we just have to change the config in our snmptrapd config and add the following lines.</p> <pre><code>createUser -e &lt;engineid&gt; &lt;user&gt; SHA &lt;key&gt; AES &lt;key&gt;\nauthUser log,execute &lt;user&gt;\nperl do \"/usr/bin/zabbix_trap_receiver.pl\";\n</code></pre> <p>This will make sure snmptrapd will catch our SNMPv3 traps and sent them to our perl script. </p> Note <p>An engine ID should be unique for every device you can't have devices with the same <code>engineid</code> so for every device you will have to add a line in the config file.</p> Tip <p>The PDU info can be removed from the zabbix_trap_reciever.pl in case you dont like it</p> <p>Remove the folowing lines in the perl script or add a <code>#</code> in front :</p> <pre><code>        # print the PDU info\n        print OUTPUT_FILE \"PDU INFO:\\n\";\n        foreach my $key(keys(%pdu_info))\n        {\n                if ($pdu_info{$key} !~ /^[[:print:]]*$/)\n                {\n                        my $OctetAsHex = unpack('H*', $pdu_info{$key}); # convert octet string to hex\n                        $pdu_info{$key} = \"0x$OctetAsHex\";              # apply 0x prefix for consistency\n                }\n\n                printf OUTPUT_FILE \"  %-30s %s\\n\", $key, $pdu_info{$key};\n        }\n</code></pre>"},{"location":"extra-monitoring/SNMP-traps-monitoring/#some-useful-links","title":"Some useful links","text":"<ul> <li>https://www.unix.com/man-page/redhat/8/logrotate/</li> <li>https://www.netreo.com/blog/snmp-traps-definition-types-examples-best-practices/</li> <li>https://www.zabbix.com/documentation/7.0/en/manual/config/items/itemtypes/snmptrap</li> <li>https://net-snmp.sourceforge.io/wiki/index.php/TUT:Configuring_snmptrapd</li> <li>https://net-snmp.sourceforge.io/wiki/index.php/TUT:Configuring_snmptrapd_to_receive_SNMPv3_notifications</li> </ul>"},{"location":"extras/contributors/","title":"Contributors","text":"<p>Thanks to all the contributors to this book for helping me with translations and articles. Let me know if you don't see your name and have contributed to this book.</p> <ul> <li>Bgmot - https://bgmot.com/</li> <li>Jason Drummond - https://www.linkedin.com/in/jason-drummond/</li> <li>David Moreau - https://github.com/david-moreau</li> </ul>"},{"location":"extras/modbus/","title":"Modbus monitoring with Zabbix.","text":""},{"location":"extras/modbus/#introduction","title":"Introduction","text":"<p>MODBUS TCP is a technology that takes MODBUS RTU packets and encapsulates this in a TCP/IP wrapper for communication over a network instead of typical RS485 serial connections. MODBUS as a technology has been around since 1979 and is one of the de-facto industrial application protocols commonly found in HVAC controllers, Generator controllers and a multitude of other PLC devices. Zabbix has the ability to monitor MODBUS using a Zabbix agent. If the Zabbix agent is running on a machine with a serial connection to the Modbus device, this monitoring can be done over serial communications.  If the Modbus device is connected to a TCP/IP network, the Zabbix agent will still be required for sending/receiving commands. TCP port 502 is commonly used for modbus TCP communications.</p> <p>In this example, all generator PLCs are connected to a TCP/IP network.</p> <p></p> <p>Due to the nature of the network used for this example, a Zabbix proxy is also required. In this case the Zabbix proxy server is a docker container on a virtual machine that can reach  both the Zabbix server network and the network the PLC devices are connected too. The Zabbix agent that is needed for the Modbus commands is also running as a docker container on the same virtual machine as the Zabbix proxy server. Different networks may require different solutions. The common element for all networks for Modbus monitoring is there needs to be a Zabbix agent that can interface with the Modbus devices.</p> <p></p> <p>In this screenshot is the initial template creation step. The template group used in this screen shot is templates/power as this example will be using a generator PLC. Templates should be named in a self explanatory way.  If monitoring a Horner XL4 PLC, it would be best to name the template \u201cHorner XL4\u201d</p> <p></p> <p>Before adding in the template, add in a default Macro under the tab macros wich is called {$DEVICE_CONNECTION} and set the value to \u201ctcp://127.0.0.1:502\u201d. Later when adding in hosts, each host that is added in will overwrite this value with the actual value of the connection string for that particular host. This will allow for troubleshooting in the future if communications are not established with a host.</p>"},{"location":"extras/modbus/#template-item-creation","title":"Template Item creation","text":"<p>For a detailed explanation of all the modbus.get parameters see the Zabbix documentation:</p> <p>https://www.zabbix.com/documentation/7.0/en/manual/appendix/items/modbus</p> <p>The item key for modbus.get looks like this:</p> <pre><code>modbus.get[&lt;endpoint&gt;,&lt;slaveid&gt;,&lt;function&gt;,&lt;address&gt;,&lt;count&gt;,&lt;type&gt;,&lt;endianness&gt;,&lt;offset&gt;]\n</code></pre> <p>For creating the template of the item, in this example the following values will be set:</p> <ul> <li>Endpoint \u2013 the protocol/connection string in this example this is set to {$DEVICE_CONNECTION}</li> <li>Slaveid \u2013 for Serial communications, multiple Modbus can be on the same serial connection and this value allows addressing of those devices. For this TCP example, this value will be 1</li> <li>Function \u2013 1 - Read Coil, 2 - Read Discrete Input, 3 - Read Holding Registers, 4 - Read Input Register \u2013 please read Modbus documentation on these 4 different modes.</li> <li>Address \u2013 this is the internal address of the registry to be read. In this example, address 42 is used. This will require in-depth knowledge of the Modbus device to properly determine.</li> <li>Count \u2013 if the function is 1 or 2, then count = 1 bit, for all other cases, (count*type)/2 = real count of registers for reading. To simplify, this is the number of registers to read with this command. </li> <li>Type \u2013 this is the data type to be returned from the Modbus device, for function 1 and 2, this should be set to bit. For function 3 and 4 there is a wide variety of options from bit to double. Please see the Zabbix documentation linked above, also you will need to fully understand your Modbus device and know what data types it returns.</li> <li>Endianness \u2013 does the Modbus device return big endian, little endian, Mid-big endian, or Mid-little endian values? For bit values that are returned the value be for big endian is used here. Again knowledge of the data type returned by the Modbus device is important</li> <li>Offset \u2013 for some Modbus devices that do not support random read access an offset has to be given. This allows the Modbus device to return a data byte, and the correct bit to be selected by Zabbix. The example below allows random read access so Offset is set to 0</li> </ul>"},{"location":"extras/modbus/#example-item-key","title":"Example Item key:","text":"<p>In this example the Modbus device is a generator controller. For this generator controller I have address 42 for a generator AC Fail alarm. This is a coil read operation. The Modbus.get item key will look like this:</p> <pre><code>modbus.get[{$DEVICE_CONNECTION},1,1,42,1,bit,be,0]\n</code></pre> <ul> <li>{$DEVICE_CONNECTION} \u2013 this allows the use of a macro set in the host creation step</li> <li>1 \u2013 Slaveid, for this example, MODBUS TCP is used so this is ignored</li> <li>1 \u2013 Function, for this example, it is a read coil operation</li> <li>42 \u2013 this is the internal address in the Modbus device to be read</li> <li>1 \u2013 Count is set to 1 because this value is a bit for this example</li> <li>bit \u2013 The type of data for the example</li> <li>be \u2013 endianness \u2013 big endianness for bit operations</li> <li>0 \u2013 the offset for this example.</li> </ul>"},{"location":"extras/modbus/#full-item-template-example","title":"Full Item template example","text":"<p>This is the full example of the item creation window. - Name \u2013 Generator AC fail \u2013 this is the name of the item we are creating - Type \u2013 Zabbix agent \u2013 This is used so that the Modbus.get command can be used - Key \u2013 modbus.get \u2013 explained above for this example - Type of information \u2013 In this case the value is either 0 or 1 so we used numeric (unsigned) - Units \u2013 There are no units to assign to this item - Update interval \u2013 15m, this could be quicker if the Modbus device has data at a quicker interval, for this example 15m was used as a proof of concept - Value Mapping \u2013 A map was created called Alarm status where 0 = OK and 1 = Alarm which matches the expected data from this Modbus device</p>"},{"location":"extras/modbus/#host-creation","title":"Host Creation","text":"<p>After creating the template, with all the items to be monitored, the hosts can be created and assigned to the template In this example:</p> <ul> <li>Host name \u2013 Test PLC for this example host</li> <li>Templates \u2013 The generic PLC template from the above example was used</li> <li>Host Group \u2013 Since this will eventually be used for a generator Modbus PLC I have a generator/Modbus host group created</li> <li>Interfaces \u2013 We use a Zabbix Agent interface with a DNS name of the Zabbix agent running on the same virtual machine as the Zabbix Proxy. This is setup due to the network configuration presented above. The Zabbix agent and Zabbix proxy are docker containers on the virtual machine with connections to both the PLC network and the Zabbix server. To communicate with a Modbus device a zabbix agent needs to be used.</li> <li>Monitored by proxy \u2013 The proxy server that will communicate with the Zabbix agent</li> </ul>"},{"location":"extras/modbus/#host-creation-macro-definition","title":"Host Creation \u2013 Macro definition","text":"<p>Before adding the host in, the device connection string needs to be applied. In this case we change {$DEVICE_CONNECTION} to the actual value we will be using for this Modbus device. Doing it this way will allow for the template to be used over and over with different Modbus devices.</p> <p></p>"},{"location":"extras/modbus/#network-diagram-explained","title":"Network Diagram explained","text":"<ol> <li>The Zabbix Server requests the Zabbix proxy to get the item value</li> <li>The Zabbix proxy requests the modbus.get command from the Zabbix agent</li> <li>The Zabbix Agent executes the modbus.get command to the PLC via Modbus TCP in this example</li> <li>The PLC responds to the Modbus TCP command to the Zabbix Agent</li> <li>The Zabbix agent returns the results of the modbus.get query to the Zabbix proxy </li> <li>The Zabbix proxy returns the item value to the zabbix server.</li> </ol> <p>By : Jason Drummond</p>"},{"location":"installation/Requirements/","title":"Requirements","text":"<p>Zabbix has specific hardware and software requirements that must be met, and these requirements may change over time. They also depend on the size of your setup and the software stack you select. Before purchasing hardware or installing a database version, it's essential to consult the Zabbix documentation for the most up-to-date requirements for the version you plan to install. You can find the latest requirements here. Make sure to select the correct Zabbix version from the list.</p> <p>For smaller or test setups, Zabbix can comfortably run on a system with 2 CPUs and 8 GB of RAM. However, your setup size, the number of items you monitor, the triggers you create, and how long you plan to retain data will impact resource requirements. In today\u2019s virtualized environments, my advice is to start small and scale up as needed.</p> <p>You can install all components (Zabbix server, database, web server) on a single machine or distribute them across multiple servers. For simplicity, take note of the server details:</p> Component IP Address Zabbix Server Database Server Web Server Tip <p>Zabbix package names often use dashes (<code>-</code>) in their names, such as <code>zabbix-get</code></p> <p>or <code>zabbix-sender</code>, but the binaries themselves may use underscores (<code>_</code>), like <code>zabbix_sender</code> or <code>zabbix_server</code>. This naming discrepancy can sometimes be confusing, particularly if you are using packages from non-official Zabbix repositories. Always check if a binary uses a dash or an underscore when troubleshooting.</p>"},{"location":"installation/Requirements/#basic-os-configuration","title":"Basic OS Configuration","text":""},{"location":"installation/Requirements/#firewall","title":"Firewall","text":"<p>Before installing Zabbix, it's essential to properly prepare the operating system. The first step is to ensure that the firewall is installed and configured.</p> <p>To install and enable the firewall, run the following command:</p> <pre><code># dnf install firewalld --now\n</code></pre> <p>Once installed, you can configure the necessary ports. For Zabbix, we need to allow access to port <code>10051/tcp</code>, which is where the Zabbix trapper listens for incoming data. Use the following command to open this port in the firewall:</p> <pre><code># firewall-cmd --add-service=Zabbix-server --permanent\n</code></pre> <p>If the service is not recognized, you can manually specify the port:</p> <pre><code># firewall-cmd --add-port=10051/tcp --permanent\n</code></pre> <p>firewalld</p> <p>\"Firewalld is the replacement for iptables in RHEL-based systems and allows changes to take effect immediately without needing to restart the service. If your distribution does not use Firewalld, refer to your OS documentation for the appropriate firewall configuration steps.\"</p>"},{"location":"installation/Requirements/#time-server","title":"Time Server","text":"<p>Another crucial step is configuring the time server and syncing the Zabbix server using an NTP client. Accurate time synchronization is vital for Zabbix, both for the server and the devices it monitors. If one of the hosts has an incorrect time zone, it could lead to confusion, such as investigating an issue in Zabbix that appears to have happened hours earlier than it actually did.</p> <p>To install Chrony, an NTP client, use the following command:</p> <pre><code># dnf install chronyd --now\n</code></pre> <p>Once installed, you can verify that Chrony is enabled and running by checking its status:</p> <pre><code># systemctl status chronyd\n</code></pre> <p>dnf</p> <p>\"dnf is a package manager used in Red Hat-based systems. If you're using another distribution, replace <code>dnf</code> with your appropriate package manager, such as <code>zyper</code>, <code>apt</code>, or <code>yum</code>. Chrony is a modern replacement for <code>ntpd</code>, offering faster and more accurate time synchronization. If your OS does not support Chrony, consider using <code>ntpd</code> instead.\"</p> <p>Once Chrony is installed, the next step is to ensure the correct time zone is set. You can view your current time configuration using the <code>timedatectl</code> command:</p> <pre><code># timedatectl\n               Local time: Thu 2023-11-16 15:09:14 UTC\n           Universal time: Thu 2023-11-16 15:09:14 UTC\n                 RTC time: Thu 2023-11-16 15:09:15\n                Time zone: UTC (UTC, +0000)\nSystem clock synchronized: yes\n              NTP service: active\n          RTC in local TZ: no\n</code></pre> <p>Ensure that the Chrony service is active (refer to the previous steps if needed). To set the correct time zone, first, you can list all available time zones with the following command:</p> <pre><code># timedatectl list-timezones\n</code></pre> <p>This will display a list of time zones, from which you can select the one closest to your location, for example:</p> <pre><code>Africa/Abidjan\nAfrica/Accra\n...\nPacific/Tongatapu\nPacific/Wake\nPacific/Wallis\nUTC\n</code></pre> <p>Once you've identified your time zone, configure it using the following command:</p> <pre><code># timedatectl set-timezone Europe/Brussels\n</code></pre> <p>To verify that the time zone has been configured correctly, use the <code>timedatectl</code> command again:</p> <pre><code># timedatectl\n               Local time: Thu 2023-11-16 16:13:35 CET\n           Universal time: Thu 2023-11-16 15:13:35 UTC\n                 RTC time: Thu 2023-11-16 15:13:36\n                Time zone: Europe/Brussels (CET, +0100)\nSystem clock synchronized: yes\n              NTP service: active\n          RTC in local TZ: no\n</code></pre> Note <p>Some administrators prefer installing all servers in the UTC time zone to ensure that server logs across global deployments are synchronized. Zabbix supports user-based time zone settings, which allows the server to remain in UTC while individual users can adjust the time zone via the interface if needed.</p>"},{"location":"installation/Requirements/#verifying-chrony-synchronization","title":"Verifying Chrony Synchronization","text":"<p>To ensure that Chrony is synchronizing with the correct time servers, you can run the following command:</p> <pre><code># chronyc\n</code></pre> <p>The output should resemble:</p> <pre><code>chrony version 4.2\nCopyright (C) 1997-2003, 2007, 2009-2021 Richard P. Curnow and others\nchrony comes with ABSOLUTELY NO WARRANTY.  This is free software, and\nyou are welcome to redistribute it under certain conditions.  See the\nGNU General Public License version 2 for details.\n\nchronyc&gt;\n</code></pre> <p>Once inside the Chrony prompt, type the following to check the sources:</p> <pre><code>chronyc&gt; sources\n</code></pre> <p>Example output:</p> <pre><code>MS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^- 51-15-20-83.rev.poneytel&gt;     2   9   377   354   +429us[ +429us] +/-  342ms\n^- 5.255.99.180                  2  10   377   620  +7424us[+7424us] +/-   37ms\n^- hachi.paina.net               2  10   377   412   +445us[ +445us] +/-   39ms\n^* leontp1.office.panq.nl        1  10   377   904  +6806ns[ +171us] +/- 2336us\n</code></pre> <p>In this example, the NTP servers in use are located outside your local region. It is recommended to switch to time servers in your country or, if available, to a dedicated company time server. You can find local NTP servers here.</p>"},{"location":"installation/Requirements/#updating-time-servers","title":"Updating Time Servers","text":"<p>To update the time servers, modify the <code>/etc/chrony.conf</code> file. Replace the existing NTP server with one closer to your location.</p> <p>Example of the current configuration:</p> <pre><code># Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\npool 2.centos.pool.ntp.org iburst\n</code></pre> <p>Change it to a local time server:</p> <pre><code># Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\npool be.pool.ntp.org iburst\n</code></pre> <p>After making this change, restart the Chrony service to apply the new configuration:</p> <pre><code># systemctl restart chronyd\n</code></pre>"},{"location":"installation/Requirements/#verifying-updated-time-servers","title":"Verifying Updated Time Servers","text":"<p>Check the time sources again to ensure that the new local servers are in use:</p> <pre><code>chronyc&gt; sources\n</code></pre> <p>Example of expected output with local servers:</p> <pre><code>MS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^- ntp1.unix-solutions.be        2   6    17    43   -375us[ -676us] +/-   28ms\n^* ntp.devrandom.be              2   6    17    43   -579us[ -880us] +/- 2877us\n^+ time.cloudflare.com           3   6    17    43   +328us[  +27us] +/- 2620us\n^+ time.cloudflare.com           3   6    17    43\n</code></pre> <p>This confirms that the system is now using local time servers.</p>"},{"location":"installation/installing-zabbix-ha/","title":"Configure Zabbix HA","text":"<p>In this section, we will set up Zabbix in a High Availability (HA) configuration. This feature, introduced in Zabbix 6, is a crucial enhancement that ensures continued monitoring even if a Zabbix server fails. With HA, when one Zabbix server goes down, another can take over seamlessly.</p> <p>For this guide, we will use two Zabbix servers, but the setup allows for adding more if necessary.</p> <p>It's important to note that Zabbix's HA setup is straightforward, providing redundancy without complex features like load balancing.</p> <p>Just as in our basic configuration, we will document key details for the servers in this HA setup. Below is the list of servers and their respective IP addresses:</p> <p></p> Server IP Address Zabbix Server 1 192.168.0.130 Zabbix Server 2 192.168.0.131 PostgreSQL DB 192.168.0.132 Virtual IP 192.168.0.135 Note <p>Our database (DB) in this setup is not configured for HA. Since it's not a Zabbix component, you will need to implement your own solution for database HA, such as a HA SAN or a database cluster setup. A DB cluster configuration is out of the scope of this guide and unrelated to Zabbix, so it will not be covered here.</p>"},{"location":"installation/installing-zabbix-ha/#installing-postgresql-database","title":"Installing PostgreSQL Database","text":"<p>To set up the Zabbix HA environment, we'll begin by installing the PostgreSQL database. Follow these steps to install PostgreSQL on a Red Hat-based system.</p> Note <p>If you're using a non-x86 architecture or another OS, refer to the PostgreSQL official download page for the correct installation commands.</p> Warning <p>In this exercise, we will simplify the PostgreSQL and OS installation. For detailed configurations and optimizations, review the previous sections of this guide.</p> <ol> <li>Install the PostgreSQL repository:</li> </ol> <p><code>bash    sudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm</code></p> <ol> <li>Disable the built-in PostgreSQL module:</li> </ol> <p><code>bash    sudo dnf -qy module disable postgresql</code></p> <ol> <li>Install PostgreSQL 16:</li> </ol> <p><code>bash    sudo dnf install -y postgresql16-server</code></p> <ol> <li>Initialize the database and enable automatic startup:</li> </ol> <p><code>bash    sudo /usr/pgsql-16/bin/postgresql-16-setup initdb    sudo systemctl enable postgresql-16 --now</code></p> <p>At this stage, PostgreSQL should be installed and running, ready for configuration with Zabbix in an HA setup.</p>"},{"location":"installation/installing-zabbix-ha/#securing-the-postgresql-database","title":"Securing the PostgreSQL Database","text":"<p>PostgreSQL manages access permissions differently compared to MySQL or MariaDB. Specifically, PostgreSQL uses the <code>pg_hba.conf</code> file, which controls who can access the database, from where, and what encryption is used for passwords. To allow the Zabbix frontend and Zabbix server to connect to the PostgreSQL database, we need to configure this file accordingly.</p> <p>First, edit the <code>pg_hba.conf</code> file to specify the access permissions:</p> <pre><code># vi /var/lib/pgsql/16/data/pg_hba.conf\n</code></pre> <p>Update the file to include the following lines:</p> <pre><code># \"local\" is for Unix domain socket connections only\nlocal   all             all                                     trust\n# IPv4 local connections:\nhost    zabbix          zabbix  192.168.0.130/32               scram-sha-256\nhost    zabbix          zabbix  192.168.0.131/32               scram-sha-256\nhost    all             all     127.0.0.1/32                   scram-sha-256\n</code></pre> <p>This configuration permits the Zabbix servers (at IPs <code>192.168.0.130</code> and <code>192.168.0.131</code>) to connect using SCRAM-SHA-256 encryption.</p> <p>Once you\u2019ve updated <code>pg_hba.conf</code>, don't forget to restart PostgreSQL for the changes to take effect. But before doing so, you also need to modify <code>postgresql.conf</code> to allow incoming connections from the Zabbix servers.</p> <p>By default, PostgreSQL listens only on the Unix socket, restricting external connections. To change this, edit the <code>postgresql.conf</code> file:</p> <pre><code># vi /var/lib/pgsql/16/data/postgresql.conf\n</code></pre> <p>Find and modify the <code>listen_addresses</code> line to:</p> <pre><code>listen_addresses = '*'\n</code></pre> <p>This will allow PostgreSQL to listen on all network interfaces, enabling external connections from the Zabbix servers.</p> <p>After making the changes to both configuration files, restart the PostgreSQL service:</p> <pre><code># systemctl restart postgresql-16\n</code></pre> <p>If PostgreSQL fails to restart, check the <code>pg_hba.conf</code> file for any syntax errors or typos.</p>"},{"location":"installation/installing-zabbix-ha/#add-the-zabbix-repository-and-populate-the-db","title":"Add the Zabbix repository and populate the DB","text":"<p>To set up the Zabbix database, you need to add the appropriate Zabbix repository and install the necessary database scripts. Begin by adding the Zabbix repository. Ensure that you select the correct repository for your operating system and Zabbix version by visiting Zabbix download page.</p> <p>For example, on a RHEL-based system:</p> <pre><code># rpm -Uvh https://repo.zabbix.com/zabbix/7.0/rhel/9/x86_64/zabbix-release-latest.el9.noarch.rpm\n</code></pre>"},{"location":"installation/installing-zabbix-ha/#install-the-database-scripts","title":"Install the database scripts","text":"<p>Once the repository is added, install the database scripts:</p> <pre><code># dnf install zabbix-sql-scripts -y\n</code></pre> <p>Next, unzip the database schema files required to create the necessary tables:</p> <pre><code># gzip -d /usr/share/zabbix-sql-scripts/postgresql/server.sql.gz\n</code></pre> <p>At this point, the PostgreSQL database is secured, and the Zabbix database schema is ready to be populated.</p>"},{"location":"installation/installing-zabbix-ha/#creating-the-database-users","title":"Creating the Database Users","text":"<p>With PostgreSQL configured and ready, the next step is to create the Zabbix users. These users will be used by both the Zabbix server and frontend to interact with the database. If you prefer to separate the users for the frontend and the server, refer to the basic installation guide for additional details.</p> <p>To create a new user for the Zabbix server:</p> <ul> <li>Switch to the <code>postgres</code> user:</li> </ul> <pre><code># su - postgres\n</code></pre> <ul> <li>Use the <code>createuser</code> command to create the Zabbix user and assign a password:</li> </ul> <pre><code># createuser --pwprompt zabbix\n</code></pre> <p>You will be prompted to enter a password for the new role:</p> <pre><code>    Enter password for new role: &lt;server-password&gt;\n    Enter it again: &lt;server-password&gt;\n\n    Replace `&lt;server-password&gt;` with a strong, secure password that you will use\n    for the Zabbix server's database connection.\n</code></pre> <p>Once the user is created, this account will be ready to use by both the <code>Zabbix server</code> and frontend (unless you choose to create separate users for each).</p>"},{"location":"installation/installing-zabbix-ha/#populating-the-database","title":"Populating the Database","text":"<p>With the Zabbix user created, we can now set up the Zabbix database. Follow these steps to create and populate the database with the necessary schemas and data.</p> <ol> <li>Create the Zabbix Database</li> </ol> <p>Switch to the <code>postgres</code> user and create the Zabbix database:</p> <pre><code>    # su - postgres\n    # createdb -E Unicode -O zabbix zabbix\n</code></pre> <p>This command creates a new database named <code>zabbix</code>, using Unicode encoding and assigning ownership to the <code>zabbix</code> user.</p> <ul> <li>Populate the Database</li> </ul> <p>Next, connect to the database as the <code>zabbix</code> user and run the SQL script to set up the required schemas, tables, and data. Use the <code>psql</code> command-line tool:</p> <pre><code>    # psql -U zabbix -W zabbix\n    Password:\n    psql (16.2)\n    Type \"help\" for help.\n\n    zabbix=&gt; SELECT session_user, current_user;\n    session_user | current_user\n    --------------+--------------\n    zabbix       | zabbix\n    (1 row)\n</code></pre> <p>Once connected, execute the SQL script:</p> <pre><code>    zabbix=&gt; \\i /usr/share/zabbix-sql-scripts/postgresql/server.sql\n</code></pre> <p>You should see output indicating that tables are being created and data is being inserted:</p> <pre><code>    CREATE TABLE\n    CREATE INDEX\n    CREATE TABLE\n    ...\n    INSERT 0 1\n    DELETE 80424\n    COMMIT\n</code></pre> <ul> <li>Verify Table Ownership</li> </ul> <p>Ensure that the <code>zabbix</code> user owns the tables by listing them:</p> <pre><code>zabbix=&gt; \\dt\n               List of relations\nSchema |            Name            | Type  | Owner\n--------+----------------------------+-------+--------\npublic | acknowledges               | table | zabbix\npublic | actions                    | table | zabbix\n...\n</code></pre> <p>If the tables are correctly owned by the <code>zabbix</code> user, you can exit the <code>psql</code> prompt:</p> <pre><code>    zabbix=&gt; \\q\n</code></pre> <p>The database is now populated and ready for use by the Zabbix server.</p>"},{"location":"installation/installing-zabbix-ha/#configuring-the-firewall","title":"Configuring the Firewall","text":"<p>To complete the setup, you need to configure the firewall to allow incoming connections to the PostgreSQL database from the Zabbix server. By default, the firewall does not permit these connections, so we'll need to open the appropriate ports and define rules.</p> <ul> <li>Create a New Firewall Zone</li> </ul> <p>Create a new firewall zone specifically for PostgreSQL access:</p> <pre><code># firewall-cmd --new-zone=postgresql-access --permanent\nsuccess\n</code></pre> <ul> <li>Reload the Firewall Configuration</li> </ul> <p>Apply the changes by reloading the firewall configuration:</p> <pre><code>    # firewall-cmd --reload\n    success\n</code></pre> <ul> <li>Verify Available Zones</li> </ul> <p>Confirm that the new zone has been added:</p> <pre><code>    # firewall-cmd --get-zones\n    block dmz drop external home internal nm-shared postgresql-access public\n    trusted work\n</code></pre> <ul> <li> <p>Add the Zabbix Server IPs to the New Zone</p> <p>Allow the Zabbix server IP addresses to access the PostgreSQL database. Replace <code>&lt;zabbix-serverip 1&gt;</code> and <code>&lt;zabbix-serverip 2&gt;</code> with the actual IP addresses of your Zabbix servers:</p> </li> </ul> <pre><code>    # firewall-cmd --zone=postgresql-access --add-source=&lt;zabbix-serverip 1&gt; --permanent\n    success\n\n    # firewall-cmd --zone=postgresql-access --add-source=&lt;zabbix-serverip 2&gt; --permanent\n    success\n</code></pre> <ul> <li>Allow PostgreSQL Port</li> </ul> <p>Open port 5432 for TCP connections in the new zone:</p> <pre><code>    # firewall-cmd --zone=postgresql-access --add-port=5432/tcp --permanent\n    success\n</code></pre> <ul> <li>Reload the Firewall Configuration Again</li> </ul> <p>Reload the firewall to apply the new rules:</p> <pre><code>    # firewall-cmd --reload\n</code></pre> <ul> <li>Verify the Firewall Rules</li> </ul> <p>Check that the firewall rules are correctly set up:</p> <pre><code>    # firewall-cmd --zone=postgresql-access --list-all\n</code></pre> <p>Your PostgreSQL server is now configured to accept connections from your Zabbix server. You can proceed with the next task in your Zabbix HA setup.</p>"},{"location":"installation/installing-zabbix-ha/#installing-the-zabbix-cluster","title":"Installing the Zabbix Cluster","text":"<p>Setting up a Zabbix cluster involves configuring multiple Zabbix servers to work together, providing high availability. While the process is similar to setting up a single Zabbix server, there are additional configuration steps required to enable HA (High Availability).</p>"},{"location":"installation/installing-zabbix-ha/#adding-zabbix-repositories","title":"Adding Zabbix Repositories","text":"<p>First, add the Zabbix 7.0 repositories to both of your Zabbix servers:</p> <pre><code># rpm -Uvh https://repo.zabbix.com/zabbix/7.0/rhel/9/x86_64/zabbix-release-6.5-2.el9.noarch.rpm\n</code></pre>"},{"location":"installation/installing-zabbix-ha/#installing-zabbix-servers","title":"Installing Zabbix Servers","text":"<p>Once the repository is added, install the Zabbix server package on both servers:</p> <pre><code># dnf install zabbix-server-pgsql -y\n</code></pre>"},{"location":"installation/installing-zabbix-ha/#configuring-zabbix-server-1","title":"Configuring Zabbix Server 1","text":"<p>Edit the Zabbix server configuration file on the first server:</p> <pre><code># vi /etc/zabbix/zabbix_server.conf\n</code></pre> <p>Update the following lines to connect to the PostgreSQL database:</p> <pre><code>DBHost=&lt;zabbix db ip&gt;\nDBName=zabbix\nDBUser=zabbix\nDBPassword=&lt;your secret password&gt;\n</code></pre> <p>Configure the HA parameters for this server:</p> <pre><code>HANodeName=zabbix1 (or choose a name you prefer)\n</code></pre> <p>Specify the frontend node address for failover scenarios:</p> <pre><code>NodeAddress=&lt;Zabbix server 1 ip&gt;:10051\n</code></pre>"},{"location":"installation/installing-zabbix-ha/#configuring-zabbix-server-2","title":"Configuring Zabbix Server 2","text":"<p>Repeat the configuration steps for the second Zabbix server. Adjust the <code>HANodeName</code> and <code>NodeAddress</code> as necessary for this server.</p>"},{"location":"installation/installing-zabbix-ha/#starting-zabbix-server","title":"Starting Zabbix Server","text":"<p>After configuring both servers, enable and start the <code>zabbix-server</code> service on each:</p> <pre><code># systemctl enable zabbix-server --now\n</code></pre>"},{"location":"installation/installing-zabbix-ha/#verifying-the-configuration","title":"Verifying the Configuration","text":"<p>Check the log files on both servers to ensure they have started correctly and are operating in their respective HA modes.</p> <p>On the first server:</p> <pre><code># grep HA /var/log/zabbix/zabbix_server.log\n</code></pre> <p>You should see:</p> <pre><code>22597:20240309:155230.353 starting HA manager\n22597:20240309:155230.362 HA manager started in active mode\n</code></pre> <p>On the second server (and any additional nodes):</p> <pre><code># grep HA /var/log/zabbix/zabbix_server.log\n</code></pre> <p>You should see:</p> <pre><code>22304:20240309:155331.163 starting HA manager\n22304:20240309:155331.174 HA manager started in standby mode\n</code></pre> <p>Your Zabbix cluster should now be set up with high availability, ensuring continuous monitoring even if one of the servers fails.</p>"},{"location":"installation/installing-zabbix-ha/#installing-the-frontends","title":"Installing the frontends","text":"<p>First things first before we can install and configure our webserver we need to install keepalived. Keepalived allows us to use a VIP for our frontends. Keepalived provides frameworks for both load balancing and high availability.</p> Info <p>Some useful documentation on the subject you might like. https://www.redhat.com/sysadmin/advanced-keepalived and https://keepalived.readthedocs.io/en/latest/introduction.html</p>"},{"location":"installation/installing-zabbix-ha/#setup-keepalived","title":"Setup keepalived","text":"<p>So let's get started. On both our servers we have to install keepalived.</p> <pre><code>dnf install keepalived\n</code></pre> <p>We also need to adapt the configuration of keepalived on both servers. The configuration for both servers needs to be a bit changed so let's start with our server 1. Edit the config file with the following command:</p> <pre><code># vi /etc/keepalived/keepalived.conf\n</code></pre> <p>Delete everything and replace it with the following lines:</p> <pre><code>vrrp_track_process track_nginx {\n    process nginx\n    weight 10\n}\n\nvrrp_instance VI_1 {\n    state MASTER\n    interface enp0s1\n    virtual_router_id 51\n    priority 244\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 12345\n    }\n    virtual_ipaddress {\n        192.168.0.135\n    }\n    track_process {\n         track_nginx\n      }\n}\n</code></pre> <p>Replace <code>enp0s1</code> with the interface name of your machine and replace the password with something secure. For the virual_ipaddress use aa free IP from your network. Now do the same thing for our second Zabbix server.</p> <pre><code># vi /etc/keepalived/keepalived.conf\n</code></pre> <p>Delete everything and replace it with the following lines:</p> <pre><code>vrrp_track_process track_nginx {\n      process nginx\n      weight 10\n}\n\nvrrp_instance VI_1 {\n    state BACKUP\n    interface enp0s1\n    virtual_router_id 51\n    priority 243\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 12345\n    }\n    virtual_ipaddress {\n        192.168.0.135\n    }\n    track_process {\n         track_nginx\n      }\n}\n</code></pre> <p>Just as with our 1<sup>st</sup> Zabbix server, replace <code>enp0s1</code> with the interface name of your machine and replace the password with something secure. For the virual_ipaddress use aa free IP from your network.</p>"},{"location":"installation/installing-zabbix-ha/#install-and-configure-the-frontend","title":"Install and configure the frontend","text":"<p>On both servers we can run the following commands to install our webserver and the zabbix frontend packages:</p> <pre><code>dnf install nginx zabbix-web-pgsql zabbix-nginx-conf\n</code></pre> <p>Also let's not forget to configure our firewall</p> <pre><code>firewall-cmd --add-service=http --permanent\nfirewall-cmd --add-service=zabbix-server --permanent\nfirewall-cmd --reload\n</code></pre> <p>And now we can start our keepalived and enable it so that it comes up next reboot</p> <pre><code>systemctl enable keepalived nginx --now\n</code></pre>"},{"location":"installation/installing-zabbix-ha/#configure-zabbix-frontend","title":"Configure Zabbix Frontend","text":"<p>After configuring the Zabbix servers, you need to complete the setup via the Zabbix web interface. Follow these steps:</p> <ul> <li>Access the Zabbix Web Interface</li> </ul> <p>Navigate through the web interface until you reach the page where you need to    configure the database connection.</p> <ul> <li> <p>Fill in Database Connection Details</p> </li> <li> <p>Database IP Address: Enter the IP address of your PostgreSQL database server.</p> </li> <li>Port: You can leave this as <code>0</code> to use the default port (5432).</li> <li>Database Name: Enter the name of your database (e.g., <code>zabbix</code>).</li> <li>User: Enter the database user (e.g., <code>zabbix</code>).</li> <li>Password: Enter the password for the database user.</li> </ul> <p>Note: Ensure you deselect TLS encryption and select the option to store    passwords as plaintext.</p> <ul> <li>Adjust SELinux Settings</li> </ul> <p>If you encounter issues during the configuration due to SELinux restrictions,    run the following commands on both Zabbix servers to allow the web server to    communicate with the database:</p> <pre><code>    # setsebool -P httpd_can_network_connect_db on\n    # setsebool -P httpd_can_connect_zabbix on\n</code></pre> <p>These commands modify SELinux policies to enable network connections between    the web server and the database.</p> <ul> <li>Continue with the Setup</li> </ul> <p>After adjusting SELinux settings, return to the web interface and click \"Next.\"    The setup should proceed without issues.</p> <p>By completing these steps, your Zabbix servers should be fully configured and connected to the database, ready for use in your monitoring environment.</p> <p></p> <p>We are almost ready the only thing left here is now to add the name of our server and configure the default timezone.</p> <p></p> <p>Since you\u2019re using a host-based firewall, you need to add the necessary rules to permit IP protocol 112 traffic. Otherwise, Keepalived\u2019s advertisement method won\u2019t work.</p> <pre><code>firewall-cmd --add-rich-rule='rule protocol value=\"112\" accept' --permanent\n</code></pre> <p>Now that this is all taken care of stop keepalived on our server and repeat the same steps on the second server. After this is finished start keepalived again.</p> <p>Congratulations you have a HA Zabbix server now .</p>"},{"location":"installation/installing-zabbix-ha/#checking-the-database-for-ha-information","title":"Checking the Database for HA Information","text":"<p>Once your Zabbix HA setup is operational, you might want to verify the status of your servers within the database. Here\u2019s how to check the information:</p> <ul> <li>Query HA Node Information</li> </ul> <p>Access your Zabbix database and run the following SQL query to view details about the HA nodes:</p> <pre><code>    zabbix=# SELECT * FROM ha_node;\n</code></pre> <pre><code>Example output:\n\n         ha_nodeid         |  name   |    address    | port  | lastaccess | status |       ha_sessionid\n---------------------------+---------+---------------+-------+------------+--------+---------------------------\n cltk7h2n600017kkd1jtx6f1f | zabbix2 | 192.168.0.131 | 10051 | 1710085786 |      0 | cltlov4ly0000jkkdteikeo77\n cltk7ci340001inkc2befwg9f | zabbix1 | 192.168.0.130 | 10051 | 1710085787 |      3 | cltlov1r00000jtkcpeh9oqhp\n</code></pre> <p>This query provides information on each HA node, including its ID, name, address, port, last access time, status, and session ID.</p> <ul> <li>Understanding Node Statuses</li> </ul> <p>The status column in the <code>ha_node</code> table indicates the current state of each node. Here are the possible statuses:</p> Status Number Description Active 3 Only one node can be active at any time Standby 0 Multiple nodes can be in standby mode Stopped 1 A node has been detected as stopped Unavailable 2 A node was lost without proper shutdown detection <p>The frontend uses this information to determine which server to connect to based on the active and standby nodes.</p> <ul> <li>Configuring Zabbix Agents</li> </ul> <p>Ensure that Zabbix agents are configured to point to both the active and passive Zabbix servers. This option is supported in all agents since Zabbix 6.0.</p> <pre><code>Server=&lt;active-server-ip&gt;,&lt;passive-server-ip&gt;\nServerActive=&lt;active-server-ip&gt;,&lt;passive-server-ip&gt;\n</code></pre> <p>This configuration ensures that agents can communicate with both servers, enhancing redundancy and reliability.</p>"},{"location":"installation/installing-zabbix/","title":"Installing Zabbix","text":"<p>In this chapter, we will walk through the process of installing the Zabbix server. In the previous section, we covered the installation of the database. Now, we will proceed with installing the Zabbix server and connecting it to the previously set up database. Additionally, we will explore various design options, as Zabbix supports a modular installation approach.</p> <p>Before beginning the installation, it is important to understand the architecture of Zabbix. The Zabbix server is structured in a modular fashion, composed of three main components, which we will discuss in detail.</p> <ul> <li>The Zabbix server</li> <li>The Zabbix web server</li> <li>The Zabbix database</li> </ul> <p></p> <p>All of these components can either be installed on a single server or distributed across three separate servers. The core of the system is the Zabbix server, often referred to as the \"brain.\" This component is responsible for processing trigger calculations and sending alerts. The database serves as the storage for the Zabbix server\u2019s configuration and all the data it collects. The web server provides the user interface (front-end) for interacting with the system. It is important to note that the Zabbix API is part of the front-end component, not the Zabbix server itself.</p> <p>These components must function together seamlessly, as illustrated in the diagram above. The Zabbix server must read configurations and store monitoring data in the database, while the front-end needs access to read and write configuration data. Furthermore, the front-end must be able to check the status of the Zabbix server and retrieve additional necessary information to ensure smooth operation.</p> <p>For our setup, we will be using two virtual machines (VMs): one VM will host both the Zabbix server and the Zabbix web front-end, while the second VM will host the Zabbix database.</p> <p>In this chapter, we will cover the following topics:</p> <ul> <li>Installing the Zabbix server for MySQL/MariaDB</li> <li>Installing the Zabbix server for PostgreSQL</li> <li>Installing the Zabbix front-end with NginX</li> <li>Installing the Zabbix front-end with Apache</li> </ul> <p>Each section will guide you through the steps for setting up these components in a way that aligns with your specific configuration.</p>"},{"location":"installation/installing-zabbix/#installing-the-zabbix-server","title":"Installing the Zabbix Server","text":"<p>Before proceeding with the installation of your Zabbix server, ensure that the server is properly configured, as outlined in the previous section, Basic OS configuration.</p> <p>Another critical step at this stage is disabling SELinux, which can interfere with the installation and operation of Zabbix. We will revisit SELinux in the chapter Securing Zabbix with SELinux to learn how to configure it securely.</p> <p>To check the current status of SELinux, you can use the following command: <code>sestatus</code></p> <pre><code># sestatus\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   enforcing\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre> <p>As shown, the system is currently in enforcing mode. To temporarily disable SELinux, you can run the following command: <code>setenforce 0</code></p> <pre><code># setenforce 0\n# sestatus\n\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   permissive\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre> <p>Now, as you can see, the mode is switched to permissive. However, this change is not persistent across reboots. To make it permanent, you need to modify the SELinux configuration file located at <code>/etc/selinux/config</code>. Open the file and replace <code>enforcing</code> with <code>permissive</code>.</p> <p>Alternatively, you can achieve the same result more easily by running the following command:</p> <pre><code>sed -i 's/SELINUX=enforcing/SELINUX=permissive/g' /etc/selinux/config\n</code></pre> <p>This line will alter the config file for you. So when we run <code>sestatus</code> again we will see that we are in <code>permissive</code> mode and that our config file is also in <code>permissive</code> mode.</p> <p>We can verify this with our <code>cat</code> commando.</p> <pre><code># cat /etc/selinux/config\n\n# This file controls the state of SELinux on the system.\n# SELINUX= can take one of these three values:\n#     enforcing - SELinux security policy is enforced.\n#     permissive - SELinux prints warnings instead of enforcing.\n#     disabled - No SELinux policy is loaded.\n# See also:\n# https://docs.fedoraproject.org/en-US/quick-docs/getting-started-with-selinux/#getting-started-with-selinux-selinux-states-and-modes\n#\n# NOTE: In earlier Fedora kernel builds, SELINUX=disabled would also\n# fully disable SELinux during boot. If you need a system with SELinux\n# fully disabled instead of SELinux running with no policy loaded, you\n# need to pass selinux=0 to the kernel command line. You can use grubby\n# to persistently set the bootloader to boot with selinux=0:\n#\n#    grubby --update-kernel ALL --args selinux=0\n#\n# To revert back to SELinux enabled:\n#\n#    grubby --update-kernel ALL --remove-args selinux\n#\nSELINUX=permissive\n# SELINUXTYPE= can take one of these three values:\n#     targeted - Targeted processes are protected,\n#     minimum - Modification of targeted policy. Only selected processes are protected.\n#     mls - Multi Level Security protection.\nSELINUXTYPE=targeted\n</code></pre> <p>And we can also verify it with our commando <code>setstatus</code></p> <pre><code># sestatus\n\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   permissive\nMode from config file:          permissive\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre>"},{"location":"installation/installing-zabbix/#adding-the-zabbix-repository","title":"Adding the Zabbix repository","text":"<p>From the Zabbix Download page, select the appropriate Zabbix version you wish to install. In this case, we will be using <code>Zabbix 7.0 LTS</code>. Additionally, ensure you choose the correct OS distribution for your environment, which will be Rocky Linux 9 in our case for this setup but RHEL 9 or AlmaLinux 9 are fine too.</p> <p>We will be installing the Zabbix Server along with NGINX as the web server for the front-end. Make sure to download the relevant packages for your chosen configuration.</p> <p></p> <p>Our first step is to disable the Zabbix packages provided by the EPEL repository, if it's installed on your system. To do this, edit the <code>/etc/yum.repos.d/epel.repo</code> file and add the following statement to disable the EPEL repository by default:</p> <pre><code>[epel]\n...\nexcludepkgs=zabbix*\n</code></pre> Tip <p>It's considered bad practice to keep the EPEL repository enabled all the time, as it may cause conflicts by unintentionally overwriting or installing unwanted packages. Instead, it's safer to enable the repository only when needed, by using the following command during installations: <code>dnf install --enablerepo=epel &lt;package-name&gt;</code> This ensures that EPEL is only enabled when explicitly required.</p> <p>Next, we will install the Zabbix repository on our operating system. After adding the Zabbix repository, it is recommended to perform a repository cleanup to remove old cache files and ensure the repository metadata is up to date. You can do this by running:</p> <pre><code>&gt; rpm -Uvh https://repo.zabbix.com/zabbix/7.0/rhel/9/x86_64/zabbix-release-6.5-2.el9.noarch.rpm\n&gt; dnf clean all\n</code></pre> <p>This will refresh the repository metadata and prepare the system for Zabbix installation.</p> Note <p>A repository in Linux is a configuration that allows you to access and install software packages. You can think of it like an \"app store\" where you find and download software from a trusted source, in this case, the Zabbix repository. Many repositories are available, but it's important to only add those you trust. The safest practice is to stick to the repositories provided by your operating system and only add additional ones when you're sure they are both trusted and necessary.</p> <pre><code>For our installation, the Zabbix repository is provided by the vendor itself,\nmaking it a trusted source. Another popular and safe repository for\nRedHat-based systems is EPEL (Extra Packages for Enterprise Linux), which is\ncommonly used in enterprise environments.\nHowever, always exercise caution when adding new repositories to ensure\nsystem security and stability.\n</code></pre>"},{"location":"installation/installing-zabbix/#installing-the-zabbix-server-for-mysqlmariadb","title":"Installing the Zabbix server for MySQL/MariaDB","text":"<p>Now that we\u2019ve added the Zabbix repository with the necessary software, we are ready to install both the Zabbix server and the web server. Keep in mind that the web server doesn\u2019t need to be installed on the same machine as the Zabbix server; they can be hosted on separate systems if desired.</p> <p>To install the Zabbix server and the web server components for MySQL/MariaDB, run the following command:</p> <pre><code>dnf install zabbix-server-mysql zabbix-web-mysql\n</code></pre> <p>After successfully installing the Zabbix server and frontend packages, we need to configure the Zabbix server to connect to the database. This requires modifying the Zabbix server configuration file. Open the <code>/etc/zabbix/zabbix_server.conf</code> file and update the following lines to match your database configuration:</p> <pre><code>DBHost=&lt;database-host&gt;\nDBName=&lt;database-name&gt;\nDBUser=&lt;database-user&gt;\nDBPassword=&lt;database-password&gt;\n</code></pre> <p>Replace <code>&lt;database-host&gt;</code>, <code>&lt;database-name&gt;</code>, <code>&lt;database-user&gt;</code>, and <code>&lt;database-password&gt;</code> with the appropriate values for your setup. This ensures that the Zabbix server can communicate with your database.</p> <p>Ensure that there is no # (comment symbol) in front of the configuration parameters, as Zabbix will treat lines beginning with # as comments, ignoring them during execution. Additionally, double-check for duplicate configuration lines; if there are multiple lines with the same parameter, Zabbix will use the value from the last occurrence.</p> <p>For our setup, the configuration will look like this:</p> <pre><code># vi /etc/zabbix/zabbix_server.conf\n\nDBHost=&lt;ip or dns of your MariaDB server&gt;\nDBName=zabbix\nDBUser=zabbix-srv\nDBPassword=&lt;your super secret password&gt;\nDBPort=3306\n</code></pre> <p>In this example:</p> <ul> <li>DBHost refers to the host where your database is running (use localhost if it's on the same machine).</li> <li>DBName is the name of the Zabbix database.</li> <li>DBUser is the database user.</li> <li>DBPassword is the password for the database user.</li> </ul> <p>Make sure the settings reflect your environment's database configuration.</p> Note <p>The Zabbix server configuration file offers an option to include additional configuration files for custom parameters. For a production environment, it's often best to avoid altering the original configuration file directly. Instead, you can create and include a separate configuration file for any additional or modified parameters. This approach ensures that your original configuration file remains untouched, which is particularly useful when performing upgrades or managing configurations with tools like Ansible, Puppet, or SaltStack.</p> <p>To enable this feature, remove the <code>#</code> from the line:</p> <pre><code># Include=/usr/local/etc/zabbix_server.conf.d/*.conf\n</code></pre> <pre><code>Then, ensure the path `/usr/local/etc/zabbix_server.conf.d/` exists and\ncreate a custom configuration file in this directory.\nThis file should be readable by the `zabbix` user. By doing so, you can add\nor modify parameters without modifying the default configuration file,\nmaking system management and upgrades smoother.\n</code></pre> <p>With the Zabbix server configuration updated to connect to your database, you can now start and enable the Zabbix server service. Run the following command to enable the Zabbix server and ensure it starts automatically on boot:</p> <pre><code>systemctl enable zabbix-server --now`\n</code></pre> <p>This command will start the Zabbix server service immediately and configure it to launch on system startup.</p> <p>To verify that the Zabbix server is running correctly, check the log file for any messages. You can view the latest entries in the Zabbix server log file using:</p> <pre><code>tail /var/log/zabbix/zabbix_server.log\n</code></pre> <p>Look for messages indicating that the server has started successfully. If there are any issues, the log file will provide details to help with troubleshooting.</p> <pre><code>  1123:20231120:110604.440 Starting Zabbix Server. Zabbix 7.0.0alpha7 (revision 60de6a81aca).\n  1123:20231120:110604.440 ****** Enabled features ******\n  1123:20231120:110604.440 SNMP monitoring:           YES\n  1123:20231120:110604.440 IPMI monitoring:           YES\n  1123:20231120:110604.440 Web monitoring:            YES\n  1123:20231120:110604.440 VMware monitoring:         YES\n  1123:20231120:110604.440 SMTP authentication:       YES\n  1123:20231120:110604.440 ODBC:                      YES\n  1123:20231120:110604.440 SSH support:               YES\n  1123:20231120:110604.440 IPv6 support:              YES\n  1123:20231120:110604.440 TLS support:               YES\n  1123:20231120:110604.440 ******************************\n  1123:20231120:110604.440 using configuration file: /etc/zabbix/zabbix_server.conf\n  1123:20231120:110604.470 current database version (mandatory/optional): 06050143/06050143\n  1123:20231120:110604.470 required mandatory version: 06050143\n  1124:20231120:110604.490 starting HA manager\n  1124:20231120:110604.507 HA manager started in active mode\n  1123:20231120:110604.508 server #0 started [main process]\n  1126:20231120:110604.509 server #2 started [configuration syncer #1]\n  1125:20231120:110604.510 server #1 started [service manager #1]\n  1133:20231120:110604.841 server #9 started [lld worker #1]\n  1132:20231120:110604.841 server #8 started [lld manager #1]\n  1134:20231120:110604.841 server #10 started [lld worker #2]\n</code></pre> <p>If there was an error and the server was not able to connect to the database you would see something like this in the server log file :</p> <pre><code> 10773:20231118:213248.570 Starting Zabbix Server. Zabbix 7.0.0alpha7 (revision 60de6a81aca).\n 10773:20231118:213248.570 ****** Enabled features ******\n 10773:20231118:213248.570 SNMP monitoring:           YES\n 10773:20231118:213248.570 IPMI monitoring:           YES\n 10773:20231118:213248.570 Web monitoring:            YES\n 10773:20231118:213248.570 VMware monitoring:         YES\n 10773:20231118:213248.570 SMTP authentication:       YES\n 10773:20231118:213248.570 ODBC:                      YES\n 10773:20231118:213248.570 SSH support:               YES\n 10773:20231118:213248.570 IPv6 support:              YES\n 10773:20231118:213248.570 TLS support:               YES\n 10773:20231118:213248.570 ******************************\n 10773:20231118:213248.570 using configuration file: /etc/zabbix/zabbix_server.conf\n 10773:20231118:213248.574 [Z3001] connection to database 'zabbix' failed: [2002] Can't connect to server on 'xxx.xxx.xxx.xxx' (115)\n 10773:20231118:213248.574 database is down: reconnecting in 10 seconds\n 10773:20231118:213258.579 [Z3001] connection to database 'zabbix' failed: [2002] Can't connect to server on 'xxx.xxx.xxx.xxx' (115)\n 10773:20231118:213258.579 database is down: reconnecting in 10 seconds\n</code></pre> <p>Let's check the Zabbix server service to see if it's enabled so that it survives a reboot</p> <pre><code># systemctl status zabbix-server\n\n\u25cf zabbix-server.service - Zabbix Server\n     Loaded: loaded (/usr/lib/systemd/system/zabbix-server.service; enabled; preset: disabled)\n     Active: active (running) since Mon 2023-11-20 11:06:04 CET; 1h 2min ago\n   Main PID: 1123 (zabbix_server)\n      Tasks: 59 (limit: 12344)\n     Memory: 52.6M\n        CPU: 20.399s\n     CGroup: /system.slice/zabbix-server.service\n             \u251c\u25001123 /usr/sbin/zabbix_server -c /etc/zabbix/zabbix_server.conf\n             \u251c\u25001124 \"/usr/sbin/zabbix_server: ha manager\"\n             \u251c\u25001125 \"/usr/sbin/zabbix_server: service manager #1 [processed 0 events, updated 0 event tags, deleted 0 problems, synced 0 service updates, idle 5.008686 sec during 5.016382 sec]\"\n             \u251c\u25001126 \"/usr/sbin/zabbix_server: configuration syncer [synced configuration in 0.092797 sec, idle 10 sec]\"\n             \u251c\u25001127 \"/usr/sbin/zabbix_server: alert manager #1 [sent 0, failed 0 alerts, idle 5.027620 sec during 5.027828 sec]\"\n             \u251c\u25001128 \"/usr/sbin/zabbix_server: alerter #1 started\"\n             \u251c\u25001129 \"/usr/sbin/zabbix_server: alerter #2 started\"\n             \u251c\u25001130 \"/usr/sbin/zabbix_server: alerter #3 started\"\n             \u251c\u25001131 \"/usr/sbin/zabbix_server: preprocessing manager #1 [queued 1, processed 2 values, idle 5.490312 sec during 5.490555 sec]\"\n             \u251c\u25001132 \"/usr/sbin/zabbix_server: lld manager #1 [processed 1 LLD rules, idle 5.028973sec during 5.029123 sec]\"\n             \u251c\u25001133 \"/usr/sbin/zabbix_server: lld worker #1 [processed 1 LLD rules, idle 60.060180 sec during 60.085009 sec]\"\n             \u251c\u25001134 \"/usr/sbin/zabbix_server: lld worker #2 [processed 1 LLD rules, idle 60.065526 sec during 60.095165 sec]\"\n             \u251c\u25001135 \"/usr/sbin/zabbix_server: housekeeper [deleted 0 hist/trends, 0 items/triggers, 0 events, 0 sessions, 0 alarms, 0 audit items, 0 autoreg_host, 0 records in 0.019108 sec, idle for 1 hour(s)]\"\n             \u251c\u25001136 \"/usr/sbin/zabbix_server: timer #1 [updated 0 hosts, suppressed 0 events in 0.002856 sec, idle 59 sec]\"\n             \u251c\u25001137 \"/usr/sbin/zabbix_server: http poller #1 [got 0 values in 0.000059 sec, idle 5 sec]\"\n             \u251c\u25001138 \"/usr/sbin/zabbix_server: discovery manager #1 [processing 0 rules, 0.000000% of queue used, 0 unsaved checks]\"\n             \u251c\u25001139 \"/usr/sbin/zabbix_server: history syncer #1 [processed 0 values, 0 triggers in 0.000036 sec, idle 1 sec]\"\n             \u251c\u25001140 \"/usr/sbin/zabbix_server: history syncer #2 [processed 1 values, 0 triggers in 0.005016 sec, idle 1 sec]\"\n             \u251c\u25001141 \"/usr/sbin/zabbix_server: history syncer #3 [processed 0 values, 0 triggers in 0.000031 sec, idle 1 sec]\"\n             \u251c\u25001142 \"/usr/sbin/zabbix_server: history syncer #4 [processed 0 values, 0 triggers in 0.000014 sec, idle 1 sec]\"\n             \u251c\u25001143 \"/usr/sbin/zabbix_server: escalator #1 [processed 0 escalations in 0.005587 sec, idle 3 sec]\"\n             \u251c\u25001144 \"/usr/sbin/zabbix_server: proxy poller #1 [exchanged data with 0 proxies in 0.000010 sec, idle 5 sec]\"\n             \u251c\u25001145 \"/usr/sbin/zabbix_server: self-monitoring [processed data in 0.000016 sec, idle 1 sec]\"\n             \u251c\u25001146 \"/usr/sbin/zabbix_server: task manager [processed 0 task(s) in 0.002511 sec, idle 5 sec]\"\n             \u251c\u25001147 \"/usr/sbin/zabbix_server: poller #1 [got 0 values in 0.000009 sec, idle 1 sec]\"\n             \u251c\u25001148 \"/usr/sbin/zabbix_server: poller #2 [got 1 values in 0.000232 sec, idle 1 sec]\"\n             \u251c\u25001149 \"/usr/sbin/zabbix_server: poller #3 [got 0 values in 0.000015 sec, idle 1 sec]\"\n             \u251c\u25001150 \"/usr/sbin/zabbix_server: poller #4 [got 0 values in 0.000010 sec, idle 1 sec]\"\n</code></pre> <p>This concludes our chapter on installing and configuring the Zabbix server with MySQL. Next, we will proceed with configuring the front-end. You can choose to follow the instructions for either:</p> <ul> <li>Installing Zabbix frontend with Nginx</li> <li>Installing Zabbix frontend with Apache</li> </ul> <p>Each guide will walk you through setting up the web interface for Zabbix based on your preferred web server.</p>"},{"location":"installation/installing-zabbix/#installing-the-zabbix-server-for-postgresql","title":"Installing the Zabbix server for PostgreSQL","text":"<p>Now that we\u2019ve added the Zabbix repository with the necessary software, we are ready to install both the Zabbix server and the web server. Keep in mind that the web server doesn\u2019t need to be installed on the same machine as the Zabbix server; they can be hosted on separate systems if desired.</p> <p>To install the Zabbix server and the web server components for PostgreSQL, run the following command:</p> <p><code>dnf install zabbix-server-pgsql zabbix-web-pgsql</code></p> <p>After successfully installing the Zabbix server and frontend packages, we need to configure the Zabbix server to connect to the database. This requires modifying the Zabbix server configuration file. Open the <code>/etc/zabbix/zabbix_server.conf</code> file and update the following lines to match your database configuration:</p> <pre><code>DBHost=&lt;ip or dns of your PostgreSQL server&gt;\nDBName=&lt;the name of your database&gt;\nDBSchema=&lt;our PostgreSQL schema name&gt;\nDBUser=&lt;the user that will connect to the database&gt;\nDBPassword=&lt;your super secret password&gt;\n</code></pre> <p>Replace , , , and  with the appropriate values for your setup. This ensures that the Zabbix server can communicate with your database. <p>Ensure that there is no # (comment symbol) in front of the configuration parameters, as Zabbix will treat lines beginning with # as comments, ignoring them during execution. Additionally, double-check for duplicate configuration lines; if there are multiple lines with the same parameter, Zabbix will use the value from the last occurrence.</p> <p>For our setup, the configuration will look like this:</p> <pre><code># vi /etc/zabbix/zabbix_server.conf\n\nDBHost=&lt;ip or dns of your MariaDB server&gt;\nDBName=zabbix\nDBSchema=zabbix_server\nDBUser=zabbix-srv\nDBPassword=&lt;your super secret password&gt;\nDBPort=5432\n</code></pre> <p>In this example:</p> <ul> <li>DBHost refers to the host where your database is running (use localhost if it's on the same machine).</li> <li>DBName is the name of the Zabbix database.</li> <li>DBUser is the database user.</li> <li>DBPassword is the password for the database user.</li> </ul> <p>Make sure the settings reflect your environment's database configuration.</p> Note <p>The Zabbix server configuration file offers an option to include additional configuration files for custom parameters. For a production environment, it's often best to avoid altering the original configuration file directly. Instead, you can create and include a separate configuration file for any additional or modified parameters. This approach ensures that your original configuration file remains untouched, which is particularly useful when performing upgrades or managing configurations with tools like Ansible, Puppet, or SaltStack. To enable this feature, remove the # from the line: <code># Include=/usr/local/etc/zabbix_server.conf.d/*.conf</code> Then, ensure the path <code>/usr/local/etc/zabbix_server.conf.d/</code> exists and create a custom configuration file in this directory. This file should be readable by the <code>zabbix</code> user. By doing so, you can add or modify parameters without modifying the default configuration file, making system management and upgrades smoother.</p> <p>With the Zabbix server configuration updated to connect to your database, you can now start and enable the Zabbix server service. Run the following command to enable the Zabbix server and ensure it starts automatically on boot:</p> <p><code>systemctl enable zabbix-server --now</code></p> <p>This command will start the Zabbix server service immediately and configure it to launch on system startup. To verify that the Zabbix server is running correctly, check the log file for any messages. You can view the latest entries in the Zabbix server log file using:</p> <p><code>tail /var/log/zabbix/zabbix_server.log</code></p> <p>Look for messages indicating that the server has started successfully. If there are any issues, the log file will provide details to help with troubleshooting.</p> <pre><code>  1123:20231120:110604.440 Starting Zabbix Server. Zabbix 7.0.0alpha7 (revision 60de6a81aca).\n  1123:20231120:110604.440 ****** Enabled features ******\n  1123:20231120:110604.440 SNMP monitoring:           YES\n  1123:20231120:110604.440 IPMI monitoring:           YES\n  1123:20231120:110604.440 Web monitoring:            YES\n  1123:20231120:110604.440 VMware monitoring:         YES\n  1123:20231120:110604.440 SMTP authentication:       YES\n  1123:20231120:110604.440 ODBC:                      YES\n  1123:20231120:110604.440 SSH support:               YES\n  1123:20231120:110604.440 IPv6 support:              YES\n  1123:20231120:110604.440 TLS support:               YES\n  1123:20231120:110604.440 ******************************\n  1123:20231120:110604.440 using configuration file: /etc/zabbix/zabbix_server.conf\n  1123:20231120:110604.470 current database version (mandatory/optional): 06050143/06050143\n  1123:20231120:110604.470 required mandatory version: 06050143\n  1124:20231120:110604.490 starting HA manager\n  1124:20231120:110604.507 HA manager started in active mode\n  1123:20231120:110604.508 server #0 started [main process]\n  1126:20231120:110604.509 server #2 started [configuration syncer #1]\n  1125:20231120:110604.510 server #1 started [service manager #1]\n  1133:20231120:110604.841 server #9 started [lld worker #1]\n  1132:20231120:110604.841 server #8 started [lld manager #1]\n  1134:20231120:110604.841 server #10 started [lld worker #2]\n</code></pre> <p>If there was an error and the server was not able to connect to the database you would see something like this in the server log file :</p> <pre><code> 10773:20231118:213248.570 Starting Zabbix Server. Zabbix 7.0.0alpha7 (revision 60de6a81aca).\n 10773:20231118:213248.570 ****** Enabled features ******\n 10773:20231118:213248.570 SNMP monitoring:           YES\n 10773:20231118:213248.570 IPMI monitoring:           YES\n 10773:20231118:213248.570 Web monitoring:            YES\n 10773:20231118:213248.570 VMware monitoring:         YES\n 10773:20231118:213248.570 SMTP authentication:       YES\n 10773:20231118:213248.570 ODBC:                      YES\n 10773:20231118:213248.570 SSH support:               YES\n 10773:20231118:213248.570 IPv6 support:              YES\n 10773:20231118:213248.570 TLS support:               YES\n 10773:20231118:213248.570 ******************************\n 10773:20231118:213248.570 using configuration file: /etc/zabbix/zabbix_server.conf\n 10773:20231118:213248.574 [Z3001] connection to database 'zabbix' failed: [2002] Can't connect to server on 'xxx.xxx.xxx.xxx' (115)\n 10773:20231118:213248.574 database is down: reconnecting in 10 seconds\n 10773:20231118:213258.579 [Z3001] connection to database 'zabbix' failed: [2002] Can't connect to server on 'xxx.xxx.xxx.xxx' (115)\n 10773:20231118:213258.579 database is down: reconnecting in 10 seconds\n</code></pre> <p>Let's check the Zabbix server service to see if it's enabled so that it survives a reboot</p> <pre><code># systemctl status zabbix-server\n</code></pre> <pre><code>\u25cf zabbix-server.service - Zabbix Server\n     Loaded: loaded (/usr/lib/systemd/system/zabbix-server.service; enabled; preset: disabled)\n     Active: active (running) since Mon 2023-11-20 11:06:04 CET; 1h 2min ago\n   Main PID: 1123 (zabbix_server)\n      Tasks: 59 (limit: 12344)\n     Memory: 52.6M\n        CPU: 20.399s\n     CGroup: /system.slice/zabbix-server.service\n             \u251c\u25001123 /usr/sbin/zabbix_server -c /etc/zabbix/zabbix_server.conf\n             \u251c\u25001124 \"/usr/sbin/zabbix_server: ha manager\"\n             \u251c\u25001125 \"/usr/sbin/zabbix_server: service manager #1 [processed 0 events, updated 0 event tags, deleted 0 problems, synced 0 service updates, idle 5.008686 sec during 5.016382 sec]\"\n             \u251c\u25001126 \"/usr/sbin/zabbix_server: configuration syncer [synced configuration in 0.092797 sec, idle 10 sec]\"\n             \u251c\u25001127 \"/usr/sbin/zabbix_server: alert manager #1 [sent 0, failed 0 alerts, idle 5.027620 sec during 5.027828 sec]\"\n             \u251c\u25001128 \"/usr/sbin/zabbix_server: alerter #1 started\"\n             \u251c\u25001129 \"/usr/sbin/zabbix_server: alerter #2 started\"\n             \u251c\u25001130 \"/usr/sbin/zabbix_server: alerter #3 started\"\n             \u251c\u25001131 \"/usr/sbin/zabbix_server: preprocessing manager #1 [queued 1, processed 2 values, idle 5.490312 sec during 5.490555 sec]\"\n             \u251c\u25001132 \"/usr/sbin/zabbix_server: lld manager #1 [processed 1 LLD rules, idle 5.028973sec during 5.029123 sec]\"\n             \u251c\u25001133 \"/usr/sbin/zabbix_server: lld worker #1 [processed 1 LLD rules, idle 60.060180 sec during 60.085009 sec]\"\n             \u251c\u25001134 \"/usr/sbin/zabbix_server: lld worker #2 [processed 1 LLD rules, idle 60.065526 sec during 60.095165 sec]\"\n             \u251c\u25001135 \"/usr/sbin/zabbix_server: housekeeper [deleted 0 hist/trends, 0 items/triggers, 0 events, 0 sessions, 0 alarms, 0 audit items, 0 autoreg_host, 0 records in 0.019108 sec, idle for 1 hour(s)]\"\n             \u251c\u25001136 \"/usr/sbin/zabbix_server: timer #1 [updated 0 hosts, suppressed 0 events in 0.002856 sec, idle 59 sec]\"\n             \u251c\u25001137 \"/usr/sbin/zabbix_server: http poller #1 [got 0 values in 0.000059 sec, idle 5 sec]\"\n             \u251c\u25001138 \"/usr/sbin/zabbix_server: discovery manager #1 [processing 0 rules, 0.000000% of queue used, 0 unsaved checks]\"\n             \u251c\u25001139 \"/usr/sbin/zabbix_server: history syncer #1 [processed 0 values, 0 triggers in 0.000036 sec, idle 1 sec]\"\n             \u251c\u25001140 \"/usr/sbin/zabbix_server: history syncer #2 [processed 1 values, 0 triggers in 0.005016 sec, idle 1 sec]\"\n             \u251c\u25001141 \"/usr/sbin/zabbix_server: history syncer #3 [processed 0 values, 0 triggers in 0.000031 sec, idle 1 sec]\"\n             \u251c\u25001142 \"/usr/sbin/zabbix_server: history syncer #4 [processed 0 values, 0 triggers in 0.000014 sec, idle 1 sec]\"\n             \u251c\u25001143 \"/usr/sbin/zabbix_server: escalator #1 [processed 0 escalations in 0.005587 sec, idle 3 sec]\"\n             \u251c\u25001144 \"/usr/sbin/zabbix_server: proxy poller #1 [exchanged data with 0 proxies in 0.000010 sec, idle 5 sec]\"\n             \u251c\u25001145 \"/usr/sbin/zabbix_server: self-monitoring [processed data in 0.000016 sec, idle 1 sec]\"\n             \u251c\u25001146 \"/usr/sbin/zabbix_server: task manager [processed 0 task(s) in 0.002511 sec, idle 5 sec]\"\n             \u251c\u25001147 \"/usr/sbin/zabbix_server: poller #1 [got 0 values in 0.000009 sec, idle 1 sec]\"\n             \u251c\u25001148 \"/usr/sbin/zabbix_server: poller #2 [got 1 values in 0.000232 sec, idle 1 sec]\"\n             \u251c\u25001149 \"/usr/sbin/zabbix_server: poller #3 [got 0 values in 0.000015 sec, idle 1 sec]\"\n             \u251c\u25001150 \"/usr/sbin/zabbix_server: poller #4 [got 0 values in 0.000010 sec, idle 1 sec]\"\n</code></pre> <p>This concludes our chapter on installing and configuring the Zabbix server with PostgreSQL. Next, we will proceed with configuring the front-end. You can choose to follow the instructions for either:</p> <ul> <li>Installing Zabbix frontend with Nginx</li> <li>Installing Zabbix frontend with Apache</li> </ul> <p>Each guide will walk you through setting up the web interface for Zabbix based on your preferred web server.</p>"},{"location":"installation/installing-zabbix/#installing-zabbix-frontend-with-nginx","title":"Installing Zabbix frontend with Nginx","text":"<p>Before configuring the front-end, you need to install the necessary packages. If the Zabbix front-end is hosted on the same server as the Zabbix server, you can install the required packages with the following command:</p> <pre><code># dnf install zabbix-nginx-conf and zabbix-web-mysql\nor if you used PostgreSQL\n# dnf install zabbix-web-pgsql\n</code></pre> <p>This command will install the front-end packages along with the required dependencies for Nginx or Apache, depending on your web server choice. If you are installing the front-end on a different server, make sure to execute this command on that specific machine.</p> <p>If you don't remember how to add the repository, have a look at Adding the Zabbix repository</p> <p>First thing we have to do is alter the Nginx configuration file so that we don't use the standard config.</p> <pre><code>vi /etc/nginx/nginx.conf\n</code></pre> <p>In this config look for the followin block that starts with :</p> <pre><code>    server {\n        listen       80;\n        listen       [::]:80;\n        server_name  _;\n        root         /usr/share/nginx/html;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n</code></pre> <p>And place the following lines in comment:</p> <pre><code>    server {\n#        listen       80;\n#        listen       [::]:80;\n#        server_name  _;\n#        root         /usr/share/nginx/html;\n</code></pre> <p>We now have to alter the Zabbix configuration file so that it matches our setup. Edit the following file:</p> <pre><code>vi /etc/nginx/conf.d/zabbix.conf\n</code></pre> <pre><code>server {\n        listen          8080;\n        server_name     example.com;\n\n        root    /usr/share/zabbix;\n\n        index   index.php;\n</code></pre> <p>Replace the first 2 lines with the correct port and domain for your frontend in case you don't have a domain you can replace servername with; like in the exaple below:</p> <pre><code>server {\n#        listen          8080;\n#        server_name     example.com;\n        listen          80;\n        server_name     _;\n\n        root    /usr/share/zabbix;\n\n        index   index.php;\n</code></pre> <p>We are now ready to start our websever and enable it so that it comes online after a reboot.</p> <pre><code>systemctl enable php-fpm --now\nsystemctl enable nginx --now\n</code></pre> <p>Let's verify if the service is properly started and enabled so that it survives our reboot next time.</p> <pre><code># systemctl status nginx\n\n\u25cf nginx.service - The nginx HTTP and reverse proxy server\n     Loaded: loaded (/usr/lib/systemd/system/nginx.service; enabled; preset: disabled)\n    Drop-In: /usr/lib/systemd/system/nginx.service.d\n             \u2514\u2500php-fpm.conf\n     Active: active (running) since Mon 2023-11-20 11:42:18 CET; 30min ago\n   Main PID: 1206 (nginx)\n      Tasks: 2 (limit: 12344)\n     Memory: 4.8M\n        CPU: 38ms\n     CGroup: /system.slice/nginx.service\n             \u251c\u25001206 \"nginx: master process /usr/sbin/nginx\"\n             \u2514\u25001207 \"nginx: worker process\"\n\nNov 20 11:42:18 zabbix-srv systemd[1]: Starting The nginx HTTP and reverse proxy server...\nNov 20 11:42:18 zabbix-srv nginx[1204]: nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nNov 20 11:42:18 zabbix-srv nginx[1204]: nginx: configuration file /etc/nginx/nginx.conf test is successful\nNov 20 11:42:18 zabbix-srv systemd[1]: Started The nginx HTTP and reverse proxy server.\n</code></pre> <p>The service is running and enabled so there is only 1 thing left to do before we can start the configuration in the GUI and that is to configure our firewall to allow incoming communication to the webserver.</p> <pre><code>firewall-cmd --add-service=http --permanent\nfirewall-cmd --reload\n</code></pre> <p>Open your browser and go to the url or ip of your frontend :</p> <pre><code>http://&lt;ip or dns of the zabbix frontend server&gt;/\n</code></pre> <p>If all goes well you should be greeted with a Zabbix welcome page. In case you have an error check the configuration again or have a look at the nginx log file :</p> <p><code>/var/log/nginx/error.log</code></p> <p>or run</p> <p><code>journalctl -xe</code></p> <p>This should help you in locating the errors you made.</p> <p>When you point your browser to the correct URL you should be greeted with a page like here :</p> <p></p> <p>As you see there is only a limited list of local translations available on our Zabbix frontend to choose from</p> <p></p> <p>What if we want to install Chinese as language or another language from the list ? Run the next command to get a list of all locales available for your OS.</p> <p><code>dnf list glibc-langpack-*</code></p> <p>This will give you a list like</p> <pre><code>Installed Packages\nglibc-langpack-en.x86_64\nAvailable Packages\nglibc-langpack-aa.x86_64\n...\n\nglibc-langpack-zu.x86_64\n</code></pre> <p>Let's search for our Chinese locale to see if it is available. As you can see the code starts with zh</p> <pre><code># dnf list glibc-langpack-* | grep zh\nglibc-langpack-zh.x86_64\nglibc-langpack-lzh.x86_64\n</code></pre> <p>The command returns us 2 lines but as we have seen that the code was zh_CN we only have to install the first package.</p> <pre><code># dnf install glibc-langpack-zh.x86_64 -y\n</code></pre> <p>When we return now to our frontend we are able to select the Chinese language.</p> <p></p> Note <p>If your preferred language is not available in the Zabbix front-end, don't worry\u2014it simply means that the translation is either incomplete or not yet available. Zabbix is an open-source project that relies on community contributions for translations, so you can help improve it by contributing your own translations.</p> <pre><code>Visit the translation page at [https://translate.zabbix.com/](https://translate.zabbix.com/)\nto assist with the translation efforts. Once your translation is complete and reviewed,\nit will be included in the next minor patch version of Zabbix.\nYour contributions help make Zabbix more accessible and improve the overall\nuser experience for everyone.\n</code></pre> <p>When you're satisfied with the available translations, click Next. You will then be taken to a screen to verify that all prerequisites are met. If any prerequisites are not fulfilled, address those issues first. However, if everything is in order, you should be able to proceed by clicking Next.</p> <p></p> <p>On the next page, you'll configure the database connection parameters:</p> <ol> <li>Select the Database Type: Choose either <code>MySQL</code> or <code>PostgreSQL</code> depending    on your setup.</li> <li>Enter the Database Host: Provide the IP address or DNS name of your    database server. Use port <code>3306</code> for MariaDB/MySQL or <code>5432</code> for PostgreSQL.</li> <li>Enter the Database Name: Specify the name of your database. In our case,    it is <code>zabbix</code>. If you are using PostgreSQL, you will also need to provide    the schema name, which is <code>zabbix_server</code> in our case.</li> <li>Enter the Database User: Input the database user created for the web front-end,    such as <code>zabbix-web</code>. Enter the corresponding password for this user.</li> </ol> <p>Ensure that the Database TLS encryption option is not selected, and then click Next step to proceed.</p> <p></p> <p>You're almost finished with the setup! The final steps involve:</p> <ol> <li>Assigning an Instance Name: Choose a descriptive name for your Zabbix instance.</li> <li>Selecting the Timezone: Choose the timezone that matches your location or    your preferred time zone for the Zabbix interface.</li> <li>Setting the Default Time Format: Select the default time format you prefer    to use.</li> </ol> <p>Once these settings are configured, you can complete the setup and proceed with any final configuration steps as needed.</p> Note <p>It\u2019s a good practice to set your Zabbix server to the UTC timezone, especially when managing systems across multiple timezones. Using UTC helps ensure consistency in time-sensitive actions and events, as the server\u2019s timezone is often used for calculating and displaying time-related information.</p> <p></p> <p>After clicking Next step again, you'll be taken to a page confirming that the configuration was successful. Click Finish to complete the setup process.</p> <p></p> <p>We are now ready to login :</p> <p></p> <p>Login : Admin Password : zabbix</p> <p>This concludes our topic on setting up the Zabbix server. If you're interested in securing your front-end, I recommend checking out the topic Securing Zabbix for additional guidance and best practices.</p>"},{"location":"installation/installing-zabbix/#installing-zabbix-frontend-with-apache","title":"Installing Zabbix frontend with Apache","text":"<p>Before we can configure our frontend we need to install our package first. If you run the frontend on the same server as the Zabbix server then there is nothing else you have to do you can just run the following command on your server to install the packages needed for our frontend to install:</p> <pre><code># dnf install zabbix-apache-conf zabbix-web-mysql\nor if you used PostgreSQL\n# dnf install zabbix-apache-conf zabbix-web-pgsql\n</code></pre> <p>This command will install the front-end packages along with the required dependencies for Nginx or Apache, depending on your web server choice. If you are installing the front-end on a different server, make sure to execute this command on that specific machine.</p> <p>If you don't remember how to add the repository, have a look at Adding the Zabbix repository</p> <p>We are now ready to start our websever and enable it so that it comes online after a reboot.</p> <pre><code>systemctl enable php-fpm --now\nsystemctl enable httpd --now\n</code></pre> <p>Let's verify if the service is properly started and enabled so that it survives our reboot next time.</p> <pre><code># systemctl status httpd\n</code></pre> <pre><code>\u25cf httpd.service - The Apache HTTP Server\n     Loaded: loaded (/usr/lib/systemd/system/httpd.service; enabled; preset: disabled)\n    Drop-In: /usr/lib/systemd/system/httpd.service.d\n             \u2514\u2500php-fpm.conf\n     Active: active (running) since Mon 2024-03-04 08:50:17 CET; 7min ago\n       Docs: man:httpd.service(8)\n   Main PID: 690 (httpd)\n     Status: \"Total requests: 96; Idle/Busy workers 100/0;Requests/sec: 0.213; Bytes served/sec: 560 B/sec\"\n      Tasks: 278 (limit: 22719)\n     Memory: 39.6M\n        CPU: 1.132s\n     CGroup: /system.slice/httpd.service\n             \u251c\u2500 690 /usr/sbin/httpd -DFOREGROUND\n             \u251c\u2500 736 /usr/sbin/httpd -DFOREGROUND\n             \u251c\u2500 737 /usr/sbin/httpd -DFOREGROUND\n             \u251c\u2500 738 /usr/sbin/httpd -DFOREGROUND\n             \u251c\u2500 739 /usr/sbin/httpd -DFOREGROUND\n             \u2514\u25004534 /usr/sbin/httpd -DFOREGROUND\n\nMar 04 08:50:17 localhost.localdomain systemd[1]: Starting The Apache HTTP Server...\nMar 04 08:50:17 localhost.localdomain httpd[690]: AH00558: httpd: Could not reliably determine the server's fully qualified domain name, using localhost.localdomain. Set th&gt;\nMar 04 08:50:17 localhost.localdomain httpd[690]: Server configured, listening on: port 80\nMar 04 08:50:17 localhost.localdomain systemd[1]: Started The Apache HTTP Server.x\n</code></pre> <p>The service is running and enabled so there is only 1 thing left to do before we can start the configuration in the GUI and that is to configure our firewall to allow incoming communication to the webserver.</p> <pre><code># firewall-cmd --add-service=http --permanent\n# firewall-cmd --reload\n</code></pre> <p>Open your browser and go to the url or ip of your frontend :</p> <pre><code>http://&lt;ip or dns of the zabbix frontend server&gt;/zabbix/\n</code></pre> <p>If all goes well you should be greeted with a Zabbix welcome page. In case you have an error check the configuration again or have a look at the Apache log file :</p> <p><code>/var/log/httpd/error_log</code></p> <p>or run</p> <p><code>journalctl -xe</code></p> <p>This should help you in locating the errors you made.</p> <p></p> <p>As you see there is only a limited list of local translations available on our Zabbix frontend to choose from</p> <p></p> <p>What if we want to install Chinese as language or another language from the list ? Run the next command to get a list of all locales available for your OS.</p> <p><code>dnf list glibc-langpack-*</code></p> <p>This will give you a list like</p> <pre><code>Installed Packages\nglibc-langpack-en.x86_64\nAvailable Packages\nglibc-langpack-aa.x86_64\n...\n\nglibc-langpack-zu.x86_64\n</code></pre> <p>Let's search for our Chinese locale to see if it is available. As you can see the code starts with zh</p> <pre><code># dnf list glibc-langpack-* | grep zh\nglibc-langpack-zh.x86_64\nglibc-langpack-lzh.x86_64\n</code></pre> <p>The command returns us 2 lines but as we have seen that the code was zh_CN we only have to install the first package.</p> <pre><code># dnf install glibc-langpack-zh.x86_64 -y\n</code></pre> <p>When we return now to our frontend we are able to select the Chinese language.</p> <p></p> Note <p>If your preferred language is not available in the Zabbix front-end, don't worry\u2014it simply means that the translation is either incomplete or not yet available. Zabbix is an open-source project that relies on community contributions for translations, so you can help improve it by contributing your own translations.</p> <pre><code>Visit the translation page at `https://translate.zabbix.com/` to assist with\nthe translation efforts. Once your translation is complete and reviewed,\nit will be included in the next minor patch version of Zabbix.\nYour contributions help make Zabbix more accessible and improve the overall\nuser experience for everyone.\n</code></pre> <p>When you're satisfied with the available translations, click Next. You will then be taken to a screen to verify that all prerequisites are met. If any prerequisites are not fulfilled, address those issues first. However, if everything is in order, you should be able to proceed by clicking Next.</p> <p></p> <p>On the next page, you'll configure the database connection parameters:</p> <ol> <li>Select the Database Type: Choose either MySQL or PostgreSQL depending on    your setup.</li> <li>Enter the Database Host: Provide the IP address or DNS name of your database    server. Use port 3306 for MariaDB/MySQL or 5432 for PostgreSQL.</li> <li>Enter the Database Name: Specify the name of your database. In our case,    it is zabbix. If you are using PostgreSQL, you will also need to provide the    schema name, which is zabbix_server in our case.</li> <li>Enter the Database User: Input the database user created for the web front-end,    such as zabbix-web. Enter the corresponding password for this user.</li> </ol> <p>Ensure that the Database TLS encryption option is not selected, and then click Next step to proceed.</p> <p></p> <p>You're almost finished with the setup! The final steps involve:</p> <ol> <li>Assigning an Instance Name: Choose a descriptive name for your Zabbix instance.</li> <li>Selecting the Timezone: Choose the timezone that matches your location or    your preferred time zone for the Zabbix interface.</li> <li>Setting the Default Time Format: Select the default time format you    prefer to use.</li> </ol> <p>Once these settings are configured, you can complete the setup and proceed with any final configuration steps as needed.</p> Note <p>It\u2019s a good practice to set your Zabbix server to the UTC timezone, especially when managing systems across multiple timezones. Using UTC helps ensure consistency in time-sensitive actions and events, as the server\u2019s timezone is often used for calculating and displaying time-related information.</p> <p></p> <p>After clicking Next step again, you'll be taken to a page confirming that the configuration was successful. Click Finish to complete the setup process.</p> <p></p> <p>We are now ready to login :</p> <p></p> <p>Login : Admin Password : zabbix</p> <p>In case you are like me and don't like the /zabbix path at the end of you url then there is an easy way to remove this. Edit you <code>httpd</code> config file and add the lines below and replace it with your own domain:</p> <pre><code># vi /etc/httpd/conf/httpd.conf\n</code></pre> <pre><code>NameVirtualHost 172.1.11.21:80\n\n&lt;VirtualHost \"your ip or dns\":80&gt;\n  ServerName zabbixserver.mydomain.org\n  ServerAlias zabbixserver\n  DocumentRoot /usr/share/zabbix\n&lt;/VirtualHost&gt;\n</code></pre> <p>Don't forget to restart the <code>httpd</code> service</p> <pre><code># systemctl restart httpd\n</code></pre> <p>This concludes our topic on setting up the Zabbix server. If you're interested in securing your front-end, I recommend checking out the topic Securing Zabbix for additional guidance and best practices.</p>"},{"location":"installation/installing-zabbixdb/","title":"Installing Zabbix DB Server","text":"<p>This chapter focuses on the installation of the Zabbix database. While Zabbix supports various SQL databases, we will concentrate on three primary options: PostgreSQL, MariaDB, and MySQL. It's worth noting that Oracle is also supported, but its support is deprecated. Zabbix 7 will be the final version supporting Oracle as a backend.</p> <p>We will outline the installation and configuration process for each database on a separate machine. However, it's important to understand that there's no strict requirement to install the database on a separate server from your Zabbix server. The choice between local and remote database installation depends on your specific needs and infrastructure.</p> <p>For most initial setups, a locally installed database will likely suffice. When opting for local installation, follow these best practices:</p> <ul> <li>Ensure the database is stored on separate disks from the operating system.</li> <li>Monitor performance as your system grows.</li> <li>Be prepared to migrate the database to a separate server if performance issues arise.</li> </ul> Note <p>Local connections are typically faster than connections over TCP. Therefore, moving the database to its own server isn't always the optimal solution. The best configuration depends on your specific requirements and system architecture.</p> <p>When deciding between local and remote database installation, consider the following factors:</p> <ol> <li>System Resources: Evaluate whether your Zabbix server has sufficient resources to handle both the application and database workload.</li> <li>Network Latency: Assess the impact of network latency on database queries if opting for a remote installation.</li> <li>Scalability: Consider future growth and the potential need for dedicated database hardware.</li> <li>Backup and Maintenance: Determine if separate database installation simplifies your backup and maintenance procedures.</li> </ol> <p>In the following sections, we'll dive into the installation and configuration processes for PostgreSQL, MariaDB, and MySQL. Each section will provide step-by-step instructions to ensure a smooth setup, regardless of whether you choose local or remote installation.</p>"},{"location":"installation/installing-zabbixdb/#installing-zabbix-with-mariadb","title":"Installing Zabbix with MariaDB","text":"<p>To begin the installation process for the MariaDB server, the first step involves manually creating a repository configuration file. This file, <code>mariadb.repo</code>, must be placed in the <code>/etc/yum.repos.d/</code> directory. The repository file will allow your package manager to locate and install the necessary MariaDB components.</p> <p>To create the MariaDB repository file, execute the following command in your terminal:</p>"},{"location":"installation/installing-zabbixdb/#add-the-mariadb-repository","title":"Add the MariaDB repository","text":"<pre><code># sudo nano /etc/yum.repos.d/mariadb.repo\n</code></pre> <p>This will open a text editor where you can input the repository configuration details. Once the repository is configured, you can proceed with the installation of MariaDB using your package manager.</p> <pre><code># vi /etc/yum.repos.d/mariadb.repo\n</code></pre> <p>The above command will open a new file, allowing you to define the repository configuration. After the file is created, you'll need to add the following content to configure the MariaDB repository. Ensure that the version specified, in this case, <code>10.11</code>, is supported by Zabbix by reviewing the latest version requirements for your specific Zabbix deployment.</p> <p>Here\u2019s the configuration you need to add:</p> <pre><code># MariaDB 10.11 RedHatEnterpriseLinux repository list - created 2023-11-01 14:20 UTC\n# https://mariadb.org/download/\n[mariadb]\nname = MariaDB\n# rpm.mariadb.org is a dynamic mirror if your preferred mirror goes offline. See https://mariadb.org/mirrorbits/ for details.\n# baseurl = https://rpm.mariadb.org/10.11/rhel/$releasever/$basearch\nbaseurl = https://mirror.23m.com/mariadb/yum/10.11/rhel/$releasever/$basearch\n# gpgkey = https://rpm.mariadb.org/RPM-GPG-KEY-MariaDB\ngpgkey = https://mirror.23m.com/mariadb/yum/RPM-GPG-KEY-MariaDB\ngpgcheck = 1\n</code></pre> <p>After saving the file, ensure that everything is properly set up and that your MariaDB version is compatible with your Zabbix version to avoid potential integration issues.</p> <p>Before proceeding with the MariaDB installation, it\u2019s a best practice to ensure your operating system is up-to-date with the latest patches and security fixes. This will help maintain system stability and compatibility with the software you're about to install.</p> <p>To update your OS, run the following command:</p> <pre><code># dnf update -y\n</code></pre> <p>This command will automatically fetch and install the latest updates available for your system, applying security patches, performance improvements, and bug fixes. Once the update process is complete, you can move forward with the MariaDB installation.</p>"},{"location":"installation/installing-zabbixdb/#install-the-mariadb-database","title":"Install the MariaDB database","text":"<p>With the operating system updated and the MariaDB repository configured, you are now ready to install the MariaDB server and client packages. This will provide the necessary components to run and manage your database.</p> <p>To install the MariaDB server and client, execute the following command:</p> <pre><code># dnf install MariaDB-server MariaDB-client\n</code></pre> <p>This command will download and install both the server and client packages, enabling you to set up, configure, and interact with your MariaDB database. Once the installation is complete, you can proceed to start and configure the MariaDB service.</p> <p>Now that MariaDB is installed, we need to enable the service to start automatically upon boot and start it immediately. Use the following command to accomplish this:</p> <pre><code># systemctl enable mariadb --now\n</code></pre> <p>This command will both enable and start the MariaDB service. Once the service is running, you can verify that the installation was successful by checking the version of MariaDB using the following command:</p> <pre><code># mysql -V\n</code></pre> <p>The expected output should resemble this:</p> <pre><code>mysql  Ver 15.1 Distrib 10.11.6-MariaDB, for Linux (x86_64) using EditLine wrapper\n</code></pre> <p>To ensure that the MariaDB service is running properly, you can check its status with the following command:</p> <pre><code># systemctl status mariadb\n</code></pre> <p>You should see an output similar to this, indicating that the MariaDB service is active and running:</p> <pre><code>\u25cf mariadb.service - MariaDB 10.11.6 database server\n     Loaded: loaded (/usr/lib/systemd/system/mariadb.service; enabled; preset: disabled)\n    Drop-In: /etc/systemd/system/mariadb.service.d\n             \u2514\u2500migrated-from-my.cnf-settings.conf\n     Active: active (running) since Sat 2023-11-18 19:19:36 CET; 2min 13s ago\n       Docs: man:mariadbd(8)\n             https://mariadb.com/kb/en/library/systemd/\n    Process: 41986 ExecStartPre=/bin/sh -c systemctl unset-environment _WSREP_START_POSITION (code=exited, status=0/SUCCESS)\n    Process: 41987 ExecStartPre=/bin/sh -c [ ! -e /usr/bin/galera_recovery ] &amp;&amp; VAR= ||   VAR=`cd /usr/bin/..; /usr/bin/galera_recovery`; [ $? -eq 0 ]   &amp;&amp; systemctl set-environment _WSREP_START&gt;\n    Process: 42006 ExecStartPost=/bin/sh -c systemctl unset-environment _WSREP_START_POSITION (code=exited, status=0/SUCCESS)\n   Main PID: 41995 (mariadbd)\n     Status: \"Taking your SQL requests now...\"\n      Tasks: 9 (limit: 12344)\n     Memory: 206.8M\n        CPU: 187ms\n</code></pre> <p>This confirms that your MariaDB server is up and running, ready for further configuration.</p>"},{"location":"installation/installing-zabbixdb/#securing-the-mariadb-database","title":"Securing the MariaDB database","text":"<p>To enhance the security of your MariaDB server, it's essential to remove unnecessary test databases, anonymous users, and set a root password. This can be done using the mariadb-secure-installation script, which provides a step-by-step guide to securing your database.</p> <p>Run the following command:</p> <pre><code># mariadb-secure-installation\n\nNOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB\n      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!\n\nIn order to log into MariaDB to secure it, we'll need the current\npassword for the root user. If you've just installed MariaDB, and\nhaven't set the root password yet, you should just press enter here.\n\nEnter current password for root (enter for none):\nOK, successfully used password, moving on...\n\nSetting the root password or using the unix_socket ensures that nobody\ncan log into the MariaDB root user without the proper authorisation.\n\nYou already have your root account protected, so you can safely answer 'n'.\n\nSwitch to unix_socket authentication [Y/n] n\n ... skipping.\n\nYou already have your root account protected, so you can safely answer 'n'.\n\nChange the root password? [Y/n] y\nNew password:\nRe-enter new password:\nPassword updated successfully!\nReloading privilege tables..\n ... Success!\n\n\nBy default, a MariaDB installation has an anonymous user, allowing anyone\nto log into MariaDB without having to have a user account created for\nthem.  This is intended only for testing, and to make the installation\ngo a bit smoother.  You should remove them before moving into a\nproduction environment.\n\nRemove anonymous users? [Y/n] y\n ... Success!\n\nNormally, root should only be allowed to connect from 'localhost'.  This\nensures that someone cannot guess at the root password from the network.\n\nDisallow root login remotely? [Y/n] y\n ... Success!\n\nBy default, MariaDB comes with a database named 'test' that anyone can\naccess.  This is also intended only for testing, and should be removed\nbefore moving into a production environment.\n\nRemove test database and access to it? [Y/n] y\n - Dropping test database...\n ... Success!\n - Removing privileges on test database...\n ... Success!\n\nReloading the privilege tables will ensure that all changes made so far\nwill take effect immediately.\n\nReload privilege tables now? [Y/n] y\n ... Success!\n\nCleaning up...\n\nAll done!  If you've completed all of the above steps, your MariaDB\ninstallation should now be secure.\n\nThanks for using MariaDB!\n</code></pre> <p>The mariadb-secure-installation script will guide you through several key steps:</p> <ol> <li>Set a root password if one isn't already set.</li> <li>Remove anonymous users.</li> <li>Disallow remote root logins.</li> <li>Remove the test database.</li> <li>Reload the privilege tables to ensure the changes take effect.</li> </ol> <p>Once complete, your MariaDB instance will be significantly more secure.</p>"},{"location":"installation/installing-zabbixdb/#create-the-zabbix-database","title":"Create the Zabbix database","text":"<p>With MariaDB now set up and secured, we can move on to creating the database for Zabbix. This database will store all the necessary data related to your Zabbix server, including configuration information and monitoring data.</p> <p>Follow these steps to create the Zabbix database:</p> <ul> <li>Log in to the MariaDB shell as the root user:</li> </ul> <p>You'll be prompted to enter the root password that you set during the mariadb-secure-installation process.</p> <pre><code># mysql -uroot -p\n</code></pre> <ul> <li>Create the Zabbix database:</li> </ul> <p>Once you're logged into the MariaDB shell, run the following command to create a database for Zabbix:</p> <pre><code>MariaDB [(none)]&gt; CREATE DATABASE zabbix CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\n</code></pre> <p>This command creates a new database named zabbix with the UTF-8 character set, which is required for Zabbix.</p> <ul> <li>Create a dedicated user for Zabbix and grant the necessary privileges: Next, you need to create a user that Zabbix will use to access the database. Replace password with a strong password of your choice.</li> </ul> <pre><code>MariaDB [(none)]&gt; CREATE USER 'zabbix-web'@'&lt;zabbix server ip&gt;' IDENTIFIED BY '&lt;password&gt;';\nMariaDB [(none)]&gt; CREATE USER 'zabbix-srv'@'&lt;zabbix server ip&gt;' IDENTIFIED BY '&lt;password&gt;';\nMariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON zabbix.* TO 'zabbix-srv'@'&lt;zabbix server ip&gt;';\nMariaDB [(none)]&gt; GRANT SELECT, UPDATE, DELETE, INSERT ON zabbix.* TO 'zabbix-web'@'&lt;zabbix server ip&gt;';\nMariaDB [(none)]&gt; FLUSH PRIVILEGES;\n</code></pre> <p>This creates new users for zabbix-web and zabbix-srv, grants them  access to the zabbix database, and ensures that the privileges are applied immediately.</p> <ul> <li>In some cases, especially when setting up Zabbix with MariaDB, you might encounter issues related to stored functions and triggers if binary logging is enabled.</li> </ul> <p>To address this, you need to set the log_bin_trust_function_creators option to 1 in the MariaDB configuration file. This allows non-root users to create stored functions and triggers without requiring SUPER privileges, which are restricted when binary logging is enabled.</p> <pre><code>MariaDB [(none)]&gt; SET GLOBAL log_bin_trust_function_creators = 1;\nMariaDB [(none)]&gt; QUIT\n</code></pre> <p>At this point, your Zabbix database is ready, and you can proceed with configuring the Zabbix server to connect to the database.</p> Warning <p>In the Zabbix documentation, it is explicitly stated that deterministic triggers need to be created during the schema import. On MySQL and MariaDB systems, this requires setting <code>GLOBAL log_bin_trust_function_creators = 1</code> if binary logging is enabled, and you lack superuser privileges.</p> <p>If the <code>log_bin_trust_function_creators</code> option is not set in the MySQL configuration file, it will block the creation of these triggers during schema import. This is essential because, without superuser access, non-root users cannot create triggers or stored functions unless this setting is applied.</p> <p>To summarize:</p> <ul> <li>Binary logging enabled: If binary logging is enabled and the user does not have superuser privileges, the creation of necessary Zabbix triggers will fail unless <code>log_bin_trust_function_creators = 1</code> is set.</li> <li>Solution: Add <code>log_bin_trust_function_creators = 1</code> to the <code>[mysqld]</code>  section in your MySQL/MariaDB configuration file or temporarily set it at runtime with <code>SET GLOBAL log_bin_trust_function_creators = 1</code> if you have sufficient permissions.</li> </ul> <p>This ensures that Zabbix can successfully create the required triggers during schema import without encountering privilege-related errors.</p>"},{"location":"installation/installing-zabbixdb/#add-the-zabbix-repository-and-populate-the-db","title":"Add the Zabbix repository and populate the DB","text":"<pre><code># rpm -Uvh https://repo.zabbix.com/zabbix/6.5/rocky/9/x86_64/zabbix-release-6.5-2.el9.noarch.rpm\n# dnf clean all\n# dnf install zabbix-sql-scripts\n</code></pre> <p>Upload the data from zabbix (db structure, images, user, ... )</p> <pre><code># zcat /usr/share/zabbix-sql-scripts/mysql/server.sql.gz | mysql --default-character-set=utf8mb4 -uroot -p zabbix\n</code></pre> Warning <p>Depending on the speed of your hardware or virtual machine, the process may take anywhere from a few seconds to several minutes. Please be patient and avoid canceling the operation; just wait for the prompt to appear.</p> <p>Log back into your MariaDB Database as root</p> <pre><code># mysql -uroot -p\n</code></pre> <p>Once the import of the Zabbix schema is complete and you no longer need the <code>log_bin_trust_function_creators</code> global parameter, it is a good practice to remove it for security reasons.</p> <p>To revert the change and set the global parameter back to <code>0</code>, use the following command in the MariaDB shell:</p> <pre><code>MariaDB [(none)]&gt; SET GLOBAL log_bin_trust_function_creators = 0;\nQuery OK, 0 rows affected (0.001 sec)\n</code></pre> <p>This command will disable the setting, ensuring that the server's security posture remains robust.</p>"},{"location":"installation/installing-zabbixdb/#configure-the-firewall","title":"Configure the firewall","text":"<p>Configuring Firewall Rules for MariaDB Access To complete our database setup, we need to configure the firewall to allow incoming connections for the MariaDB database from our Zabbix server. Currently, no connections are accepted. Let's examine the current firewall configuration:</p> <pre><code># firewall-cmd --list-all\npublic (active)\n  target: default\n  icmp-block-inversion: no\n  interfaces: enp0s3 enp0s8\n  sources:\n  services: cockpit dhcpv6-client  ssh\n  ports:\n  protocols:\n  forward: yes\n  masquerade: no\n  forward-ports:\n  source-ports:\n  icmp-blocks:\n  rich rules:\n</code></pre> <p>To securely allow MariaDB access, we'll create a dedicated zone and open port 3306/tcp only for the Zabbix server's IP address:</p> <ul> <li>Create a new firewall zone for MariaDB:</li> </ul> <pre><code># firewall-cmd --new-zone=mariadb-access --permanent\nsuccess\n</code></pre> <ul> <li>Reload the firewall to apply changes:</li> </ul> <pre><code># firewall-cmd --reload\nsuccess\n</code></pre> <ul> <li>Verify the new zone has been added:</li> </ul> <pre><code># firewall-cmd --get-zones\nblock dmz drop external home internal mariadb-access nm-shared public trusted work\n</code></pre> <ul> <li>Add the Zabbix server's IP to the new zone:</li> </ul> <pre><code># firewall-cmd --zone=mariadb-access --add-source=&lt;zabbix-serverip&gt; --permanent\n</code></pre> <ul> <li>Open port 3306/tcp in the new zone:</li> </ul> <pre><code>success\n# firewall-cmd --zone=mariadb-access --add-port=3306/tcp  --permanent\n</code></pre> <ul> <li>Reload the firewall again to apply the latest changes:</li> </ul> <pre><code>success\n# firewall-cmd --reload\n</code></pre> <p>To verify the new firewall rules, inspect the mariadb-access zone:</p> <pre><code># firewall-cmd --zone=mariadb-access --list-all\n\nmariadb-access (active)\n  target: default\n  icmp-block-inversion: no\n  interfaces:\n  sources: &lt;ip from zabbix-server&gt;\n  services:\n  ports: 3306/tcp\n  protocols:\n  forward: no\n  masquerade: no\n  forward-ports:\n  source-ports:\n  icmp-blocks:\n  rich rules:\n</code></pre> <p>With these configurations in place, the database server is now ready to accept connections from the Zabbix server. You can proceed with the next task: Installing the Zabbix Server</p>"},{"location":"installation/installing-zabbixdb/#installing-zabbix-with-mysql","title":"Installing Zabbix with MySQL","text":"<p>Before proceeding with the MySQL server installation, it's crucial to set up the appropriate MySQL repository. This ensures that we install the correct version compatible with our Zabbix implementation.</p> <ul> <li> <p>Verify Supported MySQL Versions Prior to installation, consult the official Zabbix documentation to confirm the supported MySQL versions. This step is critical for several reasons:</p> </li> <li> <p>Compatibility: Ensures that the MySQL version works seamlessly with your Zabbix installation.</p> </li> <li>Support: Avoids installing versions that are no longer supported or maintained.</li> <li> <p>Performance: Guarantees optimal performance and utilization of features specific to Zabbix requirements.</p> </li> <li> <p>Create MySQL Repository To install the proper MySQL server files, you need to add the official MySQL repository to your system. This process typically involves the following steps: a. Download the MySQL repository configuration file. b. Add the repository to your system's package manager. c. Update the package manager's cache to recognize the new repository. The exact commands for these steps may vary depending on your operating system and the specific MySQL version required for your Zabbix installation.</p> </li> <li> <p>Prepare for Installation Once the repository is set up and you've confirmed the appropriate MySQL version, you'll be ready to proceed with the actual installation of the MySQL server.</p> </li> </ul> <p>By following these preliminary steps, you ensure a smooth installation process and avoid potential compatibility issues down the line. The next section will cover the actual installation procedure for the MySQL server.</p> <p>documentation to see what version is supported so you don't install a version that is not supported or is not supported anymore.</p>"},{"location":"installation/installing-zabbixdb/#add-the-mysql-repo","title":"Add the MySQL repo","text":"<p>Run the following command to install the MySQL repo for version 8.0</p> <p><code># dnf -y install https://dev.mysql.com/get/mysql80-community-release-el9-1.noarch.rpm</code></p> Note <p>\"If you install this on RedHat 8 and higher or alternatives like CentOS, Rocky or Alma 8 then you need to disable the OS provided MySQL module by running 'module disable mysql'.\"</p> <p>Let's update our OS first with the latest patches</p> <pre><code># dnf update -y\n</code></pre> <p>This command will automatically fetch and install the latest updates available for your system, applying security patches, performance improvements, and bug fixes. Once the update process is complete, you can move forward with the MariaDB installation.</p>"},{"location":"installation/installing-zabbixdb/#installing-the-mysql-database","title":"Installing the MySQL database","text":"<p>With the operating system updated and the MySQL repository configured, you are now ready to install the MySQL server and client packages. This will provide the necessary components to run and manage your database.</p> <p>To install the MySQL server, execute the following command:</p> <p><code># dnf -y install mysql-community-server</code></p> <p>Now that MySQL is installed, we need to enable the service to start automatically upon boot and start it immediately. Use the following command to accomplish this:</p> <pre><code># systemctl enable mysqld --now\n</code></pre> <p>Once the installation is complete, you can verify the version of the MySQL server by using the following command:</p> <p><code># mysql -V</code></p> <p>The output should look like this:</p> <p><code>mysql  Ver 8.0.35 for Linux on x86_64 (MySQL Community Server - GPL)</code></p> <p>To ensure that the MySQL service is running properly, you can check its status with the following command:</p> <pre><code># systemctl status mysqld\n\n\u25cf mysqld.service - MySQL Server\n     Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; preset: disabled)\n     Active: active (running) since Mon 2023-11-20 22:15:51 CET; 1min 15s ago\n       Docs: man:mysqld(8)\n             http://dev.mysql.com/doc/refman/en/using-systemd.html\n    Process: 44947 ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=0/SUCCESS)\n   Main PID: 45012 (mysqld)\n     Status: \"Server is operational\"\n      Tasks: 37 (limit: 12344)\n     Memory: 448.3M\n        CPU: 4.073s\n     CGroup: /system.slice/mysqld.service\n             \u2514\u250045012 /usr/sbin/mysqld\n\nNov 20 22:15:43 mysql-db systemd[1]: Starting MySQL Server...\nNov 20 22:15:51 mysql-db systemd[1]: Started MySQL Server.\n</code></pre>"},{"location":"installation/installing-zabbixdb/#securing-the-mysql-database","title":"Securing the MySQL database","text":"<p>MySQL will secure our database with a random root password that is generated when we install the database. First thing we need to do is replace it with our own password. To find what the password is we need to read the log file with the following command:</p> <pre><code># grep 'temporary password' /var/log/mysqld.log\n</code></pre> <p>Change the root password as soon as possible by logging in with the generated, temporary password and set a custom password for the superuser account:</p> <pre><code># mysql -uroot -p\n</code></pre> <pre><code>mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED BY '&lt;my mysql password&gt;';\nmysql&gt; quit\n</code></pre> <p>To enhance the security of your MySQL server, it's essential to remove unnecessary test databases, anonymous users, and set a root password. This can be done using the mysql-secure-installation script, which provides a step-by-step guide to securing your database.</p> Note <p>\"There is no need to reset the root password for MySQL again as we have reset it already. The next step is optional but recommended.\"</p> <pre><code># mysql_secure_installation\n\nSecuring the MySQL server deployment.\n\nEnter password for user root:\nThe 'validate_password' component is installed on the server.\nThe subsequent steps will run with the existing configuration\nof the component.\nUsing existing password for root.\n\nEstimated strength of the password: 100\nChange the password for root ? ((Press y|Y for Yes, any other key for No) : n\n\n ... skipping.\nBy default, a MySQL installation has an anonymous user,\nallowing anyone to log into MySQL without having to have\na user account created for them. This is intended only for\ntesting, and to make the installation go a bit smoother.\nYou should remove them before moving into a production\nenvironment.\n\nRemove anonymous users? (Press y|Y for Yes, any other key for No) : y\nSuccess.\n\n\nNormally, root should only be allowed to connect from\n'localhost'. This ensures that someone cannot guess at\nthe root password from the network.\n\nDisallow root login remotely? (Press y|Y for Yes, any other key for No) : y\nSuccess.\n\nBy default, MySQL comes with a database named 'test' that\nanyone can access. This is also intended only for testing,\nand should be removed before moving into a production\nenvironment.\n\n\nRemove test database and access to it? (Press y|Y for Yes, any other key for No) : y\n - Dropping test database...\nSuccess.\n\n - Removing privileges on test database...\nSuccess.\n\nReloading the privilege tables will ensure that all changes\nmade so far will take effect immediately.\n\nReload privilege tables now? (Press y|Y for Yes, any other key for No) : y\nSuccess.\n\nAll done!\n</code></pre> <p>The mysql-secure-installation script will guide you through several key steps:</p> <ol> <li>Set a root password if one isn't already set.</li> <li>Remove anonymous users.</li> <li>Disallow remote root logins.</li> <li>Remove the test database.</li> <li>Reload the privilege tables to ensure the changes take effect.</li> </ol> <p>Once complete, your MySQL instance will be significantly more secure.</p>"},{"location":"installation/installing-zabbixdb/#create-the-zabbix-databases","title":"Create the Zabbix databases","text":"<p>With MySQL now set up and secured, we can move on to creating the database for Zabbix. This database will store all the necessary data related to your Zabbix server, including configuration information and monitoring data.</p> <p>Follow these steps to create the Zabbix database:</p> <ol> <li>Log in to the MySQL shell as the root user:</li> </ol> <pre><code># mysql -u root -p\n</code></pre> <p>You'll be prompted to enter the root password that you set during the mysql-secure-installation process.</p> <p>Once you're logged into the MySQL shell, run the following command to create a database for Zabbix:</p> <pre><code>mysql&gt; CREATE DATABASE zabbix CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\n</code></pre> <p>This command creates a new database named zabbix with the UTF-8 character set, which is required for Zabbix.</p> <ul> <li>Create a dedicated user for Zabbix and grant the necessary privileges: Next, you need to create a user that Zabbix will use to access the database. Replace password with a strong password of your choice.</li> </ul> <pre><code>mysql&gt; CREATE USER 'zabbix-web'@'&lt;zabbix server ip&gt;' IDENTIFIED BY '&lt;password&gt;';\nmysql&gt; CREATE USER 'zabbix-srv'@'&lt;zabbix server ip&gt;' IDENTIFIED BY '&lt;password&gt;';\nmysql&gt; GRANT ALL PRIVILEGES ON zabbix.* TO 'zabbix-srv'@'&lt;zabbix server ip&gt;';\nmysql&gt; GRANT SELECT, UPDATE, DELETE, INSERT ON zabbix.* TO 'zabbix-web'@'&lt;zabbix server ip&gt;';\nmysql&gt; FLUSH PRIVILEGES;\n</code></pre> <p>This creates new users for zabbix-web and zabbix-srv, grants them  access to the zabbix database, and ensures that the privileges are applied immediately.</p> <ul> <li>In some cases, especially when setting up Zabbix with MariaDB, you might encounter issues related to stored functions and triggers if binary logging is enabled.</li> </ul> <p>To address this, you need to set the log_bin_trust_function_creators option to 1 in the MariaDB configuration file. This allows non-root users to create stored functions and triggers without requiring SUPER privileges, which are restricted when binary logging is enabled.</p> <pre><code>mysql&gt; SET GLOBAL log_bin_trust_function_creators = 1;\nmysql&gt; QUIT\n</code></pre> <p>At this point, your Zabbix database is ready, and you can proceed with configuring the Zabbix server to connect to the database.</p> Warning <p>In the Zabbix documentation, it is explicitly stated that deterministic triggers need to be created during the schema import. On MySQL and MariaDB systems, this requires setting <code>GLOBAL log_bin_trust_function_creators = 1</code> if binary logging is enabled, and you lack superuser privileges.</p> <p>If the <code>log_bin_trust_function_creators</code> option is not set in the MySQL configuration file, it will block the creation of these triggers during schema import. This is essential because, without superuser access, non-root users cannot create triggers or stored functions unless this setting is applied.</p> <p>To summarize:</p> <ul> <li>Binary logging enabled: If binary logging is enabled and the user does not have superuser privileges, the creation of necessary Zabbix triggers will fail unless <code>log_bin_trust_function_creators = 1</code> is set.</li> <li>Solution: Add <code>log_bin_trust_function_creators = 1</code> to the <code>[mysqld]</code> section in your MySQL/MariaDB configuration file or temporarily set it at runtime with <code>SET GLOBAL log_bin_trust_function_creators = 1</code> if you have sufficient permissions.</li> </ul> <p>This ensures that Zabbix can successfully create the required triggers during schema import without encountering privilege-related errors.</p>"},{"location":"installation/installing-zabbixdb/#add-the-zabbix-repository-and-populate-the-mysql-db","title":"Add the Zabbix repository and populate the MySQL DB","text":"<pre><code># rpm -Uvh https://repo.zabbix.com/zabbix/6.5/rocky/9/x86_64/zabbix-release-6.5-2.el9.noarch.rpm\n# dnf clean all\n# dnf install zabbix-sql-scripts\n</code></pre> <p>Now let;s upload the data from zabbix (db structure, images, user, ... )</p> <pre><code># zcat /usr/share/zabbix-sql-scripts/mysql/server.sql.gz | mysql --default-character-set=utf8mb4 -uroot -p zabbix\nEnter password:\n</code></pre> Warning <p>Depending on the speed of your hardware or virtual machine, the process may take anywhere from a few seconds to several minutes. Please be patient and avoid canceling the operation; just wait for the prompt to appear.</p> <p>Log back into your MySQL Database as root</p> <pre><code># mysql -uroot -p\n</code></pre> <p>Once the import of the Zabbix schema is complete and you no longer need the <code>log_bin_trust_function_creators</code> global parameter, it is a good practice to remove it for security reasons.</p> <p>To revert the change and set the global parameter back to <code>0</code>, use the following command in the MariaDB shell:</p> <pre><code>mysql&gt; SET GLOBAL log_bin_trust_function_creators = 0;\nQuery OK, 0 rows affected (0.001 sec)\n</code></pre> <p>This command will disable the setting, ensuring that the server's security posture remains robust.</p>"},{"location":"installation/installing-zabbixdb/#configure-the-firewall_1","title":"Configure the firewall","text":"<p>Configuring Firewall Rules for MySQL Access To complete our database setup, we need to configure the firewall to allow incoming connections for the MySQL database from our Zabbix server. Currently, no connections are accepted. Let's examine the current firewall configuration:</p> <pre><code># firewall-cmd --list-all\npublic (active)\n  target: default\n  icmp-block-inversion: no\n  interfaces: enp0s3 enp0s8\n  sources:\n  services: cockpit dhcpv6-client  ssh\n  ports:\n  protocols:\n  forward: yes\n  masquerade: no\n  forward-ports:\n  source-ports:\n  icmp-blocks:\n  rich rules:\n</code></pre> <p>To securely allow MySQL access, we'll create a dedicated zone and open port 3306/tcp only for the Zabbix server's IP address:</p> <ul> <li>Create a new firewall zone for MariaDB:</li> </ul> <pre><code># firewall-cmd --new-zone=mysql-access --permanent\nsuccess\n</code></pre> <ul> <li>Reload the firewall to apply changes:</li> </ul> <pre><code># firewall-cmd --reload\nsuccess\n</code></pre> <ul> <li>Verify the new zone has been added:</li> </ul> <pre><code># firewall-cmd --get-zones\nblock dmz drop external home internal mysql-access nm-shared public trusted work\n</code></pre> <ul> <li>Add the Zabbix server's IP to the new zone:</li> </ul> <pre><code># firewall-cmd --zone=mysql-access --add-source=&lt;zabbix-serverip&gt; --permanent\n</code></pre> <ul> <li>Open port 3306/tcp in the new zone:</li> </ul> <pre><code>success\n# firewall-cmd --zone=mysql-access --add-port=3306/tcp  --permanent\n</code></pre> <ul> <li>Reload the firewall again to apply the latest changes:</li> </ul> <pre><code>success\n# firewall-cmd --reload\n</code></pre> <p>To verify the new firewall rules, inspect the mysql-access zone:</p> <pre><code># firewall-cmd --list-all --zone=mysql-access\n</code></pre> <pre><code>mysql-access (active)\n  target: default\n  icmp-block-inversion: no\n  interfaces:\n  sources: &lt;ip from the zabbix-server&gt;\n  services:\n  ports: 3306/tcp\n  protocols:\n  forward: no\n  masquerade: no\n  forward-ports:\n  source-ports:\n  icmp-blocks:\n  rich rules:\n</code></pre> <p>With these configurations in place, the database server is now ready to accept connections from the Zabbix server. You can proceed with the next task: Installing the Zabbix Server</p>"},{"location":"installation/installing-zabbixdb/#installing-zabbix-with-postgresql","title":"Installing Zabbix with PostgreSQL","text":"<p>For our DB setup with PostgreSQL we need to add our PostgreSQL repository first to the system. As of writing PostgreSQL 13-16 are supported but best is to have a look before you install it as new versions may be supported and older maybe unsupported both by Zabbix and PostgreSQL. Usually it's a good idea to go with the latest version that is supported by Zabbix. Zabbix also supports the extension TimescaleDB this is someting we will talk later about. As you will see the setup from PostgreSQL is very different from MySQL not only the installation but also securing the DB.</p> <p>The table of compatibility can be found here.</p>"},{"location":"installation/installing-zabbixdb/#add-the-postgresql-repo","title":"Add the PostgreSQL repo","text":"<p>So let us start first setting up our PostgreSQL repository with the folowing commands.</p> <pre><code># Install the repository RPM:\nsudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\n# Disable the built-in PostgreSQL module:\nsudo dnf -qy module disable postgresql\n\n# Install PostgreSQL:\nsudo dnf install -y postgresql16-server\n\n# Initialize the database and enable automatic start:\nsudo /usr/pgsql-16/bin/postgresql-16-setup initdb\nsudo systemctl enable postgresql-16 --now\n</code></pre>"},{"location":"installation/installing-zabbixdb/#securing-the-postgresql-database","title":"Securing the PostgreSQL database","text":"<p>As you've pointed out, PostgreSQL handles access permissions differently from MySQL and MariaDB. PostgreSQL relies on a file called pg_hba.conf to manage who can access the database, from where, and what encryption method is used for authentication.</p> Note <p>Client authentication in PostgreSQL is configured through the pg_hba.conf file, where \"HBA\" stands for Host-Based Authentication. This file specifies which users can access the database, from which hosts, and how they are authenticated. For further details, you can refer to the official PostgreSQL documentation.\"</p> <p>Add the following lines, the order here is important.</p> <pre><code># vi /var/lib/pgsql/16/data/pg_hba.conf\n</code></pre> <pre><code># \"local\" is for Unix domain socket connections only\nlocal   zabbix          zabbix-srv                               scram-sha-256\nlocal   all             all                                      peer\n# IPv4 local connections:\nhost    zabbix          zabbix-srv      &lt;ip from zabbix server/24&gt; scram-sha-256\nhost    zabbix          zabbix-web      &lt;ip from zabbix server/24&gt; scram-sha-256\nhost    all             all             127.0.0.1/32             scram-sha-256\n</code></pre> <p>After we changed the pg_hba file don't forget to restart postgres else the settings will not be applied. But before we restart let us also edit the file postgresql.conf and allow our database to listen on our network interface for incomming connections from the zabbix server. Postgresql will standard only allow connections from the socket.</p> <pre><code># vi /var/lib/pgsql/16/data/postgresql.conf\n</code></pre> <p>To configure PostgreSQL to listen on all network interfaces, you need to modify the <code>postgresql.conf</code> file. Locate the following line:</p> <pre><code>#listen_addresses = 'localhost'\n</code></pre> <p>Replace it with:</p> <pre><code>listen_addresses = '*'\n</code></pre> <p>This will enable PostgreSQL to accept connections from any network interface, not just the local machine. After making this change, restart the PostgreSQL service to apply the new settings:</p> <pre><code># systemctl restart postgresql-16\n</code></pre> <p>If the service fails to restart, review the <code>pg_hba.conf</code> file for any syntax errors, as incorrect entries here may prevent PostgreSQL from starting.</p> <p>Next, to prepare your PostgreSQL instance for Zabbix, you\u2019ll need to create the necessary database tables. Begin by installing the Zabbix repository, as you did for the Zabbix server. Then, install the appropriate Zabbix package that contains the predefined tables, images, icons, and other database elements needed for the Zabbix application.</p>"},{"location":"installation/installing-zabbixdb/#add-the-zabbix-repository-and-populate-the-pgsql-db","title":"Add the Zabbix repository and populate the PgSQL DB","text":"<p>To begin, add the Zabbix repository to your system by running the following commands:</p> <pre><code># dnf install https://repo.zabbix.com/zabbix/6.0/rhel/9/x86_64/zabbix-release-6.0-4.el9.noarch.rpm -y\n# dnf install zabbix-sql-scripts -y\n</code></pre> <p>With the necessary packages installed, you are now ready to create the Zabbix users for both the server and frontend.</p> <p>First, switch to the <code>postgres</code> user and create the Zabbix server database user:</p> <pre><code># su - postgres\n# createuser --pwprompt zabbix-srv\nEnter password for new role: &lt;server-password&gt;\nEnter it again: &lt;server-password&gt;\n</code></pre> <p>Next, create the Zabbix frontend user, which will be used to connect to the database:</p> <pre><code># createuser --pwprompt zabbix-web\nEnter password for new role: &lt;frontend-password&gt;\nEnter it again: &lt;frontend-password&gt;\n</code></pre> <p>After creating the users, you need to prepare the database schema. As the root user, unzip the necessary schema files by running the following command:</p> <pre><code># gzip -d /usr/share/zabbix-sql-scripts/postgresql/server.sql.gz\n</code></pre> <p>This will extract the database schema required for the Zabbix server.</p> <p>Now that the users are created, the next step is to create the Zabbix database. First, switch to the <code>postgres</code> user and execute the following command to create the database with the owner set to <code>zabbix-srv</code>:</p> <pre><code># su - postgres\n# createdb -E Unicode -O zabbix-srv zabbix\n</code></pre> <p>Once the database is created, you should verify the connection and ensure that the correct user session is active. To do this, log into the <code>zabbix</code> database using the <code>zabbix-srv</code> user:</p> <pre><code># psql -d zabbix -U zabbix-srv\n</code></pre> <p>After logging in, run the following SQL query to confirm that both the <code>session_user</code> and <code>current_user</code> are set to <code>zabbix-srv</code>:</p> <pre><code>zabbix=&gt; SELECT session_user, current_user;\n session_user | current_user\n--------------+--------------\n zabbix-srv   | zabbix-srv\n(1 row)\n</code></pre> <p>If the output matches, you are successfully connected to the database with the correct user.</p> <p>We are now ready to create our database zabbix. Become user postgres again and run next command to create the database as our user zabbix-srv:</p> <pre><code># su - postgres\n# createdb -E Unicode -O zabbix-srv  zabbix\n</code></pre> <p>Let's verify that we are really connected to the database with the correct session. Login from the Postgres shell on the zabbix database</p> <pre><code># psql -d zabbix -U zabbix-srv\n</code></pre> <p>Make sure we are logged in with our correct user <code>zabbix-srv</code>.</p> <pre><code>zabbix=&gt; SELECT session_user, current_user;\n session_user | current_user\n--------------+--------------\n zabbix-srv   | zabbix-srv\n(1 row)\n</code></pre> <p>PostgreSQL indeed differs significantly from MySQL or MariaDB in several aspects, and one of the key features that sets it apart is its use of schemas. Unlike MySQL, where databases are more standalone, PostgreSQL's schema system provides a structured, multi-user environment within a single database.</p> <p>Schemas act as logical containers within a database, enabling multiple users or applications to access and manage data independently without conflicts. This feature is especially valuable in environments where several users or applications need to interact with the same database concurrently. Each user or application can have its own schema, preventing accidental interference with each other\u2019s data.</p> Note <p>PostgreSQL comes with a default schema, typically called <code>public</code>, but it's generallya best practice to create custom schemas to better organize and separate database objects, especially in complex or multi-user environments.</p> <p>For more in-depth information, I recommend checking out the detailed guide at this URI, which explains the benefits and use cases for schemas in PostgreSQL.</p> <p>To finalize the database setup for Zabbix, we need to configure schema permissions for both the <code>zabbix-srv</code> and <code>zabbix-web</code> users.</p> <p>First, we create a custom schema named <code>zabbix_server</code> and assign ownership to the <code>zabbix-srv</code> user:</p> <pre><code>zabbix=&gt; CREATE SCHEMA zabbix_server AUTHORIZATION \"zabbix-srv\";\nCREATE SCHEMA\n</code></pre> <p>Next, we set the search path to the <code>zabbix_server</code> schema so that it's the default for the current session:</p> <pre><code>zabbix=&gt; SET search_path TO \"zabbix_server\";\n</code></pre> <p>To confirm the schema setup, you can list the existing schemas:</p> <pre><code>zabbix=&gt; \\dn\n          List of schemas\n     Name      |       Owner\n---------------+-------------------\n public        | pg_database_owner\n zabbix_server | zabbix-srv\n(2 rows)\n</code></pre> <p>At this point, the <code>zabbix-srv</code> user has full access to the schema, but the <code>zabbix-web</code> user still needs appropriate permissions to connect and interact with the database. First, we grant <code>USAGE</code> privileges on the schema to allow <code>zabbix-web</code> to connect:</p> <pre><code>zabbix=# GRANT USAGE ON SCHEMA zabbix_server TO \"zabbix-web\";\nGRANT\n</code></pre> <p>However, <code>zabbix-web</code> still cannot perform any operations on the tables or sequences. To allow basic data interaction without giving too many privileges, grant the following permissions:</p> <ul> <li>For tables: <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code>.</li> <li>For sequences: <code>SELECT</code> and <code>UPDATE</code>.</li> </ul> <pre><code>zabbix=# GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA zabbix_server TO \"zabbix-web\";\nGRANT\n</code></pre> <pre><code>zabbix=# GRANT SELECT, UPDATE ON ALL SEQUENCES IN SCHEMA zabbix_server TO \"zabbix-web\";\nGRANT\n</code></pre> <p>Now, the <code>zabbix-web</code> user has appropriate access to interact with the schema while maintaining security by limiting permissions to essential operations.</p> <p>With the users and permissions set up correctly, you can now populate the database with the Zabbix schema and other required elements. Follow these steps:</p> <ol> <li>Log in as the <code>postgres</code> user if you are not already:</li> </ol> <p><code>bash    # su - postgres</code></p> <ol> <li>Connect to the Zabbix database and run the SQL script to create the necessar y tables and insert initial data. Enter the <code>psql</code> shell for the <code>zabbix</code> database:</li> </ol> <p><code>bash    # psql -d zabbix -U zabbix-srv</code></p> <ol> <li>Execute the SQL file to populate the database. Run the following command in the <code>psql</code> shell:</li> </ol> <p><code>sql    zabbix=# \\i /usr/share/zabbix-sql-scripts/postgresql/server.sql</code></p> <p>Warning: Depending on your hardware or VM performance, this process can    take anywhere from a few seconds to several minutes.    Please be patient and avoid canceling the operation.</p> <ol> <li>Monitor the progress as the script runs. You will see output similar to:</li> </ol> <p><code>plaintext    CREATE TABLE    CREATE INDEX    ...    ...    INSERT 0 1    INSERT 0 1    INSERT 0 1    INSERT 0 1    COMMIT</code></p> <p>Once the script completes and you return to the <code>zabbix=#</code> prompt, the database    should be successfully populated with all the required tables, schemas, images,    and other elements needed for Zabbix.</p> Note <p>If you encounter the following error during the SQL import: <code>vbnet psql:/usr/share/zabbix-sql-scripts/postgresql/server.sql:7: ERROR: no schema has been selected to create in</code> It indicates that the search_path setting might not have been correctly applied. This setting is crucial because it specifies the schema where the tables and other objects should be created. By correctly setting the search path, you ensure that the SQL script will create tables and other objects in the intended schema.</p> <p>To ensure that the Zabbix tables were created successfully and have the correct permissions, you can verify the table list and their ownership using the <code>psql</code> command:</p> <ul> <li>List the Tables: Use the following command to list all tables in the <code>zabbix_server</code> schema:</li> </ul> <p><code>sql    zabbix=# \\dt</code></p> <p>You should see a list of tables with their schema, name, type, and owner. For example:</p> <pre><code>Schema         | Name                       | Type  | Owner\n----------------+----------------------------+-------+------------\nzabbix_server  | acknowledges               | table | zabbix-srv\nzabbix_server  | actions                    | table | zabbix-srv\nzabbix_server  | alerts                     | table | zabbix-srv\nzabbix_server  | auditlog                   | table | zabbix-srv\nzabbix_server  | autoreg_host               | table | zabbix-srv\n...\nzabbix_server  | usrgrp                      | table | zabbix-srv\nzabbix_server  | valuemap                    | table | zabbix-srv\nzabbix_server  | valuemap_mapping            | table | zabbix-srv\nzabbix_server  | widget                      | table | zabbix-srv\nzabbix_server  | widget_field                | table | zabbix-srv\n(173 rows)\n</code></pre> <ul> <li>Verify Permissions: Confirm that the <code>zabbix-srv</code> user owns the tables and has the necessary permissions. You can check permissions for specific tables using the <code>\\dp</code> command:</li> </ul> <p><code>sql    zabbix=# \\dp zabbix_server.*</code></p> <p>This will display the access privileges for all tables in the <code>zabbix_server</code>    schema. Ensure that <code>zabbix-srv</code> has the required privileges.</p> <p>If everything looks correct, your tables are properly created and the <code>zabbix-srv</code> user has the appropriate ownership and permissions. If you need to adjust any permissions, you can do so using the <code>GRANT</code> commands as needed.</p> Note <p>If you prefer not to set the search path manually each time you log in as the <code>zabbix-srv</code> user, you can configure PostgreSQL to automatically use the desired search path. Run the following SQL command to set the default search path for the <code>zabbix-srv</code> role:</p> <p><code>sql zabbix=&gt; ALTER ROLE \"zabbix-srv\" SET search_path = \"$user\", public, zabbix_server;</code></p> <p>This command ensures that every time the <code>zabbix-srv</code> user connects to the database, the <code>search_path</code> is automatically set to include <code>$user</code>, <code>public</code>, and <code>zabbix_server</code>.</p> <p>If you are ready you can exit the database and return as user root.</p> <pre><code>zabbix=&gt;  \\q\n# exit\n</code></pre>"},{"location":"installation/installing-zabbixdb/#configure-the-firewall_2","title":"Configure the firewall","text":"<p>To allow incoming connections to the PostgreSQL database from your Zabbix server, follow these steps to configure the firewall:</p> <ol> <li>Check Current Firewall Configuration: Verify the current settings to ensure the firewall is active and no PostgreSQL-related rules are present:</li> </ol> <p><code>bash    # firewall-cmd --list-all</code></p> <ol> <li>Create a New Zone for PostgreSQL: Define a new firewall zone specifically for PostgreSQL access:</li> </ol> <p><code>bash    # firewall-cmd --new-zone=postgresql-access --permanent    success</code></p> <ol> <li>Reload Firewall Configuration: Apply the changes made to the firewall configuration:</li> </ol> <p><code>bash    # firewall-cmd --reload    success</code></p> <ol> <li>Verify New Zones: Check that the new <code>postgresql-access</code> zone has been created:</li> </ol> <p><code>bash    # firewall-cmd --get-zones    block dmz drop external home internal nm-shared postgresql-access public trusted work</code></p> <ol> <li>Allow Zabbix Server IP: Add the IP address of your Zabbix server to the new <code>postgresql-access</code> zone to permit incoming connections:</li> </ol> <p><code>bash    # firewall-cmd --zone=postgresql-access --add-source=&lt;zabbix-serverip&gt; --permanent    success</code></p> <ol> <li>Open PostgreSQL Port: Open port <code>5432/tcp</code> for the PostgreSQL service within the <code>postgresql-access</code> zone:</li> </ol> <p><code>bash    # firewall-cmd --zone=postgresql-access --add-port=5432/tcp --permanent    success</code></p> <ol> <li>Reload Firewall Configuration Again: Apply the new rules to the firewall:</li> </ol> <p><code>bash    # firewall-cmd --reload</code></p> <ol> <li>Verify the Firewall Rules: Ensure that the new rules are correctly applied by listing the configurations for the <code>postgresql-access</code> zone:</li> </ol> <p><code>bash    # firewall-cmd --zone=postgresql-access --list-all</code></p> <p>You should see output similar to:</p> <p><code>bash    postgresql-access (active)      target: default      icmp-block-inversion: no      interfaces:      sources: 192.168.56.18      services:      ports: 5432/tcp      protocols:      forward: no      masquerade: no      forward-ports:      source-ports:      icmp-blocks:      rich rules:</code></p> <p>With these steps, the firewall will be configured to allow incoming connections to the PostgreSQL database from your Zabbix server on port <code>5432/tcp</code>.</p> <p>This concludes our chapter. You can continue with the next task Installing the Zabbix Server</p>"},{"location":"maintenance/maintaining-zabbix/","title":"Maintaining Zabbix","text":""},{"location":"permissions/managing-permissions/","title":"Managing Permissions","text":""},{"location":"problems/zabbix-triggers/","title":"Triggers","text":""},{"location":"proxies/active-proxy/","title":"Active proxy","text":"<p>Let's first start with the setup of an active Proxy. Things should be very simple just make sure you have a VM that you can use to install a proxy.</p>"},{"location":"proxies/active-proxy/#zabbix-gui-config","title":"Zabbix Gui config","text":"<p>First we will have to add the config in our Zabbix server frontend. From our Administration menu choose the menu <code>Proxies</code>.</p> <p></p> <p>Go to the upper right corner of the screen and press <code>Create proxy</code> You will now get a pop-up like shown here. Fill in the proxy name. I have chosen for ProxyA as it will be our active proxy. You can use for yourself whatever you like. In production I would suggest to use names that make it easy for you to see it's a proxy and where the proxy belongs to. Ex: what vlan or what division ....</p> <p>Choose Proxy mode <code>Active</code> and fill in the IP of your virtualmachine.</p> <p></p> <p>When done press <code>Add</code> at the bottom.</p>"},{"location":"proxies/active-proxy/#zabbix-proxy-config","title":"Zabbix Proxy config","text":"<p>Ok now that this is done lets go to the VM where we like to install our proxy and add the Zabbix repository so we can install our needed packages.</p> <pre><code>rpm -Uvh https://repo.zabbix.com/zabbix/7.0/rhel/9/x86_64/zabbix-release-7.0-1.el9.noarch.rpm\n</code></pre> <p>Zabbix provides the proxy with the option to connecto to a SQLiteDB this can be enough for most setups. In case you need more performance from the DB there is also the option to install the Proxy with a PostgreSQL or MySQL DB. We will cover how to do with the SQLite db as this is the most easy way. We show you later what to look for if installing a proxy With MySQL or PostgreSQL.</p> <pre><code>dnf install zabbix-proxy-sqlite3 zabbix-selinux-policy -y\n</code></pre> <p>Once this is done let's change the proxy configuration by editing the proxy configuration file.</p> <pre><code>vi /etc/zabbix/zabbix_proxy.conf\n</code></pre> <p>Here a few parameters needs to be changed before we can use our proxy</p> <ul> <li>Server=</li> <li>DBName=</li> <li>Hostname=</li> </ul> <p>Change them according to your settings:</p> <ul> <li>Server=&lt; zabbix server ip &gt;</li> <li>Hostname=ProxyA ( or the name you have used in your Zabbix frontend for the Proxy )</li> <li>DBName=/tmp/zabbix_proxy.db</li> </ul> <p>The parameters are explained as follows:</p> <ul> <li>Server: Same as with active agents this parameter is used to connect to the Zabbix server, we can use the IP or DNS name here.</li> <li>DBName: This depends a bit, it is usually the name of the database like we configured on the Zabbix server in case we use PostgreSQL or MySQL. However with SQLite we need to specify dbname and location.           Username and Password will be ignored when using SQLite. Just make sure SELinux is properly configured else the DB will not be created. It can help to put SELinux in permissive first.</li> <li>Hostname: This parameter is used by the proxy to identify itself to the Zabbix server. This needs to be the same name we have registered in the Zabbix frontend.</li> </ul> Tip <p>Another parameter that can be useful is ListenPort this is usually 10051 for Active and Passive proxies. But if you run for some reason the proxy on the zabbix server then you have to change this port to something else.</p> Note <p>With Zabbix 7 a new parameter has been introduced on the proxy side <code>ProxyBufferMode</code>. This is standard set to <code>Hybrid</code> and is what is recommended. With Hybrid the proxy will buffer will work in memory and fallback to the database if needed. The documentation states that the proxy buffer normally works like in memory mode until it runs out of memory or the oldest record exceeds the configured age. If that happens the buffer is flushed to database and it works like in disk mode until all data have been uploaded and it starts working with memory again. On shutdown the memory buffer is flushed to database.</p> Note <p>Don't worry about the file for the db not existing Zabbix will create it by itself.</p> Warning <p>If you use DNS names make sure there is DNS caching configured on the machine. If not Zabbix will do a lookup on the DNS server everytime it wants to make a connection.</p> <p>So now that we have configured everything let's start our proxy. First disable SELinux as it will block a few things this can be done by running <code>setenforce 0</code>. This is only temporary and either you keep it disabled permanent or you fix the config. An easy way is to use <code>sealert -a /var/log/audit/audit.log</code>. Once this is done there is only 1 thing that rests us to do and that is start and enable the zabbix-proxy service.</p> <pre><code>systemctl enable zabbix-proxy --now\n</code></pre> <p>If you look now in the frontend of the Zabbix server you will see that the proxy we have configured is Online</p> <p></p> Note <p>If you like to install the proxy with MySQL or PostgreSQL as database then it is important to also install the package <code>zabbix-sql-scripts</code>. There is a special shema to be used for the proxy database that can be found under <code>/usr/share/zabbix-sql-scripts/mysql|postgresql&gt;/proxy.sql</code>. Also in this case don't forget to edit the zabbix_proxy.conf file and add DBHost, DBUser, DBPassword and DBSchema as needed.</p>"},{"location":"proxies/installing-proxies/","title":"Installing Proxies","text":"<p>There are some cases where monitoring with the Zabbix server and agents \u2026. is not enough.  Imagine monitoring external clients, different VLANs or just monitoring a DMZ where you don\u2019t want to open for every agent a port in the firewall for the agent, SNMP, IPMI, \u2026  Here Zabbix proxies come to the rescue. A Zabbix proxy is a small remote Zabbix server that supports the collection of data. With Zabbix 7 it\u2019s now even possible to run Zabbix proxies in HA. Proxies will also become important in larger environments to simplify the management and most importantly to offload the Zabbix server. Our proxies can do pre-processing and it will also limit the number of connections from devices to the Zabbix server.</p> <p>So in short a Zabbix proxy can be used to : - Monitor remote locations - Monitor locations that have unreliable connections - Offload the Zabbix server when monitoring thousands of devices - Simplify the maintenance and management</p>"},{"location":"proxies/installing-proxies/#proxy-requirements","title":"Proxy requirements","text":"<p>If you like to setup a few proxies for test or in your environment you will need a few Linux hosts to install the Proxies on.  Proxies are also available in containers so a full VM is not needed. However here we will use a VM so we can show you how to install a proxy. When it comes to proxies they are very lightweight however since Zabbix 4.2 Proxies are able to do Item value preprocessing and this can use a lot of CPU power. So the number of CPUs and memory will depends on how many machines you will monitor and how many preprocessing rules you have on your hosts.</p> Note <p>Imagine that you need to restart your Zabbix server and that all proxies start to push the data they have gathered during the downtime of the Zabbix server. This would create ahuge amount of data being sent at once to the Zabbix server and bring it to its knees in no time. Since Zabbix 6 Zabbix has added protection for overload. When Zabbix server history cache is full the history cache write access is being throttled. Zabbix server will stop accepting data from proxies when history cache usage reaches 80%. Instead those proxies will be put on a throttling list. This will continue until the cache usage falls down to 60%. Now server will start accepting data from proxies one by one, defined by the throttling list. This means the first proxy that attempted to upload data during the throttling period will be served first and until it's done the server will not accept data from other proxies.</p> History write cache usage Zabbix server mode Zabbix server action Reaches 80% Wait Stops accepting proxy data, but maintains a throttling list (prioritized list of proxies to be contacted later). Drops to 60% Throttled Starts processing throttling list, but still not accepting proxy data. Drops to 20% Normal Drops the throttling list and starts accepting proxy data normally."},{"location":"proxies/installing-proxies/#configuration","title":"Configuration","text":"<p>Zabbix actually has 2 proxy modes it supports. A Zabbix proxy can be Active or Passive just like the Zabbix agent with this exception that the agent can be both on the same time. So our first problem will be choose the Zabbix proxy that fits us. When we talk about active / passive we always talk about the proxy being active or passive. Active means the Proxy will initiate the connection to the Zabbix server, passive means it will be the Zabbix server taking contact with the proxy to gather the data.</p>"},{"location":"proxies/installing-proxies/#active-vs-passive-proxy","title":"Active vs Passive proxy","text":"<p>Zabbix proxies have been available since Zabbix 1.6, at that time they where available only as what we know today as <code>Active proxies</code>. Active means that the proxy would initiate the connection by itself to the Zabbix Server. Since version 1.8.3 passive proxies where introduced. This allowed the server to connect to the proxy. As mentioned before Zabbix agents can be both active and passive however proxies cannot be both so whe have to choose the way of the communication when we install a proxy. Just remember that choosing the proxy mode <code>active</code> or <code>passive</code> has no impact on how Zabbix agents can communicate with our proxy. It's perfectly fine to have an <code>active proxy</code> and a <code>passive agent</code> working together.</p>"},{"location":"proxies/installing-proxies/#active-proxy","title":"Active proxy","text":"<p>Let's first start with the setup of an active Proxy. Things should be very simple just make sure you have a VM that you can use to install a proxy.</p>"},{"location":"proxies/installing-proxies/#zabbix-gui-config","title":"Zabbix Gui config","text":"<p>First we will have to add the config in our Zabbix server frontend. From our Administration menu choose the menu <code>Proxies</code>.</p> <p></p> <p>Go to the upper right corner of the screen and press <code>Create proxy</code> You will now get a pop-up like shown here. Fill in the proxy name. I have chosen for <code>ProxyA</code> as it will be our active proxy. In case you like to configure the Passive proxy use the name <code>ProxyP</code>.</p> <p>You can use for yourself whatever you like. In production I would suggest to use names that make it easy for you to see it's a proxy and where the proxy belongs to. Ex: what vlan or what division ....</p> <p>Choose Proxy mode <code>Active</code> and fill in the IP of your virtualmachine if you like to install an active proxy. or Choose Proxy mode <code>Passive</code> and fill in the IP of your virtualmachine if you like to install a passive proxy.</p> <p></p> <p>When done press <code>Add</code> at the bottom.</p>"},{"location":"proxies/loadbalancing-proxies/","title":"Proxy loadbalancing","text":"<p>With the introduction of Zabbix 7.0 proxy loadbalancing has been introduced. After running the server in a native HA setup this was probably the next logical step to add. So like the name implies it's not just a simple HA solution but Zabbix proxies will loadbalance the hosts connected to them in an automated way.</p> <p>Zabbix has added something new to manage how we group those proxies together with the obvious name <code>Proxy groups</code> and it works for active and for passive proxies.</p> <p>Zabbix is able to detect 3 states in our group with proxies</p> <ul> <li>Online: This implies that everything is working as expected so there was communication with all the proxies.</li> <li>Offline: The minimum number of proxies defined in our proxy config group has not been met.</li> <li>Recovering: Some proxies are offline but we still have enough proxies online to not drop below the setting <code>minimum proxies</code>.</li> </ul>"},{"location":"proxies/loadbalancing-proxies/#configuration","title":"Configuration","text":"<p>The first thing we have to do is of course set up a couple of proxies. Here I will make use of 3 active proxies but feel free to use passives if you prefer or to do a mix. If you don't know how to install a proxy take a look at the installation guides for Active proxies or Passive proxies.</p> <p>I have set up 3 proxies for this example:</p> <ul> <li>ProxyA1</li> <li>ProxyA2</li> <li>ProxyA3</li> </ul> <p>each of them has a unique IP and hostname.</p> <p>So once you have set up 3 proxies and have added them into the frontend like we did for active and passive proxies you should have a similar looking config in your Administration frontend under Proxies.</p> <p></p> <p>Before we start to create a loadbalancing group there are a few steps we need to fix first. We need to monitor our proxies and we also need to install some Zabbix agents on the proxies. To install the agents we have to follow a few simple steps.</p> <p>On every proxy run the following commands:</p> <p><code>dnf install zabbix-agent</code></p> <p>We already installed the zabbix repository when we installed the proxy so no need to add it again. Now we have to adjust a few configuration options.</p> <ul> <li>Server: A list of IP adressess or DNS names pointing to our zabbix servers. This is for the Passive agent only</li> <li>ServerActive: A list of IP adressess or DNS names pointing to our zabbix servers. This is for the Active agent only.</li> <li>Hostname: The hostname of our proxy server</li> </ul> <p>So set the unique hostname and point every proxy for Server and or ServerActive to the IP of your Zabbix proxy and not the Zabbix server. Our Proxy is in this case acting as our Zabbix server.</p> <p>Do this for all the agents that are installed on the proxies and when done start the agents and enable them to start automatic.</p> <pre><code>systemctl enable zabbix-agent --now\n</code></pre> <p>Our next step will be to create our proxies in the Zabbix frontend to monitor them. For this we go to <code>Data collection -&gt; Hosts</code> and click on <code>Create host</code>.</p> <p>Next we have to fill in a few fields:</p> <ul> <li>Host name: Name of the agent on the proxy. I used the same name for my agent as on the proxy this makes it easy to see when a proxy is down. Ex ProxyA1, ProxyA2, ProxyA3</li> <li>Templates: We will want to monitor the OS and the proxy so we have to apply 2 templates : Linux by Zabbix agent and Zabbix proxy health</li> <li>Host groups: Here we choose a group to put our proxies is you can choose what you want this is just a logical grouping used for permissions.</li> <li>Interface: Every hosts needs to have an interface where we define the IP of the host and the port.</li> </ul> <p></p> <p>Make sure your proxies are properly monitored before you continue to the next step.</p>"},{"location":"proxies/loadbalancing-proxies/#configure-proxy-groups","title":"Configure proxy groups","text":"<p>As one of the final steps we have to Create a <code>proxy group</code> to gather all proxies we want to use for our loadbalancing. In our Zabbix menu go to <code>Administration -&gt; Proxy groups</code> Click in the upper right corner on <code>Create proxy group</code>.</p> <p>Here we have to define a few options:</p> <ul> <li>Name : The name of our proxy group. This can be anything you like I have chosen for the group <code>Active proxies</code> because I have setup 3 proxies for this test.</li> <li>Failover period: Period in seconds before failover is executed (1m by default; allowed range 10s-15m).</li> <li>Minimum number of proxies: The minimum number of online proxies required for the group to be online (1 by default; allowed range 1-1000). Since we have 3 proxies I added 2 as minimum.</li> </ul> <p></p> <p>Next we have to configure our 3 existing proxies to join this proxy group. Go in the Zabbix menu to <code>Administration -&gt; Proxies</code> click on every proxy in the list you would like to add to the group and enter following details.</p> <p></p> <ul> <li>Proxy group: <code>Active proxies</code> (or whatever name you gave to your proxy group.)</li> <li>Proxy address: The active proxy ip, If specified then active proxy requests are only accepted from this list of comma-delimited IP addresses, optionally in CIDR notation, or DNS names of active Zabbix proxy.</li> <li>Address for active agents: The address and port where active agents will connect to. Usually same IP as the IP from the proxy but not needed to be the same.</li> <li>Proxy Mode: Configure if it proxy is Active or Passive </li> </ul> <p></p> <p>The next step is now to reconfigure our Agents on our proxies so that they are monitored by The proxy group <code>Active Proxies</code> instead of only the proxy they run on. Go to <code>Data collection -&gt; Hosts</code> and click on every host that you have configured to monitor the proxy agent. Switch Monitored by <code>Proxy</code> to <code>Proxy group</code>.</p> <p></p> <p>Because our proxies will accept active connections make sure to open firewall port 10051 on all the proxies and because we have Agents that we monitor passive make sure port 10050 is also open</p> <pre><code>firewall-cmd --add-port=10051/tcp --permanent\nfirewall-cmd --add-port=10050/tcp --permanent\nfirewall-cmd --reload\n</code></pre> <p>Now there is another step that we need to fix. On our Zabbix Agents we need to add all the proxy addresses to our Zabbix agents configuration.</p> <p>open the file <code>/etc/zabbix/zabbix_agentd.conf</code> and add a comma delimited list of IPs for <code>Server</code> and <code>ServerActive</code> pointing to all your proxies This way the agent can sent active data to the proxies or it can be polled by all 3 proxies</p> Note <p>Don't forget to restart your agents and proxies when making changes in the configuration files.</p>"},{"location":"proxies/loadbalancing-proxies/#loadbalancing-and-ha","title":"Loadbalancing and HA","text":"<p>Ok now that we have configured our proxies and agents properly and made a proxy group everything is up and running. When you go to <code>Data Collection -&gt; Hosts</code> you will see that your proxie agents  are monitored by the group <code>Active proxies</code>. It is possible that your ProxyA1 is monitored by ProxyA2 or A3 so don't panic if your dashboard is not the same. Zabbix proxies will besides HA also do loadbalancing.</p> <p></p> <p>It's time to test this so let us stop one of our proxies for example ProxyA2</p> <pre><code>systemctl stop zabbix-proxy\n</code></pre> <p>Since we configured our Proxy group failover period to be 1m it can take 1m before you will see changes</p> <p></p> <p>When you look at the log files of the agent you will see that he is not able to connect the proxy anymore and that he will be redirected to another proxy in the group</p> <pre><code>  1391:20240528:115433.344 Unable to connect to [xxx.xxx.xxx.xxx]:10051 [cannot connect to [[xxx.xxx.xxx.xxx]:10051]: connection error (POLLERR,POLLHUP)]\n  1391:20240528:115433.344 Unable to send heartbeat message to [xxx.xxx.xxx.xxx]:10051 [cannot connect to [[xxx.xxx.xxx.xxx]:10051]: connection error (POLLERR,POLLHUP)]\n  1392:20240528:115433.344 Unable to connect to [xxx.xxx.xxx.xxx]:10051 [cannot connect to [[xxx.xxx.xxx.xxx]:10051]: connection error (POLLERR,POLLHUP)]\n  1392:20240528:115433.353 Unable to connect to [xxx.xxx.xxx.xxx]:10051 [cannot connect to [[xxx.xxx.xxx.xxx]:10051]: connection error (POLLERR,POLLHUP)]\n  1392:20240528:115433.355 Unable to send heartbeat message to [xxx.xxx.xxx.xxx]:10051 [sequential redirect responses detected]\n  1390:20240528:115433.407 Unable to connect to [xxx.xxx.xxx.xxx]:10051 [cannot connect to [[xxx.xxx.xxx.xxx]:10051]: connection error (POLLERR,POLLHUP)]\n  1390:20240528:115433.408 Unable to connect to [xxx.xxx.xxx.xxx]:10051 [cannot connect to [[xxx.xxx.xxx.xxx]:10051]: connection error (POLLERR,POLLHUP)]\n  1390:20240528:115433.408 Unable to send heartbeat message to [xxx.xxx.xxx.xxx]:10051 [sequential redirect responses detected]\n  1392:20240528:115533.508 Successfully sent heartbeat message to [xxx.xxx.xxx.xxx]:10051\n  1390:20240528:115533.562 Successfully sent heartbeat message to [xxx.xxx.xxx.xxx]:10051\n  1392:20240528:115558.583 Active check configuration update from [xxx.xxx.xxx.xxx:10051] is working again\n  1391:20240528:115558.598 Active check configuration update from [xxx.xxx.xxx.xxx:10051] is working again\n</code></pre> Warning <p>There are a few limitations when using proxies in HA/Loadbalancing. - SNMP traps are not supported by proxies in proxy group. - Checks depending on external configuration must have the same configuration on all proxies in proxy group. That includes:   - external checks - scripts;   - database checks - odbc configuration.   - When monitored in proxy group the VMware hosts will be randomly spread between proxies in the group and will cause each proxy to cache all VMware data causing additional load to vCenter.</p>"},{"location":"proxies/passive-proxy/","title":"Passive proxy","text":"<p>Lets try to setup our <code>passive proxy</code>. Things should be very simple just make sure you have a VM that you can use to install a proxy.</p>"},{"location":"proxies/passive-proxy/#zabbix-gui-config","title":"Zabbix Gui config","text":"<p>First we will have to add the config in our Zabbix server frontend. From our Administration menu choose the menu <code>Proxies</code>.</p> <p></p> <p>Go to the upper right corner of the screen and press <code>Create proxy</code> You will now get a pop-up like shown here. Fill in the proxy name. I have chosen for ProxyP as it will be our passive proxy. You can use for yourself whatever you like. In production I would suggest to use names that make it easy for you to see it's a proxy and where the proxy belongs to. Ex: what vlan or what division ....</p> <p>Choose Proxy mode <code>Passive</code> and fill in the IP of your virtualmachine. Here besides IP we also have the option to specify a port. This is standard 10051, Zabbix proxy will listen on the same port as our Zabbix server does.</p> <p></p> <p>When done press <code>Add</code> at the bottom.</p>"},{"location":"proxies/passive-proxy/#zabbix-proxy-config","title":"Zabbix Proxy config","text":"<p>Ok now that this is done lets go to the VM where we like to install our proxy and add the Zabbix repository so we can install our needed packages.</p> <pre><code>rpm -Uvh https://repo.zabbix.com/zabbix/7.0/rhel/9/x86_64/zabbix-release-7.0-1.el9.noarch.rpm\n</code></pre> <p>Zabbix provides the proxy with the option to connecto to a SQLiteDB this can be enough for most setups. In case you need more performance from the DB there is also the option to install the Proxy with a PostgreSQL or MySQL DB. We will cover how to do with the SQLite db as this is the most easy way. We show you later what to look for if installing a proxy With MySQL or PostgreSQL.</p> <pre><code>dnf install zabbix-proxy-sqlite3 zabbix-selinux-policy -y\n</code></pre> <p>Once this is done let's change the proxy configuration by editing the proxy configuration file.</p> <pre><code>vi /etc/zabbix/zabbix_proxy.conf\n</code></pre> <p>Here a few parameters needs to be changed before we can use our proxy</p> <ul> <li>ProxyMode=</li> <li>Server=</li> <li>DBName=</li> <li>Hostname=</li> </ul> <p>Change them according to your settings:</p> <ul> <li>ProxyMode=1</li> <li>Server=&lt; zabbix server ip &gt;</li> <li>Hostname=ProxyA ( or the name you have used in your Zabbix frontend for the Proxy )</li> <li>DBName=/tmp/zabbix_proxy.db</li> </ul> <p>The parameters are explained as follows:</p> <ul> <li>ProxyMode: This is standard 0 for Active proxy we have to change this to 1 this will turn our proxy into a Passive proxy. Be careful there is a <code>#</code> in front of the parameter this needs to be removed. If not Zabbix will not read this value in stay in Active mode.</li> <li>Server: Same as with passive agents. We have to specify the IP or DNS name or a list of IPs from zabbix servers that are allowed to connect to this proxy.</li> <li>DBName: This depends a bit, it is usually the name of the database like we configured on the Zabbix server in case we use PostgreSQL or MySQL. However with SQLite we need to specify dbname and location.           Username and Password will be ignored when using SQLite. Just make sure SELinux is properly configured else the DB will not be created. It can help to put SELinux in permissive first.</li> <li>Hostname: This parameter is used by the proxy to identify itself to the Zabbix server. This needs to be the same name we have registered in the Zabbix frontend.</li> </ul> Tip <p>Another parameter that can be useful is ListenPort this is usually 10051 for Active and Passive proxies. But if you run for some reason the proxy on the zabbix server then you have to change this port to something else.</p> Note <p>With Zabbix 7 a new parameter has been introduced on the proxy side <code>ProxyBufferMode</code>. This is standard set to <code>Hybrid</code> and is what is recommended. With Hybrid the proxy will buffer will work in memory and fallback to the database if needed. The documentation states that the proxy buffer normally works like in memory mode until it runs out of memory or the oldest record exceeds the configured age. If that happens the buffer is flushed to database and it works like in disk mode until all data have been uploaded and it starts working with memory again. On shutdown the memory buffer is flushed to database.</p> Note <p>Don't worry about the file for the db not existing Zabbix will create it by itself.</p> Warning <p>If you use DNS names make sure there is DNS caching configured on the machine. If not Zabbix will do a lookup on the DNS server everytime it wants to make a connection.</p> <p>So now that we have configured everything let's start our proxy. First disable SELinux as it will block a few things this can be done by running <code>setenforce 0</code>. This is only temporary and either you keep it disabled permanent or you fix the config. An easy way is to use <code>sealert -a /var/log/audit/audit.log</code>. Once this is done there is only 1 thing that rests us to do and that is start and enable the zabbix-proxy service.</p> <pre><code>systemctl enable zabbix-proxy --now\n</code></pre> <p>If you look now in the frontend of the Zabbix server you will see that the proxy we have configured is Offline.</p> <p></p> <p>This is because we have configured a Passive agent remember we had to specify the IP and the Port in our Zabbix frontend? So we need to open port 10051/tcp for our zabbix server.</p> <pre><code>firewall-cmd --new-zone=proxy-access --permanent\nfirewall-cmd --zone=proxy-access --add-source=&lt;zabbix server ip&gt; --permanent\nfirewall-cmd --zone=proxy-access --add-port=10051/tcp --permanent\nfirewall-cmd --reload\n</code></pre> <p>We can now check our access rules in the firewall:</p> <pre><code># firewall-cmd --zone=proxy-access --list-all\nproxy-access (active)\n  target: default\n  icmp-block-inversion: no\n  interfaces:\n  sources: xxx.xxx.xxx.xxx\n  services:\n  ports: 10051/tcp\n  protocols:\n  forward: no\n  masquerade: no\n  forward-ports:\n  source-ports:\n  icmp-blocks:\n  rich rules:\n</code></pre> <p>When we now look at our frontend our proxy should be online </p> <p></p> Note <p>If you like to install the proxy with MySQL or PostgreSQL as database then it is important to also install the package <code>zabbix-sql-scripts</code>. There is a special shema to be used for the proxy database that can be found under <code>/usr/share/zabbix-sql-scripts/mysql|postgresql&gt;/proxy.sql</code>. Also in this case don't forget to edit the zabbix_proxy.conf file and add DBHost, DBUser, DBPassword and DBSchema as needed.</p>"},{"location":"security/securing-zabbix-selinux/","title":"Securing Zabbix with SELinux","text":""},{"location":"security/securing-zabbix/","title":"Securing Zabbix Frontend","text":"<p>The frontend is what we use to login into our system. The Zabbix frontend will connect to our Zabbix server and our database. But we also send information from our laptop to the frontend. It's important that when we enter our credentials that we can do this in a safe way. So it makes sense to make use of certificates and one way to do this is by making use of Self-Signed certificates.</p> <p>To give you a better understanding of why your browser will warn you when using self signed certificates, we have to know that when we request an SSL certificate from an official Certificate Authority (CA) that you submit a Certificate Signing Reauest (CSR) to them. They in return provide you with a Signed SSL certificate. For this they make use of their root certificate and private key. Our browser comes with a copy of the root certificate (CA) from various authorities or it can access it from the OS. This is why our self signed certificates are not trusted by our browser, we don't have any CA validation. Our only workaround is to create our own root certificate and private key.</p>"},{"location":"security/securing-zabbix/#understanding-the-concepts","title":"Understanding the concepts","text":""},{"location":"security/securing-zabbix/#how-to-create-an-ssl-certificate","title":"How to create an SSL certificate","text":""},{"location":"security/securing-zabbix/#how-ssl-works-client-server-flow","title":"How SSL works - Client - Server flow","text":"Note <p>Borrowed the designs from https://www.youtube.com/watch?v=WqgzYuHtnIM this video explains well how SSL works.</p>"},{"location":"security/securing-zabbix/#securing-the-frontend-with-self-signed-ssl-on-nginx","title":"Securing the Frontend with Self signed SSL on Nginx","text":"<p>To configure this there are a few steps that we need to follow:</p> <pre><code>- Generate a private key for the CA ( Certificate Authority )\n- Generate a root certficate\n- Generating CA-Authenticated Certificates\n- Generate a Certificate Signing Request (CSR)\n- Generate an X509 V3 certificate extension configuration file\n- Generate the certificate using our CSR, the CA private key, the CA certificate, and the config file\n- Copy the SSL certificates to our Virtual Host\n- Adapt your Nginx Zabbix config\n</code></pre>"},{"location":"security/securing-zabbix/#generate-a-private-key-for-the-ca","title":"Generate a private key for the CA","text":"<p>First step is to make a folder named SSL so we can create our certificates and safe them:</p> <pre><code>&gt;- mkdir ~/ssl\n&gt;- cd ~/ssl\n&gt;- openssl ecparam -out myCA.key -name prime256v1 -genkey\n</code></pre> <p>Let's explain all the options;</p> <ul> <li>openssl : The tool to use the OpenSSL library, this library provides us with cryptographic functions and utilities.</li> <li>out myCA.key : This part of the command specifies the output file name for the generated private key. </li> <li>name prime256v1: Name of the elliptic curve; X9.62/SECG curve over a 256 bit prime field</li> <li>ecparam: This command is used to manipulate or generate EC parameter files.</li> <li>genkey: This option will generate a EC private key using the specified parameters.</li> </ul>"},{"location":"security/securing-zabbix/#generate-a-root-certificate","title":"Generate a Root Certificate","text":"<pre><code>openssl req -x509 -new -nodes -key myCA.key -sha256 -days 1825 -out myCA.pem\n</code></pre> <p>Let's explain all the options;</p> <ul> <li>openssl: The command-line tool for OpenSSL.</li> <li>req: This command is used for X.509 certificate signing request (CSR) management.</li> <li>x509: This option specifies that a self-signed certificate should be created.</li> <li>new: This option is used to generate a new certificate.</li> <li>nodes: This option indicates that the private key should not be encrypted. It will generates a private key without a passphrase, making it more convenient but potentially less secure.</li> <li>key myCA.key: This specifies the private key file (myCA.key) to be used in generating the certificate.</li> <li>sha256: This option specifies the hash algorithm to be used for the certificate. In this case, SHA-256 is chosen for stronger security.</li> <li>days 1825: This sets the validity period of the certificate in days. Here, it\u2019s set to 1825 days (5 years).</li> <li>out myCA.pem: This specifies the output file name for the generated certificate. In this case, \u201cmyCA.pem.\u201d</li> </ul> <p>The information you enter is not so important but it's best to fill it in as good as possible. Just make sure you enter for CN you IP or DNS.</p> <pre><code>You are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [XX]:BE\nState or Province Name (full name) []:vlaams-brabant\nLocality Name (eg, city) [Default City]:leuven\nOrganization Name (eg, company) [Default Company Ltd]:\nOrganizational Unit Name (eg, section) []:\nCommon Name (eg, your name or your server's hostname) []:192.168.0.134\nEmail Address []:\n</code></pre>"},{"location":"security/securing-zabbix/#generating-ca-authenticated-certificates","title":"Generating CA-Authenticated Certificates","text":"<p>It's probably good practice to use de dns name of your webiste in the name fo the private key. As we use in this case no DNS but an IP address I will use the fictive dns zabbix.mycompany.internal.</p> <pre><code>openssl genrsa -out zabbix.mycompany.internal.key 2048\n</code></pre>"},{"location":"security/securing-zabbix/#generate-a-certificate-signing-request-csr","title":"Generate a Certificate Signing Request (CSR)","text":"<pre><code>openssl req -new -key zabbix.mycompany.internal.key -out zabbix.mycompany.internal.csr\n</code></pre> <p>You will be asked the same set of questions as above. Once again your answers hold minimal significance and in our case no one will inspect the certificate so they matter even less.</p> <pre><code>You are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [XX]:BE\nState or Province Name (full name) []:vlaams-brabant\nLocality Name (eg, city) [Default City]:leuven\nOrganization Name (eg, company) [Default Company Ltd]:\nOrganizational Unit Name (eg, section) []:\nCommon Name (eg, your name or your server's hostname) []:192.168.0.134\nEmail Address []:\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []:\nAn optional company name []:\n</code></pre>"},{"location":"security/securing-zabbix/#generate-an-x509-v3-certificate-extension-configuration-file","title":"Generate an X509 V3 certificate extension configuration file.","text":"<pre><code># vi zabbix.mycompany.internal.ext\n</code></pre> <p>Add the following lines in your certificate extension file. Replace IP or DNS with your own values.</p> <pre><code>authorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName = @alt_names\n\n[alt_names]\nIP.1 = 192.168.0.133\n#DNS.1 = MYDNS (You can use DNS if you have a dns name if you use IP then use the above line)\n</code></pre>"},{"location":"security/securing-zabbix/#generate-the-certificate-using-our-csr-the-ca-private-key-the-ca-certificate-and-the-config-file","title":"Generate the certificate using our CSR, the CA private key, the CA certificate, and the config file","text":"<pre><code>openssl x509 -req -in zabbix.mycompany.internal.csr -CA myCA.pem -CAkey myCA.key \\\n-CAcreateserial -out zabbix.mycompany.internal.crt -days 825 -sha256 -extfile zabbix.mycompany.internal.ext\n</code></pre>"},{"location":"security/securing-zabbix/#copy-the-ssl-certificates-to-our-virtual-host","title":"Copy the SSL certificates to our Virtual Host","text":"<pre><code>cp zabbix.mycompany.internal.crt /etc/pki/tls/certs/. \ncp zabbix.mycompany.internal.key /etc/pki/tls/private/.\n</code></pre>"},{"location":"security/securing-zabbix/#import-the-ca-in-linux-rhel","title":"Import the CA in Linux (RHEL)","text":"<p>We need to update the CA certificate\u2019s, run the below command to update the CA certs.</p> <pre><code>cp myCA.pem /etc/pki/ca-trust/source/anchors/myCA.crt\nupdate-ca-trust extract\n</code></pre>"},{"location":"security/securing-zabbix/#import-the-ca-in-osx","title":"Import the CA in OSX","text":"<ul> <li>Open the macOS Keychain app.</li> <li>Navigate to File &gt; Import Items</li> <li>Choose your private key file (i.e., myCA.pem)</li> <li>Search for the \u201cCommon Name\u201d you provided earlier.</li> <li>Double-click on your root certificate in the list.</li> <li>Expand the Trust section.</li> <li>Modify the \u201cWhen using this certificate:\u201d dropdown to \u201cAlways Trust\u201d.</li> <li>Close the certificate window.</li> </ul>"},{"location":"security/securing-zabbix/#import-the-ca-in-windows","title":"Import the CA in Windows","text":"<ul> <li>Open the \u201cMicrosoft Management Console\u201d by pressing Windows + R, typing mmc, and clicking Open.</li> <li>Navigate to File &gt; Add/Remove Snap-in.</li> <li>Select Certificates and click Add.</li> <li>Choose Computer Account and proceed by clicking Next.</li> <li>Select Local Computer and click Finish.</li> <li>Click OK to return to the MMC window.</li> <li>Expand the view by double-clicking Certificates (local computer).</li> <li>Right-click on Certificates under \u201cObject Type\u201d in the middle column, select All Tasks, and then Import.</li> <li>Click Next, followed by Browse. Change the certificate extension dropdown next to the filename field to All Files (.) and locate the myCA.pem file.</li> <li>Click Open, then Next.</li> <li>Choose \u201cPlace all certificates in the following store.\u201d with \u201cTrusted Root Certification Authorities store\u201d as the default. Proceed by clicking Next, then Finish, to finalize the wizard.</li> <li>If all went well you should find your certficate under Trusted Root Certification Authorities &gt; Certificates</li> </ul> Warning <p>You also need to import the myCA.crt file in your OS we are not an official CA so we have to import it in our OS and tell it to trust this Certificate. This action depends on the OS you use.</p> <p>As you are using OpenSSL, you should also create a strong Diffie-Hellman group, which is used in negotiating Perfect Forward Secrecy with clients. You can do this by typing:</p> <pre><code>openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n</code></pre>"},{"location":"security/securing-zabbix/#adapt-your-nginx-zabbix-config","title":"Adapt your Nginx Zabbix config","text":"<p>Add the following lines to your Nginx configuration, modifying the file paths as needed. Replace the the already existing lines with port 80 with this configuration. This will enable SSL and HTTP2.</p> <pre><code># vi /etc/nginx/conf.d/zabbix.conf\n</code></pre> <pre><code>server {\n        listen          443 http2 ssl;\n        listen          [::]:443 http2 ssl;\n        server_name     &lt;ip qddress&gt;;\n        ssl_certificate /etc/ssl/certs/zabbix.mycompany.internal.crt;\n        ssl_certificate_key /etc/pki/tls/private/zabbix.mycompany.internal.key;\n        ssl_dhparam /etc/ssl/certs/dhparam.pem;\n</code></pre> <p>To redirect traffic from port 80 to 443 we can add the following lines above our https block:</p> <pre><code>server {\n       listen         80;\n       server_name    _; #dns or ip is also possible\n       return         301 https://$host$request_uri;\n}\n</code></pre>"},{"location":"security/securing-zabbix/#restart-all-services-and-allow-https-traffic","title":"Restart all services and allow https traffic","text":"<pre><code>systemctl restart php-fpm.service\nsystemctl restart nginx\n\nfirewall-cmd --add-service=https --permanent\nfirewall-cmd --reload\n</code></pre> <p>When we go to our url <code>http://&lt;IP or DNS&gt;/</code> we get redirected to our <code>https://</code> page and when we check we can see that our site is secure:</p> <p></p> Note <ul> <li>To be even more secure have a loot at https://cipherlist.eu/ this page maintains a list of strong ciphers that you can use so secure your Nginx even more.</li> <li>You can test your nginx config with 'nginx -t' before you restart.</li> <li>For HTTP/2 to work you need atleast nginx 1.9.5 or later</li> </ul>"},{"location":"security/securing-zabbix/#securing-the-frontend-with-lets-encrypt-on-nginx","title":"Securing the Frontend with Let's Encrypt  on Nginx","text":""},{"location":"visualising/Visualising-our-problems/","title":"Visualising our problems","text":""},{"location":"vmware/vmware-monitoring/","title":"VMware monitoring with Zabbix","text":"<p>Zabbix can automatically discover Virtual Machines and VMware hypervisors based on Low-level discovery rules. Zabbix provides a set of templates to do this out of the box to make life more easy. In this chapter, we will see how we can configure this.</p> <p>Zabbix requires VMware vCenter or vSphere to be at least 5.1 or higher but always check the official documentation to be sure this hasn't changed.</p>"},{"location":"vmware/vmware-monitoring/#what-do-we-need","title":"What do we need ?","text":"<ul> <li>VMware vCenter or vSphere to be at least 5.1</li> <li>A monitoring account with RO access to the API</li> <li>Enable performance counter statistics and requests on the VMware side as well.</li> </ul> <p>Before we start it's important to know that Zabbix does not start any processes to start monitoring VMware out of the box if we do not configure this. So the first thing we have to do is edit out <code>zabbix_server.conf</code> file. This file can be found here : <code>/etc/zabbix/zabbix_server.conf</code>.</p> <p>Look for the parameter StartVMwareCollectors, edit this line, or add a new line where you add <code>StartVMwareCollectors=2</code> and restart the server service. Why do we add 2? Is it always 2? Of course not else it would be hardcoded. But Zabbix recommends not going below 2 and it should also not exceed twice the amount of monitored VMware services.</p> <p>So we can use the next formula to calculate the optimal value?</p> <p><code>Amount of services &lt; StartVMwareCollectors &lt; (Amount of services * 2)</code></p> <p>So for the setups with 1 VMware service we will set it to 2 and with instances where we have 3 we will set it to 5 </p> Note <p>A VMware instance can be a vSphere or vCenter instance and not a virtual machine or hypervisor. So the number of collectors depends on the data points we use to collect values from.</p>"},{"location":"vmware/vmware-monitoring/#configuration","title":"Configuration","text":"<p>The first step is to create a new host. If you are unsure how to take a look at the topic Zabbix hosts. Only adding a <code>Host name</code> should be ok we don't need to configure any interfaces. Once this is done before you press <code>Add</code> go to the tab <code>Macros</code>.</p> <p></p> <p>Add the following macros :</p> <ul> <li>{$VMWARE.USERNAME}</li> <li>{$VMWARE.PASSWORD}</li> <li>{$VMWARE.URL}</li> </ul> <p></p> Tip <p>Do not use the admin account of your VMware VCenter but create a new monitoring account with RO rights to read out the information and use a secret macro for the password and even maybe the username.</p> <p>Once done go back to the <code>Host</code> tab and fill in the <code>Host group</code> and the correct template. Zabbix provides 2 templates to choose from. </p> <ul> <li>VMware FQDN : The template making use of the FQDN for the VMs (recommended) but:</li> <li>Every Monitored VM should have a unique OS name compliant with the FQDN rules.</li> <li> <p>VMware Tools must be installed on every machine</p> </li> <li> <p>VMware : The template making use of the UUID for every VM.</p> </li> <li> <p>This one is recommended if the FQDN requirements cannot be met.</p> </li> <li> <p>VMWare Guest : Will monitor the virtual machines</p> </li> <li>VMWare Hypervisor : Will monitor the hypervisors</li> <li>These 2 templates should not be linked manually Zabbix will handle this for you !</li> </ul> <p>Zabbix will discover VMware clusters, hypervisors, data stores, and virtual machines. It's possible to control which parts will be monitored by going to the template to the Discovery and disabling the Discovery rules you don't need.</p> <p>It's also possible to change the configuration of our host prototype. Ex: we can configure the host interface to <code>Inherit</code> or to create the interface with <code>Custom</code> data. A list with <code>MACROS</code> can be found here https://www.zabbix.com/documentation/7.0/en/manual/vm_monitoring/discovery_fields</p> <p></p> <p>As you have may have noticed already, in the Zabbix server configuration file there are a few more parameter that we can tweak.</p> <ul> <li>VMWareFrequency</li> <li>How often Zabbix will connect to the VMWare service to collect new data.</li> <li>VMwarePerfFrequency</li> <li>How often Zabbix will connect to the VMWare service to collect performance data.</li> <li>VMWareTimeout</li> <li>This is the maximum number of seconds that a VMWare collector will wait for a response from the VMWare vCenter or Hypervisor</li> <li>VMwareCacheSize</li> <li>This is the shared memory size for storing VMware data. A VMware internal check zabbix[vmware,buffer,...] can be used to monitor the VMware cache usage. This should be verified if enabled in your <code>zabbix server healt template</code>. The size of the cache will depend on the size of your VMware setup.</li> </ul> Note <p>It's best to keep VMWareFrequency and VMwarePerfFrequency with the same values. Using values where <code>VMWareFrequency</code> is less then <code>VMwarePerfFrequency</code> will lead to strange looking graphs.</p> Note <p>If config.vpxd.stats.maxQueryMetrics is invalid or exceeds the maximum number of characters permitted error, add a config.vpxd.stats.maxQueryMetrics parameter to the vCenter Server settings. The value of this parameter should be the same as the value of maxQuerysize in VMware's web.xml file.</p>"},{"location":"vmware/vmware-monitoring/#available-metrics","title":"Available metrics","text":"<p>After some time in latest data you should see for all the items data being populated. It can take a while before every item is populated it depends a bit on the order of the LLD rule being executed.</p> <p>These are the items that are configure with our standard Zabbix VMware template. But the template does not cover all items and more items might be added over time. A list of all keys can be found in the online documentation. https://www.zabbix.com/documentation/7.0/en/manual/vm_monitoring/vmware_keys Those items are <code>simple checks</code> so when creating a new item don't forget to select the correct item type.</p>"},{"location":"vmware/vmware-monitoring/#internal-working","title":"Internal working","text":"<p>We know now that Zabbix can monitor VMware out of the box and the setup for it is very easy. There is a lot of information that we can retreive but to get to this information there is a complex process behind it. To tune this process we have seen that there are parameters that can be set like VMWareFrequency, VMwarePerfFrequency, VMWareTimeout and VMwareCacheSize.</p> <p>The next diagram shows us how Zabbix collects the data and end up with the data in it's history Cache.</p> <p></p> <p>Here we can see the different steps involving in the data flow when monitoring VMWare with Zabbix. Connections are made from the VMWare collector to the SDK interface. The collectors will grab the data and place it in a special VMWare chache. Pollers then will look into the cache and grab the data from it and send it to the preprocessors. The data after preprocessin is then placed in the Zabbix history cache. In case of a proxy it will be sent to the Zabbix server.</p> Note <p>VMwarePerfFrequency and VMWareFrequency are both set standard to 60 seconds wich is fine for small to medium setups lowering this number could create some overload on the VMWare servers. On a larger instance it's probably best to increase then together with the VMWareTimeout parameter.</p>"},{"location":"vmware/vmware-monitoring/#debugging","title":"Debugging","text":"Warning <p>It can take some time before you will see all the VMs in your Zabbix setup popup. If you want to know what the Zabbix server or Proxy (if you monitor VMware over a proxy then you have to adjust all config on the proxy) is doing then you can increase the debug level. This can be done on they fly without changing the debug parameter in the zabbix_server.conf file. Just one the console run the following command to increase logging for all the vmware collectors.</p> <pre><code>zabbix_server -R log_level_increase=\"vmware collector\"\n</code></pre> <p>In case you like to increase logging for only collector 2 then you could run the following command:</p> <pre><code>zabbix_server -R log_level_increase=\"vmware collector,2\"\n</code></pre> Note <p>If you see a message like \"config.vpxd.stats.maxQueryMetrics' is invalid or exceeds the maximum number of characters permitted**\" in the debug don't be alarmed right away. The message is a bit confusing. Have alook at this ticket as it will explain that its not always a problem. https://support.zabbix.com/browse/ZBX-24499</p>"},{"location":"websites/monitoring-websites/","title":"Monitoring websites","text":""},{"location":"windows/monitoring-windows/","title":"Monitoring Windows","text":""},{"location":"fr/","title":"De quoi parle ce livre ?","text":"<p>Bonjour, bienvenue et merci de votre int\u00e9r\u00eat pour mon livre Zabbix. J'ai \u00e9crit le livre de recettes Zabbix et co-\u00e9crit avec Richards Zabbix 4 Network Monitoring il y a quelques ann\u00e9es pour PackPub.</p> <p> </p> <p>The cookbook the first of it's kind probably outdated and will be replaced by the Zabbix 7 IT Infrastructure Monitoring Cookbook, written by Brian and Nathan, 2 people I like a lot to work with and can higly recommend. There are many more books available from Packt about Zabbix a complete overview can be found here Zabbix books at pack. Or if you like to find some non English books Amazon has some books form Packt and other Publishers in Chinese, Spanish and maybe some other languages as well. Other books</p> <p>As Zabbix is an opensource product and making money out of the books was never my intention, it got me thinking how to do things different. How to make a new book without using a publisher like I had done before. After a while, I came up with the idea to make a book that would be free and that would be updated when new versions came out. Since I am a huge fan of documentation in markdown or asciidoc I came up with the idea to share the book in git and use markdown. The only problem left was how to make those markdown files readable in an easy way like a book ? After some searching trying to look for a good solution I found MkDocs. MkDocs is a Python-Markdown library that can convert everything to HTML and can be templated. So the problem was solved and a new book was born.</p>"},{"location":"fr/#who-am-i","title":"Who am I ?","text":"<p>My name is Patrik Uytterhoeven and I work for a Belgium company named Open-Future. I started at this company at Januari 2013 and that's when my journey started with Zabbix as well. They gave me the opportunity to build my experience and to get certified as Zabbix trainer. Since this year I am officially 10y Zabbix trainer. If you would like to follow one of my trainings feel free to register for a training at our website www.open-future.be. Why would you follow a training if you can read this book for free are you now thinking? Because trainings just like the book explain you all the details on how to set up and do things but also give you valueable tips and feedback that you never get from a book. Books just can't cover everything.</p>"},{"location":"fr/#what-os-do-i-need","title":"What OS do I need ?","text":"<p>Since I work mostly with RHEL based systems and since I am convinced that RHEL is the better choice in Production environments I have chosen to focus on using one of the forks that is available for free. Zabbix is supported on Ubuntu, Debian, Suse, Raspberry .... and it can be compiled on any OS that is Unix based so it's almost impossible to cover them all. However the book is Opensource and in GIT so feel free to contribute the code for your favorite flavour :). I will use Rocky Linux 9 in this book, but it should work for most of the other installations as well.</p>"},{"location":"fr/#what-version-of-zabbix-is-used-in-this-book","title":"What version of Zabbix is used in this book ?","text":"<p>Since we are almost at the release of Zabbix 7, I will focus on version 7 since it will be the new LTS. It should also apply to most other versions but of course there will be minor changes. In the future, if there is enough support from the community to update this book together, it would be great if we could build a book for every LTS version available.</p>"},{"location":"fr/#how-to-use-this-book","title":"How to use this book ?","text":"<p>The book will try to cover all the topics, feel free to let me know if something is missing or feel free to make a pull request.  There is no need to start from page 1 and read the book till the end. Some people will be looking for basic knowledge others might want to skip to the fun part, so I want the book to be useful for everyone. Therefor I will try to explain as best as possible in every topic the exact steps needed to reproduce.</p> <p>There will be moments in the book where you need to type some code, I will show the commands you need to type in a box just like here.</p> <pre><code>## some command \n</code></pre> <p>Notes to some useful documentation will be added at the bottom of the page.</p> <p>Here is a simple footnote<sup>1</sup>. With some additional text after it.</p> <p>In case there is some important information to share I will add notes in the documentation like can be seen here :</p> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Info <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Tip <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Question <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Warning <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Bug <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Example <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <ol> <li> <p>My reference.\u00a0\u21a9</p> </li> </ol>"},{"location":"fr/configuration/zabbix-macros/","title":"Macros","text":"<p>Les macros sont l'un des concepts que vous devez comprendre dans Zabbix. Il existe diff\u00e9rents types et ils rendent Zabbix plus \u00e9volutif et moins statique. Dans cette rubrique, nous expliquerons les diff\u00e9rents types de macros et comment les utiliser.</p> <p>Nous couvrirons\u00a0:</p> <ul> <li>Built-in macros</li> <li>Function macros</li> <li>User macros</li> <li>Low-level discovery macros</li> <li>Expression macro</li> <li>User macro with context</li> </ul>"},{"location":"fr/configuration/zabbix-macros/#built-in-macros","title":"Built-in macros","text":"<p>Elles correspondent \u00e0 des macros interne \u00e0 Zabbix, elles sont repr\u00e9sent\u00e9es via cette notation <code>{MACRO}</code>, la liste compl\u00e8te est disponible ici. Chaque built-in macro peut-\u00eatre utilis\u00e9e dans un ou plusieurs cas.</p> <p>Par exemple la built-in macro <code>{HOST.HOST}</code> permettra de r\u00e9cup\u00e9rer le host dans une trigger expression. ou encore la macro <code>{HOST.IP}</code> qui fera la m\u00eame chose mais en r\u00e9cup\u00e9rant l'IP du host.</p> <p>Lorsque vous souhaitez utilser une information interne de Zabbix, il y a de forte chance qu'une built-in macro existe.</p>"},{"location":"fr/configuration/zabbix-macros/#function-macros","title":"Function macros","text":"<p>Vous serez peut etre amenez \u00e0 vouloir manipuler la valeur d'une macro, pour raccourcir ou extraire une partie par exemple. La syntaxe d'une fonction de macro est la suivante : <code>{macro.func(params)}</code></p> Function Description fmtnum Formatage des nombres pour contr\u00f4ler le nombre de chiffres apr\u00e8s la virgule. fmttime Formatage de l'heure iregsub Extraction de sous-cha\u00eenes de caract\u00e8re par une expression r\u00e9guli\u00e8re (insensible \u00e0 la casse). regsub Extraction d'une sous-cha\u00eene de caract\u00e8re \u00e0 l'aide d'une expression r\u00e9guli\u00e8re (sensible \u00e0 la casse)."},{"location":"fr/configuration/zabbix-macros/#user-macros","title":"User macros","text":"<p>Ce sont c'est macro qui apporte \u00e0 Zabbix sa grandre flexibilit\u00e9, elles peuvent \u00eatre d\u00e9fini de fa\u00e7on global, ou au niveau d'un template ou d'un host. Elles sont toujours pr\u00e9c\u00e9d\u00e9 d'un $ et se note ainsi: <code>{$MACRO}</code>.</p> <p>Il est important de noter que Zabbix priorise les user macros comme ceci:</p> <ol> <li>macros au niveau du host (v\u00e9rifi\u00e9es en premier)</li> <li>macros d\u00e9finies dans les templates de 1er niveau (template directement li\u00e9 au hos), tri\u00e9 par template ID</li> <li>macros d\u00e9finies dans les templates de 2eme niveau (template directement li\u00e9 au hos), tri\u00e9 par template ID</li> <li>macros d\u00e9finies dans les templates de 3eme niveau (template directement li\u00e9 au hos), tri\u00e9 par template ID</li> <li>global macros (checked last)</li> </ol> <p>Ces macros sont utilisable \u00e0 beaucoup d'endroit, elles servent courrament \u00e0 d\u00e9finir un seuil et servent de valeur par d\u00e9faut dans un template qu'on peut surcharger au niveau des host-level macro.</p> <p>Afin d'avoir des templates r\u00e9utilisables et fonctionnel dans une majorit\u00e9s de situation, il faut abuser des users macros. Il est \u00e9galement conseill\u00e9 de ne pas utiliser de macros globales lorsqu'elles ne sont pas n\u00e9cessaires, car elles ne sont pas portables lors de l'exportation d'h\u00f4tes ou de mod\u00e8les.</p> <p>Ainsi, lorsque nous d\u00e9finissons des <code>macros globales</code>, elles seront \u00e9cras\u00e9es par des <code>macros de mod\u00e8le</code> et nos macros de mod\u00e8le seront \u00e9cras\u00e9es par des <code>macros h\u00f4tes</code>.</p> <p></p> <p>C'est facile, alors \u00e9crasez une macro par accident pour r\u00e9soudre ce probl\u00e8me. Zabbix a l'option au niveau <code>Host</code> et au niveau <code>Template</code> pour voir s'il y a d\u00e9j\u00e0 des macros d\u00e9finies avec le m\u00eame nom. Cela permet de voir facilement si cette macro est d\u00e9j\u00e0 d\u00e9finie et si elle sera \u00e9cras\u00e9e.</p> <p></p> <p>Dans cette capture d'\u00e9cran, nous pouvons voir qu'il existe une <code>macro globale</code> d\u00e9finie avec une valeur de 100 et que nous avons la m\u00eame macro au niveau du mod\u00e8le qui remplace la valeur de la <code>macro globale</code>. Cependant, la valeur effective provient de notre <code>macro Host</code>.</p>"},{"location":"fr/configuration/zabbix-macros/#low-level-discovery-macros","title":"Low-level discovery macros","text":"<p>Ce type de macros est un peu sp\u00e9ciale, elles s'utilisent dans le cas d'une Low-level discovery et sont pr\u00e9c\u00e9d\u00e9es d'un # <code>{#MACRO}</code>, elles sont utiles pour variabbilis\u00e9s la cr\u00e9ation d'item prototype, de trigger prototype ou d'host prototype.</p>"},{"location":"fr/configuration/zabbix-macros/#expression-macro","title":"Expression macro","text":"<p>Ces macros sont tr\u00e8s sp\u00e9cifiques, elles s'utilisent exclusivement dans les graphs name et dans les maps, elles utilisent la syntaxe suivantes: <code>{?EXPRESSION}</code>. <code>{?avg(/{HOST.HOST}/{ITEM.KEY},1h)}</code></p>"},{"location":"fr/configuration/zabbix-macros/#user-macro-with-context","title":"User macro with context","text":"<p>Il reste un dernier sujet concernant les macros est pas des moindres, tr\u00e8s rapidement apr\u00e8s avoir utilis\u00e9 vos premi\u00e8res user macros pour d\u00e9finir des seuils vous rendre compte que vous souhaitez avoir un seuil diff\u00e9rent en fonction ... du context, elles utilisent la syntaxe: <code>{$MACRO:\"static text\"}</code> Vous souhaitez d\u00e9finir un seuil global \u00e0 80% mais sur une partition particuli\u00e8re passer ce seuil \u00e0 90%, nous allons pour cela utiliser le contexte.</p> <p>Exemple: {\\(LOW_SPACE_LIMIT}: 80 {\\)LOW_SPACE_LIMIT:/tmp}:90</p> <p>Dans cette exemple l'ensemble l'ensemble des points de montage de notre server auront comme seuil par d\u00e9faut 80% sauf /tmp qui lui aura un seuil custom \u00e0 90%.</p>"},{"location":"nl/","title":"Over wat gaat dit boek ?","text":"<p>Hallo, welkom en bedankt voor je interesse in mijn Zabbix-boek. Ik schreef het Zabbix-cookbook en schreef samen met Richards Zabbix 4 Network Monitoring een paar jaar geleden voor PackPub.</p> <p> </p> <p>Het cookbook, het eerste in zijn soort, is waarschijnlijk verouderd en zal worden vervangen door het Zabbix 7 IT Infrastructure Monitoring Cookbook, geschreven door Brian en Nathan, 2 mensen met wie ik graag samenwerk en die ik van harte kan aanbevelen. Er zijn nog veel meer boeken verkrijgbaar bij Packt over Zabbix. Een compleet overzicht vind je hier Zabbix boeken bij pack. Of als je graag niet-Engelse boeken wilt vinden, heeft Amazon een aantal boeken van Packt en andere uitgevers in het Chinees, Spaans en misschien ook enkele andere talen. Andere boeken</p> <p>Omdat Zabbix een open source-product is en geld verdienen met de boeken nooit mijn bedoeling was, zette het mij aan het denken over hoe ik dingen anders kon doen. Hoe je een nieuw boek kunt maken zonder gebruik te maken van een uitgever zoals ik eerder had gedaan. Na een tijdje kwam ik op het idee om een boek te maken dat gratis zou zijn en dat zou worden bijgewerkt als er nieuwe versies uitkwamen. Omdat ik een grote fan ben van documentatie in markdown of asciidoc, kwam ik op het idee om het boek in git te delen en markdown te gebruiken. Het enige probleem dat nog overbleef, was hoe je die markdown-bestanden op een eenvoudige manier leesbaar kunt maken, zoals een boek? Na wat zoeken op zoek naar een goede oplossing vond ik MkDocs. MkDocs is een Python-Markdown-bibliotheek die alles naar HTML kan converteren en waarvan een sjabloon kan worden gemaakt. Dus het probleem was opgelost en een nieuw boek was geboren.</p>"},{"location":"nl/#wie-ben-ik","title":"Wie ben ik ?","text":"<p>Mijn naam is Patrik Uytterhoeven en ik werk voor een Belgisch bedrijf genaamd Open-Future. Ik ben in januari 2013 bij dit bedrijf begonnen en dat was het toen mijn reis ook met Zabbix begon. Ze gaven mij de kans om mijn ervaring op te bouwen en om gecertificeerd te worden als Zabbix-trainer. Sinds dit jaar ben ik officieel 10j Zabbix trainer. Als je een van mijn trainingen wilt volgen, schrijf je dan gerust in voor een training op onze website www.open-future.be. Waarom zou je een training volgen als je dit boek gratis kunt lezen, denk je nu? Omdat trainingen net als het boek je alle details uitleggen over hoe je dingen moet opzetten en doen, maar je ook waardevolle tips en feedback geven die je nooit uit een boek krijgt. Boeken kunnen nu eenmaal niet alles omvatten.</p>"},{"location":"nl/#welk-os-heb-ik-nodig","title":"Welk OS heb ik nodig ?","text":"<p>Omdat ik voornamelijk met op RHEL gebaseerde systemen werk en omdat ik ervan overtuigd ben dat RHEL de betere keuze is in productieomgevingen, heb ik ervoor gekozen om me te concentreren op het gebruik van een van de gratis beschikbare forks. Zabbix wordt ondersteund op Ubuntu, Debian, Suse, Raspberry ... en het kan worden gecompileerd op elk besturingssysteem dat op Unix is \u200b\u200bgebaseerd, dus het is bijna onmogelijk om ze allemaal te behandelen. Het boek is echter Opensource en in GIT, dus voel je vrij om de code voor je favoriete smaak bij te dragen :). Ik zal Rocky Linux 9 gebruiken in dit boek, maar het zou ook voor de meeste andere installaties moeten werken.</p>"},{"location":"nl/#welke-versie-van-zabbix-wordt-in-dit-boek-gebruikt","title":"Welke versie van Zabbix wordt in dit boek gebruikt ?","text":"<p>Omdat we bijna bij de release van Zabbix 7 zijn, zal ik me concentreren op versie 7, aangezien dit de nieuwe LTS zal zijn. Het zou ook moeten gelden voor de meeste andere versies, maar er zullen uiteraard kleine wijzigingen zijn. Als er in de toekomst voldoende steun is vanuit de gemeenschap om dit boek samen bij te werken, zou het geweldig zijn als we voor elke beschikbare LTS-versie een boek zouden kunnen maken.</p>"},{"location":"nl/#hoe-gebruik-je-dit-boek","title":"Hoe gebruik je dit boek?","text":"<p>In dit boek zal ik proberen alle onderwerpen te behandelen, laat het me gerust weten als er iets ontbreekt of doe gerust een pull-verzoek. Het is niet nodig om vanaf pagina 1 te beginnen en het boek tot het einde te lezen. Sommige mensen zijn op zoek naar basiskennis, anderen willen misschien overgaan naar het leuke gedeelte, dus ik wil dat het boek voor iedereen nuttig is. Daarom zal ik proberen bij elk onderwerp zo goed mogelijk uit te leggen welke stappen precies nodig zijn om te reproduceren.</p> <p>Er zullen momenten in het boek zijn waarop je wat code moet typen. Ik zal de commando's die je moet typen in een vak laten zien, net als hier.</p> <pre><code># een commando\n</code></pre> <p>Aantekeningen bij enkele nuttige documentatie worden onderaan de pagina toegevoegd.</p> <p>Hier is een eenvoudige voetnoot<sup>1</sup>. Met wat extra tekst erna.</p> <p>Als er belangrijke informatie is om te delen, zal ik aantekeningen toevoegen in de documentatie, zoals hier te zien is:</p> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Info <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Tip <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Question <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Warning <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Bug <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Example <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <ol> <li> <p>Mijn referentie.\u00a0\u21a9</p> </li> </ol>"},{"location":"nl/installation/Requirements/","title":"Vereisten","text":"<p>Zabbix heeft een reeks vereisten waaraan moet worden voldaan op hardwareniveau en softwareniveau. Deze vereisten kunnen in de loop van de tijd veranderen en zijn ook afhankelijk van de grootte van uw installatie en de software die u kiest. Dus voordat je hardware gaat kopen of een willekeurige databaseversie installeert, bekijk de Zabbix-documentatie en controleer de nieuwste vereisten voor de versie die je wilt installeren. De nieuwste vereisten zijn hier te vinden. Vergeet niet uw juiste Zabbix-versie uit de lijst te selecteren.</p> <p>Als je niet van plan bent iets groots uit te voeren, alleen een kleine installatie of een testopstelling, zal Zabbix gelukkig werken op een systeem met 2cpu en 8G ram. Maar het hangt allemaal af van hoe groot je setup zal zijn en hoeveel items je gaat monitoren, triggers die je gaat cre\u00ebren en hoe lang je die gegevens wilt bewaren. Mijn advies in de tijd van virtualisatie is dat je klein kunt beginnen en later meer kunt toevoegen.</p> <p>Voor de installatie kunt u ervoor kiezen om alle componenten op 1 server te installeren of elk component op een andere server. Maak voor het gebruiksgemak een paar aantekeningen voor uzelf:</p> server ip zabbix server database server web server Tip <p>Terwijl zabbix streepjes \"-\" in zijn namen gebruikt wanneer we pakketten zoals zabbix-get of zabbix-sender moeten installeren, gebruiken de binaire bestanden \"_\". zoals zabbix_sender of zabbix_server. Dit kan natuurlijk vari\u00ebren, afhankelijk van of u de pakketten uit de originele Zabbix-repository's gebruikt of niet. Houd er rekening mee dat het soms nogal verwarrend kan zijn en dat als u een pakket met een streepje installeert, het binaire bestand misschien met een onderstrepingsteken is.</p>"},{"location":"nl/installation/Requirements/#basisconfiguratie-van-het-os","title":"Basisconfiguratie van het OS","text":""},{"location":"nl/installation/Requirements/#firewall","title":"Firewall","text":"<p>Het is belangrijk dat onze Zabbix-server een besturingssysteem heeft dat goed is voorbereid voordat we onze monitoringtool gaan installeren. Eerst moeten we ervoor zorgen dat onze firewall is ge\u00efnstalleerd.</p> <p><code># dnf install firewalld --now</code></p> <p>Onze firewall is nu ge\u00efnstalleerd en we zijn klaar om de benodigde poorten te configureren. Voor onze Zabbix-server moeten we toegang tot poort 10051/tcp toestaan. Dit is de poort waar onze Zabbix-trapper naar binnenkomende gegevens luistert. We moeten deze poort dus in onze firewall openen om toegang tot onze Zabbix-trapper mogelijk te maken.</p> <p><code># firewall-cmd --add-service=Zabbix-server --permanent</code></p> <p>of als de service niet bekend is</p> <p><code># firewall-cmd --add-port=10051/tcp --permanent</code></p> <p>firewalld</p> <p>\"Firewalld is de vervanging van iptables in Redhat en stelt ons in staat wijzigingen onmiddellijk beschikbaar te maken zonder dat u een service opnieuw hoeft te starten. Het is mogelijk dat uw distributie in dit geval geen gebruik maakt van Firewalld je moet naar de documentatie van je besturingssysteem kijken.\"</p>"},{"location":"nl/installation/Requirements/#tijdserver","title":"Tijdserver","text":"<p>Een ander ding dat we moeten configureren is het instellen van de tijdserver en het synchroniseren van onze Zabbix-server met de tijdserver door gebruik te maken van een ntp-client. Dit moet worden gedaan voor de Zabbix-server, maar ook voor de apparaten die we zullen monitoren, aangezien tijd erg belangrijk is voor Zabbix. Stel je voor dat een van onze hosts een tijdzone heeft die verkeerd is. We zouden uiteindelijk op zoek kunnen gaan naar een probleem in Zabbix dat 6 uur geleden gebeurde, terwijl het misschien pas 2 uur geleden was gebeurd.</p> <p><code># dnf install chronyd --now</code></p> <p>Chrony zou nu ge\u00efnstalleerd moeten zijn, ingeschakeld en actief moeten zijn. Dit kan worden geverifieerd met het commando:</p> <p><code># systemctl status chronyd</code></p> <p>dnf</p> <p>\"dnf is een pakketmanager van RedHat, je moet dnf vervangen door de juiste pakketmanager zoals zyper, apt, yum, ... chrony is een vervanging voor ntpd en doet het beter omdat het sneller en nauwkeuriger is. Als je besturingssysteem  chrony dan is ntpd misschien nog steeds beschikbaar.\"</p> <p>Zodra Chrony is ge\u00efnstalleerd, moeten we ook onze juiste tijdzone instellen. We kunnen eerst met 'timedatectl' kijken hoe onze tijd is geconfigureerd</p> <pre><code># timedatectl\n               Local time: Thu 2023-11-16 15:09:14 UTC\n           Universal time: Thu 2023-11-16 15:09:14 UTC\n                 RTC time: Thu 2023-11-16 15:09:15\n                Time zone: UTC (UTC, +0000)\nSystem clock synchronized: yes\n              NTP service: active\n          RTC in local TZ: no\n</code></pre> <p>Zorg ervoor dat de service chronyd actief is, zie hierboven hoe u dit kunt doen als u deze gemist heeft. We kunnen de juiste tijdzone kiezen uit een lijst die we kunnen opzoeken met de volgende opdracht:</p> <pre><code># timedatectl list-time zones\n</code></pre> <p>Dit geeft ons een lijst met alle beschikbare tijdzones. Kies degene die het dichtst bij u in de buurt is.</p> <pre><code>Africa/Abidjan\nAfrica/Accra\n\n...\n\nPacific/Tongatapu\nPacific/Wake\nPacific/Wallis\nUTC\n</code></pre> <p>We kunnen nu onze juiste tijdzone configureren met de volgende opdracht:</p> <pre><code>timedatectl set-time zone Europe/Brussels\n</code></pre> <p>Als we opnieuw kijken, zouden we onze tijdzone correct geconfigureerd moeten zien.</p> <pre><code># timedatectl\n               Local time: Thu 2023-11-16 16:13:35 CET\n           Universal time: Thu 2023-11-16 15:13:35 UTC\n                 RTC time: Thu 2023-11-16 15:13:36\n                Time zone: Europe/Brussels (CET, +0100)\nSystem clock synchronized: yes\n              NTP service: active\n          RTC in local TZ: no\n</code></pre> Note <p>\"Sommige mensen willen graag alle servers in de UTC-tijdzone installeren, zodat alle serverlogboeken zich in dezelfde tijdzone bevinden als ze servers over de hele wereld hebben. Zabbix ondersteunt op gebruikers gebaseerde tijdzone-instellingen, dus het is mogelijk om de tijdzone in UTC aan te houden de server en voeg vervolgens de juiste tijdzone toe in de gebruikersinterface als je wilt.\"</p> <p>We kunnen testen of Chrony ook synchroniseert met de juiste tijdservers door de opdracht chronyc uit te voeren</p> <pre><code># chronyc\nchrony version 4.2\nCopyright (C) 1997-2003, 2007, 2009-2021 Richard P. Curnow and others\nchrony comes with ABSOLUTELY NO WARRANTY.  This is free software, and\nyou are welcome to redistribute it under certain conditions.  See the\nGNU General Public License version 2 for details.\n\nchronyc&gt;\n</code></pre> <p>Vervolgens typen we <code>sources</code></p> <pre><code>chronyc&gt; sources\nMS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^- 51-15-20-83.rev.poneytel&gt;     2   9   377   354   +429us[ +429us] +/-  342ms\n^- 5.255.99.180                  2  10   377   620  +7424us[+7424us] +/-   37ms\n^- hachi.paina.net               2  10   377   412   +445us[ +445us] +/-   39ms\n^* leontp1.office.panq.nl        1  10   377   904  +6806ns[ +171us] +/- 2336us\n</code></pre> <p>Hier kunnen we zien dat we een aantal ntp-servers gebruiken die zich niet in ons eigen land bevinden, dus we kunnen beter overschakelen naar een aantal tijdservers in ons lokale land, of als we een tijdserver in ons bedrijf hebben, kunnen we deze gebruiken. We kunnen hier enkele lokale tijdservers vinden: https://www.ntppool.org/</p> <p>Om dit te veranderen moeten we ons configuratiebestand \"/etc/chrony.conf\" bewerken en de bestaande ntp-server vervangen door onze lokale server.</p> <pre><code># Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\npool 2.centos.pool.ntp.org iburst\n</code></pre> <p>En verander het naar een lokale server:</p> <pre><code># Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\npool be.pool.ntp.org iburst\n</code></pre> <p>Vergeet uiteraard niet de ntpd-client opnieuw op te starten.</p> <pre><code># systemctl restart chronyd\n</code></pre> <p>Als we nog eens kijken, zien we dat we nu onze lokale tijdservers gebruiken.</p> <pre><code>chronyc&gt; sources\n\nMS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^- ntp1.unix-solutions.be        2   6    17    43   -375us[ -676us] +/-   28ms\n^* ntp.devrandom.be              2   6    17    43   -579us[ -880us] +/- 2877us\n^+ time.cloudflare.com           3   6    17    43   +328us[  +27us] +/- 2620us\n^+ time.cloudflare.com           3   6    17    43   +218us[  -83us] +/- 2815us\n</code></pre>"},{"location":"th/windows/monitoring-windows/","title":"Monitoring Windows","text":""},{"location":"","title":"What is this book about ?","text":"<p>Welcome, and thank you for your interest in this Zabbix guide.</p> <p>In the past, I authored the Zabbix Cookbook and co-authored Zabbix 4 Network Monitoring with Richards, both published by Packt.</p> <p> </p> <p>The Zabbix Cookbook was one of the first comprehensive resources for Zabbix users, though it's now somewhat outdated. It has since been succeeded by the Zabbix 7 IT Infrastructure Monitoring Cookbook, written by Brian and Nathan\u2014two individuals I highly recommend and enjoy collaborating with.</p> <p>Packt offers a wide range of other Zabbix-related books. You can browse the full collection here. Additionally, for those looking for non-English titles, Amazon provides Zabbix books in languages such as Chinese, Spanish, and more, published by Packt and other publishers. Find them here.</p> <p>As Zabbix is an open-source product, my goal was never to make money from the books I wrote. This led me to reflect on how I could approach things differently. I wanted to create a book that would be freely available and updated with each new version of Zabbix.</p> <p>Being a strong advocate of documentation in Markdown or AsciiDoc, I decided to share the book in a Git repository, using Markdown as the format. The only challenge left was how to present those Markdown files in a reader-friendly way, like a traditional book. After some research, I discovered MkDocs, a Python-based library that converts Markdown files into HTML and can be templated. With MkDocs, the problem was solved, and a new book was born.</p>"},{"location":"#who-am-i","title":"Who Am I?","text":"<p>My name is Patrik Uytterhoeven, and I work for a Belgian company called Open-Future. I joined Open-Future in January 2013, and that's when my journey with Zabbix began. The company provided me with the opportunity to grow my expertise and become a certified Zabbix trainer. As of this year, I\u2019ve been a Zabbix trainer for 10 years.</p> <p>If you're interested in attending one of my trainings, you can register at www.open-future.be. You might wonder, \"Why take a training if I can read this book for free?\" While books provide extensive information on setup and configuration, trainings offer valuable insights, tips, and feedback that you won\u2019t find easy in a book. Books simply can't cover every detail.</p>"},{"location":"#what-operating-system-do-i-need","title":"What Operating System Do I Need?","text":"<p>As someone who primarily works with RHEL-based systems, I believe RHEL is the optimal choice for production environments. For this reason, I\u2019ve chosen to focus on one of its free forks. Zabbix is supported on Ubuntu, Debian, SUSE, Raspberry Pi, and other systems, and it can be compiled on any Unix-based OS. However, it's nearly impossible to cover every OS in this book. Since the book is open-source and hosted on Git, feel free to contribute code for your preferred distribution! In this book, I will use Rocky Linux 9, but the instructions should apply to most other installations as well.</p>"},{"location":"#what-version-of-zabbix-is-used-in-this-book","title":"What Version of Zabbix Is Used in This Book?","text":"<p>This book focuses on Zabbix 7.0, as it is the latest LTS (Long Term Support) release. Most of the content will be relevant to other versions, though minor changes may exist. In the future, if the community supports updating this book, it would be fantastic to create a version for every LTS release.</p>"},{"location":"#how-to-use-this-book","title":"How to Use This Book","text":"<p>This book is designed to cover a wide range of topics. If you feel something is missing, please reach out or make a pull request.</p> <p>You don\u2019t need to start at page one and read through to the end. Some readers may seek basic knowledge, while others might want to skip directly to more advanced topics. I aim to make this book useful for everyone by providing detailed explanations and clear steps for each topic.</p> <p>Throughout the book, you'll encounter code snippets. These will be presented in code blocks like the one below:</p> <pre><code># sudo yum install zabbix-server-mysql\n</code></pre> <p>Notes to some useful documentation will be added at the bottom of the page.</p> <p>Here is a simple footnote<sup>1</sup>. With some additional text after it.</p> <p>In case there is some important information to share I will add notes in the documentation like can be seen here :</p> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Info <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Tip <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Question <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Warning <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Bug <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Example <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <ol> <li> <p>My reference.\u00a0\u21a9</p> </li> </ol>"},{"location":"Guidlines-for-translations/","title":"Guidelines For Translations","text":""},{"location":"Guidlines-for-translations/#how-to-tranlate","title":"How to tranlate","text":"<ul> <li>Index pages are in the docs folder the english version is <code>index.md</code> if we like to tranlate to another language we need to name the page <code>index.&lt;language code&gt;.md</code>. For example index.fr.md, the correct codes are in mkdocs.md    The book images have to be created in a folder in mkdocs with the language code Ex: nl, fr</li> <li>Translation of the menu can be done in mkdocs.yml. Create the option nav_translations: and translate the menu structure.   Example:</li> </ul> <pre><code>- locale: nl\n  name: Nederlands\n  build: true\n  nav_translations:\n    Welcome: Welkom\n    Getting started: Aan de slag\n    The basics: De basis\n    Problem detection: Probleem detectie\n</code></pre> <ul> <li>If you like to translate a page then create a file with the same name as the original but add the country code before .md Ex : Requirements.md will become Requirements.nl.md. If you don't make screenshots with translations then use the same images in the image dir.</li> <li>If you like to add new screenshots create a new folder image. Ex: image/ becomes image.nl/"},{"location":"Guidlines-for-translations/#how-to-write-a-topic","title":"How to write a topic","text":"<ul> <li>All is written in markdown , HTML is supported but try to avoid if not needed</li> <li>Start the page with the Header #</li> <li>When you write a topic start with an introduction what the topic is about</li> <li>Give an overview of the topics that you will cover</li> <li>Add visuals if possible this explains better to people how things work</li> <li>Create a how to so that people see how they can do this </li> <li>place the images in a /image folder <ul> <li>You can use the english screenshots in the image folder or create your own screenshots in local language use /image. ex: /image.fr <li>Close every topic with --- this will draw a horizontal line </li>"},{"location":"Guidlines-for-translations/#translation-table","title":"Translation Table","text":"<ul> <li>This table can be used to track what has been finished and is ready for translation. For this we mark the page with . </li> <li>Once other languages are translated we mark them with </li> <li>In case a page gets updated with new information after pages are already translated we mark the page with  and remove the  from the tranlated pages.</li> </ul> <ul> <li>Webpage is ready for translation: </li> <li>Webpage is translated : </li> <li>Webpage has been updated after translation: </li> <li>Webpage is still not finished : </li> </ul> Note <p>Please don't update this table this is for reference only when doing translations. I will maintain this table when I add new topics or merge changes.</p> Webpage English French German Italian Dutch Portugese Spanish Thai Chinese Welcome Getting started Requirements Installing Zabbix DB Server Installing Zabbix Configure Zabbix HA The basics Zabbix Interface Zabbix Users &amp; User groups Zabbix hosts Host groups Interfaces templates Items Zabbix triggers Macros Data Flow Data collection Zabbix Agent Problem detection Triggers Taking action when problems come Event based Actions Managing permissions Managing Permissions Visualising Problems Visualising our problems Automating configuration Automating configuration VMWare monitoring VMware monitoring with Zabbix Monitoring websites Monitoring websites Monitoring SNMP, IPMI and JAVA SNMP Monitoring SNMP trap monitoring JAVA monitoring IPMI Monitoring Authentication Authentication with HTTP Authentication with LDAP Authentication with SAML Zabbix MFA support Monitoring with Proxies Installing Proxies Active proxy Passive proxy Proxy loadbalancing Securing Zabbix Securing Zabbix Frontend Securing Zabbix with SELinux Maintaining Zabbix Maintaining Zabbix Monitoring Windows Monitoring Windows Zabbix API Zabbix API Zabbix extras Modbus monitoring with Zabbix"},{"location":"actions/zabbix-eventactions/","title":"Event based Actions","text":""},{"location":"api/zabbix-api/","title":"Zabbix API","text":""},{"location":"authentication/zabbix-http/","title":"Authentication with HTTP","text":""},{"location":"authentication/zabbix-ldap/","title":"Authentication with LDAP","text":""},{"location":"authentication/zabbix-mfa/","title":"Zabbix MFA support","text":"<p>We all know that before you can start configuring Zabbix via WebUI you have to sign in. Zabbix has several options to provide better security for user passwords by configuring password policy:</p> <ul> <li>Requirement for Minimum password length</li> <li>Requirements for password to contain an uppercase and a lowercase Latin letter, a digit, a special character</li> <li>Requirement to avoid easy-to-guess passwords</li> </ul> <p>To secure sign in process even more you can configure multi factor authentication (MFA). MFA protects Zabbix by using a second source of validation before granting access to its WebUI after a user enters his/her password correctly. Zabbix offers to types of MFA - Time-based one-time password (TOTP) and Duo MFA provider.</p>"},{"location":"authentication/zabbix-mfa/#time-based-one-time-password","title":"Time-based one-time password","text":"<p>In the menu select <code>Users</code> section and then <code>Authentication</code></p> <p></p> <p>Now in <code>MFA settings</code> tab select the <code>Enable multi-factor authentication</code> check-box, then select <code>TOTP</code> in Type drop-down list.</p> <p></p> <p>In <code>Hash function</code> drop-down list you can choose SHA-1, SHA-256 or SHA-512, the higher number is the better security.</p> <p>In <code>Code lentgh</code> you can select how many digits will be generated for you by Authenticator application on your phone.</p> <p>Click <code>Add</code> and then <code>Update</code>. Now you have TOTP MFA configured and it is the default method of MFA.</p> <p></p> <p>Now you need to tell Zabbix for which User group (or groups) to use MFA. Let's create a User group that would require MFA.</p> <p>In the menu select <code>Users</code> section and then <code>User groups</code>, then click <code>Create user group</code> button</p> <p></p> <p>In <code>Group name</code> put \"test\". Note that <code>Multi-factor authentication</code> field is \"Default\", as currently we have only one MFA method configured it does not matter whether we select \"Default\" or \"TOTP1\" that we created above. You also can disable MFA for all users belonging to this User group. Click <code>Add</code> button to create \"test\" User group.</p> <p></p> Note <p>MFA method is defined on per User group basis, i.e. MFA method configured for a User group will be applied to all users belonging to this group.</p> <p>Let's add a user to this user group. In the menu select <code>Users</code> section and then <code>Users</code>, then click <code>Create user</code> button</p> <p></p> <p>Fill in <code>Username</code>, <code>Password</code> and <code>Password (once again)</code> fields. Make sure you select <code>test</code> user group in <code>Groups</code> field.</p> <p></p> <p>Then switch to <code>Permissions</code> tab and select any role.</p> <p></p> <p>Click <code>Add</code> button to add the user.</p> <p>Now we can test how TOTP MFA works. Sign out and then try to sign in as a test user you just created. You will be presented with a QR code. That means that the user <code>test</code> has not been enrolled in TOTP MFA yet.</p> <p></p> <p>On your phone you need to install either \"Microsoft authenticator\" or \"Google authenticator\" application. The procedure of adding new QR code is quite similar, here is how it looks in \"Google authenticator\". Tap <code>Add a code</code> and then <code>Scan a QR code</code>. You'll be immediately presented with a 6 digit code (remember we selected 6 in <code>Code length</code> when we configured TOTP MFA?)</p> <p> </p> <p>Enter this code into <code>Verification code</code> field of your login screen and click <code>Sign in</code>, if you did everything right you are logged in into Zabbix at this point. At this point the user \"test\" is considered enrolled into TOTP MFA and Zabbix stores a special code used for furthe authentications in its database. The next time user \"test\" tries to login into Zabbix there will be only a field to enter verification code</p> <p></p> Warning <p>For TOTP MFA to work your Zabbix server must have correct time. Sometimes it's not the case especially if you are working with containers so pay attention to this.</p> <p>If a user changes (or loses) his/her phone, then Zabbix administrator should reset his/her enrollment. To do that in the menue select <code>Users</code> then mark a check-box to the left of \"test\" user and click \"Reset TOTP secret\" button.</p> <p></p> <p>After you reset TOTP secret the \"test\" user will have to undergo enrollment procedure again.</p>"},{"location":"authentication/zabbix-mfa/#duo-mfa-provider","title":"Duo MFA provider","text":"<p>Duo is a very famous security platform that provides a lot of security related features/products. To read more please visit https://duo.com/ . Here we'll talk about Duo only in regards to Zabbix MFA.</p> Warning <p>For Duo MFA to work your Zabbix WebUI must be configured to work with HTTPS (valid certificate is not required, self-signed certificate will work).</p> <p>First of all you need to create an account with Duo (it's free to manage up to 10 users) then login into Duo, you are an admin here. In the menu on the left select <code>Applications</code> and click <code>Protect an Application</code> button.</p> <p></p> <p>Then you will see WebSDK in applications list, click on it</p> <p></p> <p>Here you'll see all the data needed for Zabbix.</p> <p></p> <p>Now let's go to Zabbix. First we need to configure Duo MFA metod. In the menue select <code>Users</code> and click <code>Authentication</code>. Then on <code>MFA settings</code> tab click <code>Add</code> in <code>Methods</code> section.</p> <p></p> <p>Fill in all the fields with data from Duo Dashboard -&gt; Applications -&gt; Web SDK page (see screenshot above) and click <code>Add</code>, then click <code>Update</code> to update Authentication settings.</p> <p></p> <p>After the MFA method is configured let's switch the \"Test\" group to use Duo MFA. In the menu select <code>Users</code> and click <code>User groups</code>, then click \"test\" group. In the field <code>Multi-factor authentication</code> select \"DUO1\" and click <code>Update</code>.</p> <p></p> <p>Everything is ready. Let's test it. Sign out of Zabbix and sign back in with \"test\" user. You should see a welcome screen from Duo. Click several <code>Next</code> buttons.</p> <p> </p> <p>Then you need to select the method of authentication.</p> <p></p> <p>It is up to you what to select you can experiment with all these methods. Let's select \"Duo Mobile\" (you need to install \"Duo mobile\" application on your device). Click <code>I have a tablet</code> (it's just easier to activate your device this way) and confirm that you installed \"Duo mobile\" on your phone. At this point you should see a QR code that you need to scan in \"Duo mobile\" application.</p> <p> </p> <p>Open \"Duo mobile\" on your phone. If you did not have this application previously installed (thus no accounts enrolled) you will see couple of welcome screens.</p> <p> </p> <p>Tap on \"Use a QR code\" and then scan the code presented by Duo in your Zabbix logiin screen. After you do that you will see that the account is enrolled to your Duo MFA. Enter account name and tap \"Done\" and you will see the account in the list of all account enrolled into Duo MFA on this device. In Zabbix WebUI you will also see a conirmation, click \"Continue\".</p> <p> </p> <p>Duo will ask you now whether you want to add another method of authentication, click <code>Skip for now</code> and you'll see a confirmation that set up completed. Click <code>Login with Duo</code> and push notification will be pushed to your device.</p> <p> </p> <p>Now just tap on \"Approve\" on your device and you will be logged in into Zabbix.</p> <p></p> <p>Duo MFA enrollment complete. If you sign out and sign in back then immediately a push notification will be sent to your device and all you need is tap on \"Approve\". Also you will see the user \"test\" in Duo where you can delete the user, or deactivate just click on it and experiment.</p> <p></p>"},{"location":"authentication/zabbix-saml/","title":"Authentication with SAML","text":""},{"location":"automation/automating-configuration/","title":"Automating configuration","text":""},{"location":"configuration/Dashboard/","title":"Zabbix Interface","text":"<p>This chapter is going to cover the basics we need to know when it comes to the Zabbix userinterface and the thing we need to know before we can start to fully dive into our monitoring tool. We will see how the userinteface works how to add a host, groups users, items ... so that we have a good understanding of the basics. This is something that is sometimes missed and can lead to frustrations not knowing why things don't work like we had expected them to work. So even if you are an advanced user it may be usefull to have a look into this chapter.</p>"},{"location":"configuration/Dashboard/#overview-of-the-interface","title":"Overview of the interface","text":"<p>With Zabbix 7 the user interface after logging in is a bit changed. Our menu on the left side of the screen has has a small overhaul. Let's dive into it. When we login into our Zabbix setup the first time with our Admin user we see a page</p> <p>like this where we have our <code>main window</code> in green&gt; our <code>main menu</code> marked in red and our <code>links</code> marked in yellow.</p> <p></p> <p>The main menu can be hidden by collapsing it completely or to reduce it to a set of small icons.</p> <p>When we click on the button with the 2 arrows to the left:</p> <p></p> <p>You will see that the menu collapses to a set of small icons. Pressing \"&gt;&gt;\" will bring the <code>main menu</code> back to it's original state. Pressing the box with the arrow sticking out next to the \"&lt;&lt;\" button will hide the <code>main menu</code> completely.</p> <p></p> <p>To get the main menu back it's not too difficult we just look for the button on the left with three horizontal lines and click it. This will bring the menu back and clicking on the box with the arrow again will bring the <code>main menu</code> back.</p> <p>Yet another way to make the screen bigger that is quit useful for monitors in NOK teams for example is the kiosk mode button. This one is however located on the left side of your screen and looks like 4 arrows pointing to every corner of the screen. Pressing this button will remove all the menus and leave only main window to focus on.</p> <p> </p> <p>When we want to leave the kios mode, the button will be changed to 2 arrows pointing to the inside of the screen. Pressing this button will revert us back to the original state.</p> Tip <p>We can also enter and exit kiosk mode by making use of parameters in our Zabbix url: <code>/zabbix.php?action=dashboard.view&amp;kiosk=1</code> - activate kiosk mode or <code>/zabbix.php?action=dashboard.view&amp;kiosk=0</code> - activate normal mode</p> Note <p>There are many other page parameters we can use. A full list can be found here Zabbix also has a global search menu that we can use to find hosts, host groups and templates.</p> <p></p> <p>If we look in the search box for <code>server</code> you will see that we get an overview of all templates, host groups and hosts with the name <code>server</code> in it.</p> <p></p>"},{"location":"configuration/Dashboard/#main-menu","title":"Main menu","text":"<p>Our main menu on the left consists of a few sections, 9 to be exact:</p> Menu Name Details Dashboards Contains an overview of all the dashboards we have access to. Monitoring Shows us the hosts, problems, latest data, maps, ... Services An overview of all the Services and SLA settings. Inventory An overview of our collected inventory data. Reports Shows us the system information, scheduled reports, audit logs, action logs, etc . Data collection Contains all things related to collecting data like hosts, templates, maintenance, discovery, ... Alert The configuration of our media types, scripts and actions Users User configuration like user roles, user groups, authentication, API tokes, ... Administration The administration part containing all global settings, housekeeper, proxies, queue, ..."},{"location":"configuration/Dashboard/#links-menu","title":"Links menu","text":"<p>Our last part the <code>links</code> part contain a set of useful links that we can use:</p> Menu name Details Support This brings us to the technical support page that you can buy from Zabbix. Remember that your local partner is also able to sell these contracts and can help you in your own language. Your local distributors Integrations The official zabbix integeration page Help The link to the documentation of your Zabbix version User settings The user profile settings. Sign out Log out of the current session. <p>There are still a few buttons that we need to cover on the right side of our screen</p> <p></p> <p>The edit button allows us to change our dashboard. This is something we will cover later. On the far left side there is a \"?\" this will bring you to the Zabbix documentation page that explains everything about the dashboard. The button on the right side with the 3 horizontal lines is the one to share, rename, delete, ... our dashboards.</p> <p></p>"},{"location":"configuration/Dashboard/#system-information","title":"System Information","text":"<p>There is also a box on the dashboard called <code>System Information</code>. This widget will show you the current System status of your Zabbix setup. Let's go over the different lines of information as they are important to understand.</p> Parameter Value Details Zabbix server is running This gives us the status of our zabbix server if it is running yes or no and if it is running on our localhost or another IP and on what port the zabbix server is listening. If no trapper is listening the rest of the information can not be displayed IP and port of the Zabbix server Zabbix server version This shows us the version of the <code>Zabbix server</code> so the version you see at the bottom of your screen is the one from the Zabbix frontend and can be different but should be in the same major version. Version Number Zabbix frontend version This is the version of the frontend and should match with what you see at the bottom of your screen. Version Number Number of hosts (enabled/disabled) The total number of hosts configured on our system How many of those are enabled and disabled Number of templates The number of templates installed on our Zabbix server. Number of items (enabled/disabled/not supported) This line shows us the number of items we have configured in total in this case 99 90 are enabled and 0 are disabled but 9 of them are unsupported. This last number is important as those are items not working. We will look into this later why it happens and how to fix it. For now remember that a high number of unsupported items is not a good idea. Number of triggers (Enabled/disabled[problem/ok]) The number of triggers configured Number of enabled and disabled triggers. Just as with items we also see if there are triggers that are in a problem state or ok state. A trigger in a problem state is a non working trigger something we need to monitor and fix. We will cover this also later. Number of users (online) Here we see the number of users that are configured on our system The nunber of users currently online. Required server performance, nvps The number of new values per second that Zabbix will process per second. This is just an estimated number as some values we get are unknown so the real value is probably higher. So we can have some indication about how many IOPS we need and how busy our database is. A better indication is probably the internal item <code>zabbix[wcache,values,all]</code> High availability cluser It will show us if we are running on a Zabbix HA cluster or not Failover delay once HA is activated Tip <p>System information may display some additonal warnings like when your database doesn't  have the correct character set or collation UTF-8.  Also when the database you used is lower or higher then the recommended version  or when there are misconfigurations on housekeeper or TimescaleDB.  Another warning you can see is about database history tables that aren't  upgraded or primary keys that have not been set. This is possible if you are  coming from an older version before Zabbix 6 and never did the upgrade.</p>"},{"location":"configuration/Dashboard/#the-main-menu-explained","title":"The main menu explained","text":"<p>It's important to know that we have so far seen our dashboard with the Admin user and that this user is a <code>Zabbix Super Admin</code> user. This means that the user has no restrictions. Zabbix works with 3 different levels of users we have the regular users, Zabbix Admin and Zabbix Super Admin users. Let's have a look</p> <p></p> <ul> <li>A <code>Zabbix User</code> will only see the red part of our   <code>main menu</code> and will only be able to see our collected data.</li> <li>A <code>Zabbix Admin</code> will see the red part and the yellow   part of the <code>main menu</code> and is able to change our configuration.</li> <li>A <code>Zabbix Super Admin</code> will see the complete <code>main menu</code> and so is able   to change the configuration and all the global settings.</li> </ul> <p> </p> <p></p> <ul> <li>Problems: This page will give us an overview of all the problems.   With filter we can look at recent problems past problems and problems   that are active now. There are many more filters tor drill down more.</li> <li>Hosts: This will give us a quick overview page with whats happening   on our hosts and allows us to quickly go to the latest data, graphs and dashboards.</li> <li>Latest data: This page I probably use the most, it shows us all the information   collected from all our hosts.</li> <li>Maps: The location where we can create map that are an oveview of our   IT infrastructure very useful to get a high level overview of the network.</li> <li>Discovery: When we run a network discovery this is the place where we can find   the results.</li> </ul> <p></p> <ul> <li>Services This page will give us a high level overview of all services   configured in Zabbix.</li> <li>SLA: An overview of all the SLAs configured in Zabbix.</li> <li>SLA Report: Here we can watch all SLA reports based on our filters.    </li> </ul> <p></p> <ul> <li>Overview: A place where we can watch all our iventory data that   we have retrieved from our hosts.</li> <li>Hosts: Here we can filter by host and watch all inventory data for the   hosts we have selected.    </li> </ul> <p></p> <ul> <li>System information: System information is a summary of key Zabbix server   and system data.</li> <li>Scheduled reports: The place where we can schedule our reports, a pdf of   the dashboard that will be sent at a specified time and date.</li> <li>Availability report: A nice overview where we can see what trigger has   been in ok/nok state for how much % of the time</li> <li>Top 100 triggers: Another page I visit a lot here we have our top list   with triggers that have been in a nok state.</li> <li>Audit log: An overview of the user activity that happend on our system.   Useful if we want to know who did what and when.</li> <li>Action log: A detailed overview of our actions can be found here.   What mail was sent to who and when ...?</li> <li>Notifications: A quick overview of the number of notifications sent to each user.</li> </ul> <p></p> <ul> <li>Template groups: A place to logical group all templates together in different groups.   Before it was mixed together with hosts in host groups.</li> <li>Host groups: A logical collection of different hosts put together.   Host groups are used for our permissions.</li> <li>Templates: A set off entities like items and triggers can be grouped together   on a template, A template can be applied to one or more hosts.</li> <li>Hosts: What we need in Zabbix to monitor A host, application, service ...</li> <li>Maintenance: The place to configure our maintenance windows. A maintenance can   be planned in this location.</li> <li>Event correlation: When we have multiple events that fires triggers related we   can configure correlations in this place.</li> <li>Discovery: Sometimes we like to use Zabbix to discover devices, services,...   on our network. This can be done here.</li> </ul> <p></p> <ul> <li>Actions: This menu allows us to configure actions based on <code>events</code> in   Zabbix. We can create such actions for triggers, services, discovery,   autoregistration and internal events.</li> <li>Media types: Zabbix can sent messages, emails etc ... based on the actions we   have configured. Those media types need templates and need to be activated.</li> <li>Scripts: In Zabbix it's possible to make use of scripts in our actions and   frontend. Those actions need to be created here first and configured.    </li> </ul> <p></p> <ul> <li>User groups:</li> <li>User roles:</li> <li>Users:</li> <li>API tokens:</li> <li>Authentication:    </li> </ul> <p></p> <ul> <li>General:</li> <li>Audit log:</li> <li>Housekeeping:</li> <li>Proxies:</li> <li>Macros:</li> <li>Queue:    </li> </ul> Info <p>More information can be found in the online Zabbix documentation here</p> Info <p>You will see that Zabbix is using the modal forms in the frontend on many places. The problem is that they are not movable. This module created by one of the Zabbix devs <code>UI Twix</code> will solve this problem for you.</p> Note <p>At time of writing there is no Dashboard import/export functionality in zabbix. So when upgrading dashboards it needs to be created by hand. It was on the roadmap for 7 but didnt made it so feel free to vote https://support.zabbix.com/browse/ZBXNEXT-5419</p>"},{"location":"configuration/zabbix-dataflow/","title":"Data Flow","text":""},{"location":"configuration/zabbix-dataflow/#data-collection","title":"Data Collection","text":""},{"location":"configuration/zabbix-dataflow/#simple-checks","title":"Simple Checks","text":""},{"location":"configuration/zabbix-hostgroups/","title":"Host groups","text":"<p>Let's have look at the concepts of host groups and what the benefits are that they provide. We have seen that <code>Host groups</code> can be created directly when we create a new <code>Zabbix host</code>. Another way to create them is by a <code>Super Admin</code> going to <code>Data collection</code> -&gt; <code>Host groups</code>. Next press the button <code>Create host group</code> in the upper right corner of the screen. Host groups exists to make a logical group so we can add all hosts that belong together in one group or more. Ex all Linux servers, all PostgreSQL servers, or all the servers that belong to one team.</p> <p></p> <p>When going to our menu <code>data collection</code> you notice that there are <code>Host groups</code> and <code>Template groups</code>. If you come from an older Zabbix version you will be happy to read that Zabbix made a specific group for Templates. If you are new to Zabbix don't panic :). In older versions Zabbix had mixed Templates and host in one group. This mixing was sometimes confusing especially for new users, as Zabbix doesnt link templates to groups.</p> <p>When you click on the menu <code>Data collection</code> -&gt; <code>Host groups</code>. You will notice that some groups are already made. You will also see that there are some names behind the host groups with numbers in front. These names are the names from the hosts that are in the group. The number in front is the number of hosts that are in the <code>host group.</code> To make life more easy you can click on the names of the hosts and Zabbix will bring you directly to the configuration screen for this host.</p> <p></p> <p>Zabbix allows the creation of nested groups. As you can see we are using forward slashes in our group name. When you make use of nested group you can use the '/' to separate groups.</p> <p></p> <p>Once our group or set of nested groups is made you can click again from the <code>host group</code> overview on the group. You will notice that there is now a box that says <code>Apply permissions and tag filters to all subgroups</code>. When pressing this button, all right that are this group will be applied to the sub-groups. So if we have a user <code>John</code> for example in a user group that has rights to see everything in the <code>Host group</code> with the name <code>Europe/Belgium</code> and we apply the option to the subgroups then our user <code>John</code> will suddenly see also the hosts in all our nestet groups and the tags on this host.</p> Note <p>When creating nested groups, Parent groups don't have to exist. So we can have only the group <code>open-future</code> without any of the parent groups. It's up to the user to create them or not. Also group names cannot have <code>/</code> in their names. We cannot escape the <code>/</code> character. Also leading and trailing slashes and multiple slashes in a row are not allowed.</p> Tip <p>Have you tried to put emoticons in fields like host group yet ?</p>"},{"location":"configuration/zabbix-hosts/","title":"Zabbix hosts","text":"<p>To understand how Zabbix works, it's important to know that <code>Hosts</code> in Zabbix are a reference to anything we would like to monitor. It can be a physical host, a virtual machine, an application, a device, or even just a dummy host used to calculate data from existing  hosts into something new.</p> <p>It's probably one of the first tasks that we will do as an Admin when we first login to Zabbix because we need a host if we would like to monitor some metrics. It's however, important to know that hosts cannot be created without being in a hostgroup.</p> <p>In this chapter we will teach you:</p> <ul> <li>How to add a host in Zabbix</li> <li>Host configuration tabs</li> <li>IPMI</li> <li>Tags</li> <li>Macros</li> <li>Inventory</li> <li>Encryption</li> </ul>"},{"location":"configuration/zabbix-hosts/#how-to-add-a-host-in-zabbix","title":"How to add a host in Zabbix","text":"<p>With this said, let's see how to create our first host.</p> <p>Let's go to the menu on your <code>left</code> and select <code>Data Collection</code> -&gt; <code>Hosts</code>. We see that there is already a host configured and that the availability icon is \"RED\". Don't worry about it, this is normal. We have no Zabbix agent installed or configured.</p> <p>To add a new host to our system, we have to press <code>Create host</code>, this button can be found in the upper right corner of our screen.</p> <p></p> <p>We now get a modal form where we need to fill in some information about our host. The fields marked with a  red  asterisk  \"*\"  are the fields that are mandatory.</p> <p></p> Parameter Description Host name Here we need to enter the Host name of the machine we would like to add. The name can contain alphanumerics, spaces, dots, dashes, and underscores. HOWEVER you are not allowed to use leading and trailing spaces. The Host name in the frontend is what we need later for the configuration of our Zabbix agent, so make sure you remember it. Visible name The host name, as we have seen, is needed to configure our Zabbix agent. So in case you like to give it a unique name or one that is randomly generated, ... you can add a visible name here. This name will then be used on the frontend instead of what we call the technical name host name. This name has support for UTF-8, so special characters are supported. This name will be used in all the places like maps, the latest data, inventory, ... Templates Templates are like blueprints that we can use on our hosts to add items, triggers, etc. We explain more about it in the topic Zabbix templates. You can start typing the name of the template, and Zabbix will start to show a list with matches, or you can press the <code>Select</code> box and choose one from the list. Host groups Every host must belong to atleast one <code>host group</code>. This is because permissions are set on host groups. You can type the name of the host group, and a list of matching groups will start to appear. Another way is to select a host group from an existing list by pressing the Select button. Or you can create a new group by just typing the name and pressing on the box that shows the name of the group you typed with (new) behind it Interfaces Zabbix supports several host interfaces, like the Zabbix agent, SNMP, JMX, and IPMI. By default, when we create a host, no interface is added. To add an interface, press Add and fill in the needed information, like IP or DNS, depending on the host interface chosen. When an interface is in use (items created that use the interface), then the interface cannot be removed. Description A place to enter a short description about our host. Monitored by proxy If we have proxies configured, we can select them here if we like to monitor our host through a proxy. Enabled Mark the checkbox to enable the host. This will keep it monitored by Zabbix. When unchecked, the host will not be monitored."},{"location":"configuration/zabbix-hosts/#host-configuration-tabs","title":"Host configuration tabs","text":"<p>Before we add a host ourselves, there are a few things we need to know first. When we click on a host that we have already configured, there are a few things that we will notice. First of all, we see a <code>blue</code> line under <code>Host</code>. This means that we are on the current <code>tab</code> of the host page. As you can see, there are multiple tabs that we can click on, like IPMI, Tags, Macros,...</p> <p></p> <p>The next thing we see is that next to the tab <code>Macros</code>, there is a number 2. This is because there are two macros configured in the macro tab. So when we add information to tabs like macros or tags ... , Zabbix will show how many items we have added to these tabs by showing next to the tab name the number.</p> <p>When looking at the <code>encryption</code> tab, we notice the green dot. This shows us that an option on the tab has been activated. Now that we know this, let's get a quick overview of every tab and see what it does.</p>"},{"location":"configuration/zabbix-hosts/#ipmi","title":"IPMI","text":"<p>So looking at the <code>IPMI</code> tab, there are a few things we need to fill in when working with an IPMI interface. IPMI stands for Intelligent Platform Management Interface and is basically a set of standards to manage hardware platforms. In short, it allows us to monitor and manage our servers hardware even if the server is not turned on yet. IPMI is better known as ILO on HP servers and DRAC on Dell servers.</p> Parameter Description Autentication algorithm Select the authentication algorithm that we have configured on our IPMI server this can be Default, none, MD2, MD5, Straight, OEM, RMCP+ Privelege level Here we select the privelege level: Callback, User, Operator, Admin or OEM. Username The user for authentication that was created on the host. User Macros can be used. Password The password for our user on the host. User macros can be used. Note <p>We will cover IPMI in more detail later in the Chapter IPMI Monitoring</p>"},{"location":"configuration/zabbix-hosts/#tags","title":"Tags","text":"<p>The Tags tab allows you to define host-level tags. Host-level tags are used to provide additional information about the host that can be used as a filter in the webUi.</p> <p>example:</p> <p>We add a <code>datacenter</code> tag to physical hosts servers to indicate the location of the server and thus make it easy to list all the servers present in this datacenter, impacted by incident.</p>"},{"location":"configuration/zabbix-hosts/#macros","title":"Macros","text":"<p>The macros tab allows you to define host-level user macros. Macros in Zabbix can be seen as variables that can be overloaded at will. You need to use and abuse them to make templates as reusable as possible.</p> Note <p>We will cover Macro in more detail later in the Chapter Macros</p>"},{"location":"configuration/zabbix-hosts/#inventory","title":"Inventory","text":"<p>The Inventory tab allows you to manually enter inventory information for the host. You can also select to enable Automatic inventory population, or disable inventory population for this host.</p>"},{"location":"configuration/zabbix-hosts/#encryption","title":"Encryption","text":"<p>The Encryption tab allows you to configure encrypted connections with the host. Il est possible de configurer l'encryption entre le Zabbix proxy/Zabbix server.</p> Value Description no encryption (default value) Unencrypted PSK Using pre-shared keys certificate Using certificates"},{"location":"configuration/zabbix-hosts/#value-mapping","title":"Value Mapping","text":"<p>The Value mapping tab allows to configure human-friendly representation of item data in value mappings.</p>"},{"location":"configuration/zabbix-interfaces/","title":"Interfaces","text":"<p>When setting up your host, if you want to monitor him, you will quickly need to specify an IP address or a FQDN.</p> <p>This configuration is located in the interface section of the create host view.</p> <p>After clicking add, a drop-down menu will ask you to select the type of interface.</p> <p></p> Parameters Description Agent Allows use of item keys of type Zabbix Agent and Zabbix Agent Active SNMP Allows monitoring of the host via SNMP type items JMX Allows monitoring of Java applications through JMX counters IPMI Allows monitoring of IPMI through items of type <p>All types of interfaces need same information, IP or DNS and port number. If you want to use DNSremember to click on the button DNS in <code>Connect to</code>.</p> <p>SNMP interface need four more informations:</p> <ul> <li>SNMP version, depends on the snmp version configured on the host</li> <li>SNMP Community, depend on the snmp community configured on the host.</li> <li>Max repetition count, necessary for native SNMP bulk requests   Note that setting this value too high may cause the SNMP agent check timeout.</li> <li>Mark the Use combined requests checkbox to allow   combined processing   of SNMP requests (not related to native SNMP bulk requests)</li> </ul> <p>You can create several interfaces on a host, which may or may not be identical. If more than one interface of a type exists, you can define the default interface (which will be used by default by all items on the host)</p> Note <p>We will cover IPMI in more detail later in the Chapter IPMI Monitoring We will cover JAVA in more detail later in the Chapter IPMI Monitoring We will cover SNMP in more detail later in the Chapter IPMI Monitoring</p> Tip <p>If you want to monitor host with HTTP call, interface are not necessary.</p>"},{"location":"configuration/zabbix-items/","title":"Items","text":""},{"location":"configuration/zabbix-macros/","title":"Macros","text":"<p>Macros are one of the concepts you need to understand in Zabbix. There are different types, and they make Zabbix more scalable and less static. In this topic we will explain the different types of macros and how to use them.</p> <p>We will cover:</p> <ul> <li>Built-in macros</li> <li>Function macros</li> <li>User macros</li> <li>Low-level discovery macros</li> <li>Expression macro</li> <li>User macro with context</li> </ul>"},{"location":"configuration/zabbix-macros/#built-in-macros","title":"Built-in macros","text":"<p>They correspond to Zabbix internal macros, they are represented using this notation <code>{MACRO}</code>, the complete list is available here. Each built-in macro can be used in one or more cases.</p> <p>For example, the <code>{HOST.HOST}</code> built-in macro can be used to retrieve the host in a trigger expression, or the macro <code>{HOST.IP}</code> which does the same thing but retrieves the IP of the host.</p>"},{"location":"configuration/zabbix-macros/#function-macros","title":"Function macros","text":"<p>You may want to manipulate the value of a macro, to shorten or extract a part for example. The syntax of a macro function is as follows: <code>{macro.func(params)}</code></p> Function Description fmtnum Number formatting to control the number of digits printed after the decimal point. fmttime Time formatting. iregsub Substring extraction by a regular expression match (case-insensitive). regsub Substring extraction by a regular expression match (case-sensitive)."},{"location":"configuration/zabbix-macros/#user-macros","title":"User macros","text":"<p>Macros are what give Zabbix its great flexibility. They can be defined globally, or at template or host level. They are always preceded by a $ and are noted thus: <code>{$MACRO}</code>.</p> <p>It's important to note that Zabbix prioritises user macros in the following way:</p> <ol> <li>Host level macros (checked first)</li> <li>Macros defined on first level templates of the host (i.e., templates linked    directly to the host), sorted by template ID</li> <li>Macros defined on the second level templates of the host, sorted by template ID</li> <li>Macros defined on the third level templates of the host, sorted by template    ID, etc.</li> <li>global macros (checked last)</li> </ol> <p>These macros can be used in  many locations, they are commonly used to define a threshold and serve as a default value in a template that can be overloaded with host-level macros.</p> <p>In order to have templates that are reusable and functional in the majority of the situations, users macros must be used.</p> <p>It's also recommended to not use global macros when not needed as they are not portable when exporting hosts or templates.</p> <p>So when we define <code>global macros</code> they will be overwritten by <code>template macros</code> and our template macros will be overwritten by <code>host macros</code>.</p> <p></p> <p>It's easy so overwrite a macro by accident to solve this problem Zabbix has the option on <code>Host</code> and on <code>Template</code> level to see if there are any macros defined yet with the same name. This makes it easy to see if you have this macro defined already and if it will be overwritten.</p> <p></p> <p>In this screenshot we can see that there is a <code>Global macro</code> defined with a value of 100 and that we have the same macro on <code>Template level</code> that overrides the value of the <code>Global macro</code>. However the effective vale is coming from our <code>Host macro</code>.</p>"},{"location":"configuration/zabbix-macros/#low-level-discovery-macros","title":"Low-level discovery macros","text":"<p>This type of macro is a little special, it is used in the case of Low-level discovery and is preceded by a # <code>{#MACRO}</code>. It's useful for the creation of a prototype item, prototype trigger or prototype host.</p>"},{"location":"configuration/zabbix-macros/#expression-macro","title":"Expression macro","text":"<p>These macros are very specific, they are used exclusively in name graphs and in maps, they use the following syntax: <code>{?EXPRESSION}</code>. <code>{?avg(/{HOST.HOST}/{ITEM.KEY},1h)}</code></p>"},{"location":"configuration/zabbix-macros/#user-macro-with-context","title":"User macro with context","text":"<p>There's one last subject concerning macros, and it's not the least important: very soon after using your first user macros to define thresholds, you'll realise that you want to have a different threshold depending on ... the context. For this we can use  the following syntax: <code>{$MACRO: \"static text\"}</code> If you want to set the global threshold to 80%, but on a particular partition you want to increase the threshold to 90%. To do this, we'll use the context.</p>"},{"location":"configuration/zabbix-macros/#example","title":"Example","text":"<ul> <li>{$LOW_SPACE_LIMIT}: 80</li> <li>{$LOW_SPACE_LIMIT:/tmp}:90</li> </ul> <p>In this example, all the mount points on our server will have a default threshold of 80% except for /tmp, which will have a custom threshold of 90%.</p>"},{"location":"configuration/zabbix-macros/#some-useful-links","title":"Some useful links","text":"<ul> <li>https://www.zabbix.com/documentation/7.0/en/manual/appendix/macros/supported_by_location</li> <li>https://www.zabbix.com/documentation/7.0/en/manual/config/macros/macro_functions</li> <li>https://www.zabbix.com/documentation/7.0/en/manual/config/macros/user_macros</li> <li>https://www.zabbix.com/documentation/7.0/en/manual/config/macros/lld_macros</li> <li>https://www.zabbix.com/documentation/7.0/en/manual/config/macros/expression_macros</li> <li>https://www.zabbix.com/documentation/7.0/en/manual/config/macros/user_macros_context</li> </ul>"},{"location":"configuration/zabbix-templates/","title":"Templates","text":"<p>Templates are probably the most important notion in Zabbix, and globaly in monitoring tools. They help you to make change more easily and globaly, just make the change one time and will be applied immediately to all hosts concerned.</p> <p>You can see template like a special host without interface that you can link to a classical host, the configuration added to a template are apply to all hosts using the template.</p> <p>But in return, when you make a mistake during template evolution, it spreads to all hosts. Make little change and test on one or two hosts before if you have any doubts.</p> <p>In this chapter we will teach you:</p> <ul> <li>How to add a new template</li> <li>Template configurations tabs</li> <li>Tags</li> <li>Macros</li> <li>Guidelines</li> </ul>"},{"location":"configuration/zabbix-templates/#how-to-add-a-new-template","title":"How to add a new template","text":"<p>For build a new templates use the left menu and select Data Collection &gt; Templates. On this menu you can see all templates available on you installation.</p> <p></p> <p>Before creating a new template you have to ask yourself one question : <code>Does a template already exist for monitoring this technology ?</code>. Of course the first way is to check the available template, and if no one exist you can check on : Zabbix Monitoring and Integration Solutions and more globally on the Internet.</p> <p>Unfortunitely, no template exist for your needed.  Use the <code>Create template</code> button on the top right to start the creation. Remerber the fields marked with a red asterisk \"*\" are the fields that are mandatory.</p> <p>A template is simply a name and a one or more template groups.</p> <p></p> Tip <p>Suffix the technonology name with the type of item used <code>by Zabbix agent</code>, <code>by SNMP</code>, ...</p> <p>Template groups is like hostgroup, it's use for classify template and apply rights.</p> <p>In description you can add information that could be of interest to use the template, the version tested, ...</p>"},{"location":"configuration/zabbix-templates/#tags","title":"Tags","text":"<p>Template-level tags will be visible in case of problems.</p>"},{"location":"configuration/zabbix-templates/#macros","title":"Macros","text":"<p>All user macros used by the template need to be define with default value in this section. Your template must be able to use without setting on host, except for connection informations, the default value especially the thresold must be generic.</p>"},{"location":"configuration/zabbix-templates/#some-useful-links","title":"Some useful links","text":"<p>https://www.zabbix.com/documentation/guidelines/en/thosts/configuration/templates</p>"},{"location":"configuration/zabbix-users/","title":"Zabbix Users &amp; User groups","text":"<p>Now that we know how the Zabbix dashboard is build up our first task will be to create a user. In case you missed it the standard Zabbix (yes the capital Z here is eeded to login.) user is Admin and has the password zabbix so we need to change this ASAP.  The most confusing part is probably that the user Admin in zabbix is actually a <code>super admin</code> but more about that later. In this topic we will cover:</p> <ul> <li>Changing the Zabbix super admin password</li> <li>Zabbix User types</li> <li>Creating a new User in Zabbix</li> <li>Strengthen the Zabbix password policy.</li> <li>User Media</li> <li>User permissions</li> <li>User Roles</li> <li>User Groups</li> <li>User Groups Overview</li> </ul>"},{"location":"configuration/zabbix-users/#changing-the-zabbix-super-admin-password","title":"Changing the Zabbix super admin password","text":"<p>In our menu on the right side of the screen, click the <code>Users</code> section, and then choose <code>users</code>. As you can see here in the screenshot.</p> <p></p> <p>You will now see a list of all the users that are created on the system when installing a new Zabbix instance. Here you will always see a list of all users that are configured on the system.</p> <p></p> <p>To change the password, do the following steps: - Click user <code>Admin</code> - Click on the button <code>Change password</code>. - Fill in the current password, <code>zabbix</code> - Fill in the new password twice and press <code>Update</code> at the bottom of the page.</p>"},{"location":"configuration/zabbix-users/#zabbix-user-types","title":"Zabbix User types","text":"<p>Before we create new users, it's important to know that Zabbix has three user types that are built-in.</p> User type Description Zabbix User This is a normal user that only has read-only permissions if given. So there are no permissions assigned by default. Zabbix Admin A user with read/write permissions. Just like the Zabbix user, there are no permissions by default. However access can be denied to some groups. Zabbix Super Admin A user with group read/write permissions. The user will have read/write access to all host and template groups. Access can't be revoked by denying access to groups, like with a normal admin. <p>Besides these differences, these users also have different access rights to our menu. Let's have a closer look.</p> <ul> <li>A normal user will only see a part of our menu on the left. Also, some sub-sections of the menu will not be visible. An <code>Admin</code> user will have more rights than a regular user and will be able to make some configuration changes in Zabbix. A <code>Super Admin</code> user will have unlimted right and see every part of the menu. The only way to limit a <code>Super Admin</code> will be by making use of roles. Something we cover later.</li> <li>An <code>Admin</code> user will have more rights than a regular user and will be able to make some configuration changes in Zabbix.</li> <li>A <code>Super Admin</code> can access all parts of the menu. </li> </ul> <p>This table gives an overview of all the permissions a Zabbix user, admin, and super admin have in the Zabbix menu:</p> Zabbix User Zabbix Admin Zabbix Super Admin Dashboards \u2705 \u2705 \u2705 Zabbix User Zabbix Admin Zabbix Super Admin Monitoring \u2705 \u2705 \u2705 - Problems \u2705 \u2705 \u2705 - Hosts \u2705 \u2705 \u2705 - Latest data \u2705 \u2705 \u2705 - Maps \u2705 \u2705 \u2705 - Discovery \u274c \u2705 \u2705 Zabbix User Zabbix Admin Zabbix Super Admin Services \u2705 \u2705 \u2705 - SLA \u274c \u2705 \u2705 - SLA Reports \u2705 \u2705 \u2705 Zabbix User Zabbix Admin Zabbix Super Admin Inventory \u2705 \u2705 \u2705 - Overview \u2705 \u2705 \u2705 - Hosts \u2705 \u2705 \u2705 Zabbix User Zabbix Admin Zabbix Super Admin Reports \u2705 \u2705 \u2705 - System information \u274c \u274c \u2705 - Scheduled reports \u274c \u2705 \u2705 - Availability report \u2705 \u2705 \u2705 - Triggers top 100 \u2705 \u2705 \u2705 - Audit log \u274c \u274c \u2705 - Action log \u274c \u274c \u2705 - Notifications \u274c \u2705 \u2705 Zabbix User Zabbix Admin Zabbix Super Admin Data Collection \u274c \u2705 \u2705 - Template groups \u274c \u2705 \u2705 - Host groups \u274c \u2705 \u2705 - Templates \u274c \u2705 \u2705 - Hosts \u274c \u2705 \u2705 - Maintenance \u274c \u2705 \u2705 - Event correlation \u274c \u274c \u2705 - Discovery \u274c \u2705 \u2705 Zabbix User Zabbix Admin Zabbix Super Admin Alerts \u274c \u2705 \u2705 - Trigger actions \u274c \u2705 \u2705 - Service actions \u274c \u2705 \u2705 - Autoregistration actions \u274c \u2705 \u2705 - Internal actions \u274c \u2705 \u2705 - Media types \u274c \u274c \u2705 - Scripts \u274c \u274c \u2705 Zabbix User Zabbix Admin Zabbix Super Admin Users \u274c \u274c \u2705 - User groups \u274c \u274c \u2705 - User roles \u274c \u274c \u2705 - Users \u274c \u274c \u2705 - Api tokens \u274c \u274c \u2705 - Authentication \u274c \u274c \u2705 Zabbix User Zabbix Admin Zabbix Super Admin Administration \u274c \u274c \u2705 - General \u274c \u274c \u2705 - Audit log \u274c \u274c \u2705 - Housekeeping \u274c \u274c \u2705 - Proxies \u274c \u274c \u2705 - Macros \u274c \u274c \u2705 - Queue \u274c \u274c \u2705 <ul> <li>An <code>Admin</code> user will have more rights than a regular user and will be able to make some configuration changes in Zabbix.</li> <li>A <code>Super Admin</code> can access all parts of the menu. </li> </ul>"},{"location":"configuration/zabbix-users/#creating-a-new-user-in-zabbix","title":"Creating a new User in Zabbix","text":"<p>So now that we are in the users section of Zabbix, it's probably a good time to create a new user for our system. If you skipped the previous step, go to the menu <code>Users</code> -&gt; <code>Users</code>.</p> <p>Click on the top right on <code>Create user</code> and fill in the details of your new users. You will see that some fields have red asterisks in front of them, like Username and Password, ... this means that those fields are mandatory to fill in.</p> <p></p>"},{"location":"configuration/zabbix-users/#strengthen-the-zabbix-password-policy","title":"Strengthen the Zabbix password policy.","text":"<p>Zabbix passwords rely on a minimum length of 8 characters and also block a list of easy-to-guess passwords. We can make our passwords more secure by telling Zabbix that our passwords must contain uppercase and lowercase characters, a digit, and a special character. This policy is a global policy that will be enforced, and we have to set this policy as Super Admin. Go to the menu Users -&gt; Authentication. In older versions, you can find it under Administration Authentication.</p> <p></p> Parameter Description Username A unique name that will be used as username when we login. Name The users firstname this field is optional visible in acknowledgment information and notification recipient information if set. Last Name Users last name. Optional, this field is optional visible in acknowledgment information and notification recipient information if set. Groups Select what group the user will belong to. Atleast 1 group needs to be selected. This feeld will auto complete or you can press the '''Select''' button at the end of the field Password There are 2 password fields they can only be used for internal authentication but more about this later. If the user has the Super admin role then clicking on the Change password button opens an additional field to entering the current (old) password. On a successful password change, the user for which the password was changed will be logged out of all active sessions. Language Language of the frontend. The php gettext extension is required for the translations to work. And the language needs to be configured on the system. See the chapter \"Installing Zabbix\" in case you forgot. Timezone Select the time zone per user or use the default timezone that is configured on the Zabbix server. Theme Here users can select their own look and feel by choosing one of the 4 themes provided by Zabbix or another custom made theme. Default will switch to the default theme chosen by the admin. Auto-Login Check this box so that the user will be remembered for 30 days. The browser must accept cookies for this to work. Auto-Logout Checking this box makes sure the user gets logged out automatically, after the set amount of seconds (minimum 90 seconds, maximum 1 day). Time suffixes are supported, e.g. 90s, 5m, 2h, 1d. Note that this option will not work if : <li>If the \"Show warning if Zabbix server is down\" global configuration option is enabled and Zabbix frontend is kept open.</li><li>When Monitoring menu pages perform background information refreshes.</li><li>If logging in with the Remember me for 30 days option checked.</li> Refresh Set the refresh rate used for graphs, plain text data, etc. Can be set to 0 to disable. Time suffixes are supported. Ex: 90s, 5m, 1h. Rows per page Define how many rows per page will be displayed in lists. URL(after login) You can make Zabbix transfer the user to a specific URL after successful login. This can be useful for monitors in NOC team for example so you arrive on a specific dashboard that is maximised. You can make Zabbix transfer the user to a specific URL after successful login. This can be useful for monitors in NOC team for example so you arrive on a specific dashboard that is maximised."},{"location":"configuration/zabbix-users/#user-media","title":"User Media","text":"<p>The tab ''' Media ''' contains a list of all media that are defined for our user. Media is used for sending notifications to the user. We can click the <code>Add</code> button.</p> <p></p> <p>Adding the media here is not enough to receive notification; we also need to configure our media properly, and we still need to configure actions as well. When pressing the ''' Add ''' button, we get a popup where we can select some information.</p> <p></p> Parameter Description Type A drop down list with the names of all media types. When a media type is disabled it will be in red. Send to Here we can provide contact information. For an email media type it is possible to add several addresses by clicking on '''Add''' below the address field. In this case, the notification will be sent to all email addresses provided. It's also possible to specify recipient name in the Send to field of the email recipient in a format 'Recipient name address1@company.com'. Note that if a recipient name is provided, an email address should be wrapped in angle brackets (&lt;&gt;). UTF-8 characters in the name are supported, quoted pairs and comments are not. For example: John Doe manager@open-future.com and manager@nycdatacenter.com are both valid formats. Incorrect examples: John Doe manager@open-future.com, %%\"Zabbix\\@\\&lt;H(comment)Q&gt;\" zabbix@company.com %%. when active The time when media will be active from monday till sundat, 1-7 and the time from 00:00 till 24:00 for example only in weekends from 6 in the morning till 5 in the evening: 6-7,06-17:00i. This is based on the user his timezone Use if severity A list of checkboxes from the severities you would like to recieve notifications from. Selected severities will be displayed in color. !! Read the warning below!! Status Status of the media we have selected either enabled or disabled ( in use or not ) Warning <p>When selecting the different severity levels, be aware that you have to select <code>Not classified</code> if you want to receive notifications about non-trigger events, like internal events. For more information, check out Event Sources. This is something that is not obvious, and Zabbix documentation could be better at explaining this.</p>"},{"location":"configuration/zabbix-users/#user-permissions","title":"User permissions","text":"<p>When we go to the <code>Permissions</code> tab in our <code>Users</code>, we will get an overview of all permissions our users had in the menu structure. Or when creating a new user, we have the option to select a <code>User Role</code>. Zabbix has four different <code>User Roles</code> built-in. There is a User role, Admin role, Super admin role, and a Guest role.</p> <p>The <code>Guest role</code> is a role with very strict access limitations. Its role is intended for users to access Zabbix without any user account. I never advise using this role unless you know what you are doing. When you open your GUI to users without any authorization, this could leak potential sensitive data like hostnames, IPs, etc.</p> <p>Choosing a <code>User type</code> is one thing; based on the <code>User type</code> we choose, our users will have more or less rights in our main menu. But there is another important part when choosing the <code>User Type</code>. This also has an impact on the rights each user has over host groups. For example, a regular user can only have read rights or no rights. A Zabbix admin user can have full, read-only, or no rights, and a Zabbix Super Admin always has full rights on host groups, and his rights on the host groups cannot be revoked.</p> <p>Here is an overview of every user and his rights:</p> Group rights Zabbix User Zabbix Admin Zabbix Super Admin Read/Write Read Only Full Full Read Only Read Only Read Only Full Deny None None Full Note <p>With all this knowledge, we now know that if we want to create a regular user who also has access to certain parts of the Administration menu, that it's not possible. We can never create a user that has only RO access to certain host groups and RW access to the <code>Administration</code> part. What we could do, however, is create a <code>Super Administrator</code> account and remove access from the menu for certain parts of the <code>Administration</code>menu by creating a special role. There is no limit on the number of roles you can create.</p> Note <p>Also, be aware that when you click on an item on the dashboard on <code>Update</code>, you will see a modal window popup with some options to change the severity, close a problem, etc., so some will be greyed out. This is because the user needs write permissions. For example, a user needs write permissions to close a problem and change the severity level.</p> <p></p> Note <p>With Zabbix 7 Permission checks have been made much faster. This was made possible by making some improvements on how permissions are stored. This should make the frontend faster when when we have permission havy pages to load like the ones with hosts or problems widgets. - New tables have been introduced for the check of non-privileged users. - The new tables will keep hashes (SHA-256) of user group sets and host group sets for each user/host. - Also a new permission table was introduced for storing only the accessible combinations of users and hosts, specified by the hash IDs. - Hashes and permissons are not calculated for Super Admin users.</p>"},{"location":"configuration/zabbix-users/#user-roles","title":"User Roles","text":"<p>User roles have been in Zabbix since version 5.2 and make our lives easier by allowing us to make some custom adjustments to the standard defind user types in Zabbix.</p> <p>When we go to our <code>Permissions</code> tab, we can see a box <code>Role</code>. Press the <code>Select</code> box to see a popup with a list of roles to choose from. There are four standard roles to choose from. You can create your own list of rules by going to the menu <code>Users -&gt; User Roles</code> and create your own limited user.</p> <p>The box is marked with an asterisk in front, so you need to select a user role for every user you create.</p> <p></p> Warning <p>Be aware that no permissions can be added to user roles only permissions can be revoked.</p>"},{"location":"configuration/zabbix-users/#user-groups","title":"User Groups","text":"<p>A user always needs to be member of one or more <code>User groups</code>. We will not set any user rights directly on Users in Zabbix but we do this on User groups. So if a User needs the  permission to view or edit a host or a template then this is set on the <code>User group</code> wich has the permisson to view or edit a host or template group and never on a host or a template directly.</p> <p></p> <p>Zabbix has a few different rights we can use on group level, as we have seen above. To make it easier for you I add them again:</p> Group rights Zabbix User Zabbix Admin Zabbix Super Admin Read/Write Read Only Read/Write Read/Write Read only Read Only Read Only Read/Write Deny None None Read/Write <ul> <li>Read Only : The user has only read access and cannot modify anything.</li> <li>Read/Write : The user can see and edit.</li> <li>Deny: There is not even the options to see any data</li> </ul> <p>When it comes to permissions in Zabbix groups, the highest level will win.  A user that has read and read-write rights on the same host will get read-write permissions. Except for Deny, Deny will always overrule. So if we have a Zabbix <code>Admin</code> user then this user can have Read/Write rights, if we add a host in a hostgroup where our usergroup has read rigths, and the same server is in another hostgroup with Read/Write rights, then our user will have Read/Write permissions on the hosts. However if the same host is only in the <code>Read</code> hostgroup then our user will only have read rights. If we also add host in a Hostgroup where our usergroup has <code>Deny</code> rights then the server will not be visible.</p> <p>Let's have a look at our <code>User groups</code>, for this go to the menu <code>Users -&gt; User groups</code> and click on one of the existing users. I used <code>Guest</code> in this case.</p> <p></p>"},{"location":"configuration/zabbix-users/#user-groups-overview","title":"User Groups Overview","text":"<p>Under the tab <code>User group</code> we see the following options:</p> <ul> <li>User group : A field where we have to specify a unique name. This field in mandatory</li> <li>Users : Here we add users to our group. Users need to exist before we can add them. Just press select or type the name.</li> <li> <p>Frontend Access : How users of the group will authenticate with Zabbix.</p> <ul> <li>System default : The global configure access method</li> <li>Internal : The most easiest way User and Password are configured in Zabbix ( Ignored if HTTP authentication is the global default.)</li> <li>LDAP: LDAP/AD authentication ( Ignored if HTTP authentication is the global default )</li> <li>Enabled : If checked the group is Enabled else it will be Disabled</li> <li>Debug : Activate debug mode for the users in this group More info about debug</li> </ul> </li> <li> <p>The next tab next to <code>User group</code> is the tab <code>Template permissions</code>. Here we can define what <code>User group</code> will have access to what <code>template group</code>. We can define if a <code>User group</code> has read, read-write permissions or if all access must be denied. When selecting a template group don't forget to press the <code>Add</code> button first so that you see the <code>Template group</code> appear in the Permissions box. Then when you are ready confirm again at the bottom of the page with <code>Updqte</code>.</p> </li> </ul> <p></p> <ul> <li>The <code>Hosts permissions</code> tab allows us to specify what <code>User group```` will have what kind of access on the selected</code>Host groups<code>this can again be read, read-write or explicit deny. Just as with the</code>Templates permissions<code>tab don't forget to click</code>Add<code>first and when you are ready defining all the permissions click</code>Update``` at the bottom. The name is a bit confusing as we don't select permissions for a host but a host group.</li> </ul> <p></p> Note <p>If we add multiple lines with the same host group or template group with different permissions Zabbix will apply the strongest permission. Alow be aware that a Super admin user can enforce nested groups to have the same level of permissions as the parent group. It can be done in the host group or template group configuration.</p> <ul> <li>The <code>Problem tag filter</code> allows us to filter problems based on tags and their value. It also allows us to separate the access to host groups from our possibility to see only the problems we want.</li> </ul> <p></p>"},{"location":"configuration/zabbix-users/#lets-do-this-together","title":"Let's do this together:","text":"<p>Let us make three <code>Host groups</code>, go to the <code>Data collection</code> menu -&gt; <code>Host groups</code> and create a Host group for <code>read</code> , <code>read-write</code>, and <code>deny</code>.</p> <p></p> <p>Next step is to create a host and add the host in our three groups. Go to the <code>Data collection</code> menu -&gt; <code>Hosts</code> and press <code>Create host</code> on the right. Add a <code>Host name</code>, the name is not that important and add the three <code>Host groups</code> we just made.</p> <p></p> <p>The only thing we need to do now is create our <code>User</code> and <code>User group</code> and give the correct rights. Go to our menu <code>Users</code> -&gt; <code>Users group</code> and click on the top right to <code>Create user group</code>. Let's call this group our <code>Admin Group</code> as we need a Zabbix <code>Admin</code> that we can give read, read-write and later deny to show this.</p> <p></p> <p>Next go to the tab <code>Host permissions</code> and start typing the name of our group <code>read</code> in the search box or press the <code>Select</code> button and select the correct group. Next before we do anything select also the correct permissions <code>Deny</code> and press the add just below NOT the button. Do this also for the group <code>read-write</code> and <code>deny</code>. If everything looks like in our screenshot then press the <code>Add</code> button</p> <p></p> <p>Now for the final step let's create a user. Go to the menu <code>Users</code> -&gt; <code>Users</code> and create a new user, in the field <code>Username</code> we can add our fictive user with the name Brian. In the <code>Groups</code> box we select our <code>Users group</code> this was <code>Admin Group</code>. Don't forget also to add a Password we need to do this twice. Next go to the tab <code>Permissions</code> and select the role <code>Admin role</code>. You will see directly once selected that our users bridan has read, write and deny on the correct groups. Press <code>Add</code> at the bottom.</p> <p> </p> <p>Now it's time to check if everything is as expected. Our user <code>Brian</code> if all goes well shouldn't have any rights as we explicitly denied accesss. Press <code>Sign out</code> at the bottom left and then login as user <code>Brian</code>. Go to the menu <code>Monitoring</code> -&gt; <code>Hosts</code>. Select all the hosts groups, you should normally only see read, and read-write. Our host group <code>Deny</code> is not visible and our host <code>postgres</code> is not visible either.</p> <p></p> <p>Now log back in as user <code>Admin</code>, our Zabbix Super Admin and remove the deny group from our <code>Admin group</code>. This can be done by selecting the <code>None</code> permissions for the group <code>Deny</code> in the <code>Host permissions</code> tab from our <code>User group</code>.</p> <p>Log back in as our user Brian go back to the <code>Monitoring</code> menu to <code>Hosts</code>. If all goes well our groups <code>read</code> and <code>read-write</code> are still selected if nog you just select them again. You will see that our host <code>postgres</code> is visisble and that you can click on it to edit the host propreties.</p> <p></p> <p>As final test you can try to remove the group <code>read-write</code> same as we did before with the <code>Deny</code> group. This time only the <code>read</code> group will be visible for our user and Brian will not be able to edit our host <code>postgres</code> anymore.</p>"},{"location":"configuration/zabbix-users/#lets-try-out-tags","title":"Let's try out tags","text":"<p>Now let's add tags into the mix. Imagine that we only like to see problems with a tag <code>read-write</code> and value <code>off</code>. Go to <code>User groups</code> select our <code>Admin Group</code> again and go to the tab <code>Problem tag filter</code> and fill in the needed tag <code>read-write</code> and value <code>off</code>.   </p> <p></p> <p>Now we need to create a problem for this we will add an item and a trigger to our host <code>postgres</code>. Go to the menu <code>Data collection</code> -&gt; <code>Hosts</code> and click on items behind our host <code>postgres</code>. On the top right you will see a button <code>Create item</code> click on it and fill in the same data as in the screenshot below. Don't worry if you don't understand anything we will come to items later.</p> <p></p> Note <p>In this item we just tell our Zabbix server to do a ping to IP <code>192.168.10.1</code> make sure this IP doesn't exist in your lan so try to ping it first to be sure you don't get a reply back. If you do get a reply back change the IP with some address that is not pingable for you.</p> <p>Next step once you have filled in all the data is to save the item and click on top on Triggers. You will also notice now that there is a <code>1</code> next to Items. This indicates that we have made 1 item on our host <code>postgres</code>. Now that we are in the trigger tab click in the top right corner on the button <code>Create trigger</code>. Once again copy over all the data from the screenshot and save the trigger. If you changed the IP in the item make sure you use same IP in the trigger.</p> <p></p> <p>Next let's add a tag on our host <code>postgres</code> that tells Zabbix to mark everything on the host with a tag <code>read-write</code> and value <code>on</code>. Remember we added a value <code>off</code> in our <code>User group</code> problem tag filter tab. So we only want to see everything with a tag <code>read-write</code> and value <code>off</code>.</p> <p></p> <p>When you go now to the <code>Problem</code> page in the menu <code>Monitoring</code> you should see after some time a warning that there is a problem on our host postgres. You will also see that the problem got a tag read-write with value <code>on</code>.</p> <p></p> <p>You can clearly see that under our <code>Zabbix super admin</code> user the problem is visible. Now do the same but as user <code>Brian</code>. You will notice that there is no visible problem for our user even he has <code>read-write</code> access to the hostgroup where our server <code>postgres</code> belongs to.</p> <p>Now as user <code>Brian</code> I would like to see the problem so let's go to our menu <code>Data collection</code> and click on our host <code>postgres</code>. Go to the <code>Tags</code> tab and change the value from our tag <code>read-write</code> from on to <code>off</code>. So now everything on our host should get the tags <code>read-write</code> with value <code>off</code>. So now Brian should be able to see the problem right ?  Sadly <code>Brian</code> is still not able to see the problem in our Problem page. This is because the problem was already created in Zabbix and has already received the tag. So the only way to fix this is to close the problem first and let Zabbix create a new problem again.</p> <p>As <code>Super Admin</code> log back in and go to our trigger <code>Ping</code> and mark the box <code>Allow manual close</code> and press <code>Update</code>. Go back to the dashboard and behind the problem ping you will see <code>Update</code>. Click on it and selec the option <code>Close problem</code> and press <code>Update</code>.</p> <p></p> <p>Log back in as our user <code>Brian</code> and go to the problem dashboard. We will see that the problem is back. Even we closed the problem before Zabbix opened a new problem because the issue was not resolved. This time our issue has the tag with the correct value.</p> <p></p> Note <p>A Zabbix user needs to be created with a user role. You cannot create one without. </p> Warning <p>Be careful if you use the API at the time of writing it's possible to create a Zabbix user with the API without a role. When created by the API the user can even be saved by the frontend afterwards !</p> Info <p>More information can be found in the online Zabbix documentation here</p>"},{"location":"data-collection/zabbix-agent/","title":"Zabbix Agent","text":"<p>In this topic we will talk about the Zabbix agent. The Zabbix agent is a native agent made by Zabbix that we can deploy on different Operating Systems and that supports a wide range of build-in items keys. Zabbix has 2 agents we have the <code>Zabbix agent</code> and we have the <code>Zabbix agent 2</code> So when you read in this book about the <code>Zabbix agent</code> we talk about the 1<sup>st</sup> agent. This can sound a bit weird having 2 agents but it's not. The agent was developed years ago when zabbix was first released and is written in C the agent 2 is written in GO and is developed next to the Agent 1. We will see later what the advantages and disadvantages are of both and give you tips to choose the agent that fits best for you. To make things more complex both agents can be configure to work in <code>active</code> or in <code>passive</code> mode or in both. When we create an item on our host and we want to use the item that works with our Zabbix agent we have 2 options to choose from.</p> <p></p> <p>We can create items that are active or passive depending on how our agent has been configured. A zabbix agent can either be active or passive or both active and passive.</p> Note <p>Zabbix 7.0 is backwards compatible with agents back to 1.4 but of course newer item keys added after 1.4 will not be recognized in those older agents. So if you like to use the new items keys it's best to upgrade your agents when you can.</p> <p>Sometimes there are cases when the item keys provided by Zabbix are just not enough.</p> <p>In this case it's possible to extend our agents with UserParameters. This allows us to extend the agent with our own keys based on scripts that we make to extend our agents. This is something we cover in the topic <code>UserParameters</code>.</p> <p>Zabbix has a huge list of items keys it supports on linux but when we select our item keys we have to careful read the documentation careful as some items keys are OS specific. For example there are item keys that only work on MS Windows.</p> <p>https://www.zabbix.com/documentation/7.0/en/manual/config/items/itemtypes/zabbix_agent/win_keys</p> <p>Some item keys can only be used on the new Agent 2.</p> <p>https://www.zabbix.com/documentation/7.0/en/manual/config/items/itemtypes/zabbix_agent/zabbix_agent2</p> <p>Here is a list of the item keys that will work on Linux. But also here be careful as some things can be different depending on the OS or the kernel version.</p> <p>https://www.zabbix.com/documentation/7.0/en/manual/config/items/itemtypes/zabbix_agent</p> <p>When we want to add an item we can either lookup the item in the online documetation, try to remember it and just write it in the box or press the select button next to the item field. This will give a popup with a short explanation about what the items does.</p> <p></p> <p>However you will see that it's lacking lots of information. My advice is to use the online documentation.</p> <p>So in this topic we will explain you all the differences :</p> <ul> <li>Zabbix Agent (Legacy)</li> <li>Zabbix Agent 2</li> <li>Agent vs Agent 2</li> <li>Active Agent</li> <li>Passive Agent</li> <li>Active vs Passive</li> <li>Zabbix agent Linux</li> <li>Zabbix agent Windows</li> </ul>"},{"location":"data-collection/zabbix-agent/#zabbix-agent-legacy","title":"Zabbix Agent (Legacy)","text":"<p>Our Zabbix agent or the legacy agent can run on a whole set of supported platforms. At the time of writing the agent on Zabbix 7 supports:</p> <ul> <li>Linux (Redhat, Suse, Ubuntu, Debian, Rocky, Alma, ...)</li> <li>FreeBSD</li> <li>Windows</li> <li>MacOS</li> <li>Raspberry Pi</li> <li>HPUnix</li> <li>OpenBSD</li> <li>AIX</li> <li>Solaris</li> </ul> Info <p>A full up to date list can be found here https://www.zabbix.com/download</p> <p>The agent can be installed on a host to collect data from that host or from an application running on that host. The advantage is that the agent has a very small footprint and that we can extend the agent by creating our own scripts. Agents can work in active or in passive mode or can do this in both ways simultaniously.</p> <p>The legacy agent can be extended with modules that are written in C. More information about modues can be found in the Zabbix documentation https://www.zabbix.com/documentation/7.0/en/manual/extensions/loadablemodules.</p> <p>The Zabbix agent will run with limited privileges and user <code>zabbix</code>. With the legacy agent this can be changed easy if you want.</p> <p>In the config file there is an option <code>User=zabbix</code> that can be changed. This however will not work if you are like 99% running on an OS that uses SystemD. Same it's not possible to run the agent with <code>root</code> privileges by enabeling the option <code>AllowRoot</code>. Changing these options will only work on non SystemD systems.</p> <p>What we need to do is change the SystemD service for our <code>zabbix-agent</code>.</p> <p><code>systemctl edit zabbix-agent</code></p> <p>Next we have to add the following content. If you like to run as another user then root then just create an account and replace root with this account.</p> <pre><code>[Service]\nUser=root\nGroup=root\n</code></pre> <p>Exit the file and save it. We now have to tell SystemD to reload the config by running the next command.</p> <pre><code>systemctl daemon-reload\n</code></pre> <p>The only thing that rests us now is restarting the <code>zabbix-agent</code> so that it picks up the config changes.</p> <pre><code>systemctl restart zabbix-agent\n</code></pre> Warning <p>Running the Zabbix agent under root privileges is not recommended. It's a high security risk but in some cases it is maybe needed and then this is your only solution. </p> Note <p>The agent will inculde by default all the files under /etc/zabbix/zabbix_agentd.d/ with extension .conf. Its good practice to not edit the standard config file and just add your changes in a dedicated file in this folder.</p>"},{"location":"data-collection/zabbix-agent/#zabbix-agent-2","title":"Zabbix Agent 2","text":"<p>The Zabbix Agent2 is the new generation of agent and is written in GO. Because of this i's not possible to install the Agent 2 on systems like BSD or HPUniX. At the moment there are only clients for linux and Windows.</p> <p>Since </p> Info <p>A full up to date list can be found here https://www.zabbix.com/download If your OS supports GO and there are no packages you could always try to download the source and compile it by your own.</p> <p>Our agent 2 can be extended with plugins just like the Agent was extensible with modules. However plugins are way more advanced then the modules on agent 1 and there is already an extensive list of modules that are supported. The full list can be found here https://www.zabbix.com/documentation/7.0/en/manual/appendix/config/zabbix_agent2_plugins.</p> <p>Running the Agent2 under root or another non privilege account is more or less the same as with the legacy agent. This agent only runs on Linux systems with SystemD.</p> <p><code>systemctl edit zabbix-agent2</code></p> <p>Next we have to add the following content. If you like to run as another user then root then just create an account and replace root with this account.</p> <pre><code>[Service]\nUser=root\nGroup=root\n</code></pre> <p>Exit the file and save it. We now have to tell SystemD to reload the config by running the next command.</p> <pre><code>systemctl daemon-reload\n</code></pre> <p>The only thing that rests us now is restarting the <code>zabbix-agent</code> so that it picks up the config changes.</p> <pre><code>systemctl restart zabbix-agent2\n</code></pre> <p>The plugins have their own timeout settings and the agent will do a compatibility check when it starts up.</p> <p>Another advantage of the agent2 is that it supports scheduled and flexible intervals for active and for passive checks. Something that is not possible with the agent.</p> <p>Plugins can execute tasks in parallel and scaling up to 1000 workers per plugin. Every plugin has it's own set of configuration parameters. The syntax used for this is <code>Plugins.&lt;PluginName&gt;.&lt;Parameter&gt;=&lt;Value&gt;. As example the plugin to configure the logging of remote commands looks like</code>Plugins.SystemRun.LogRemoteCommands=0```.  Some of the plugins even work with together with templates. This makes it easy so configure some settings by changing macro values in the templates. Some more advanced parameters can then still be adjusted in the config of the plugin.</p> Warning <p>Running the Zabbix agent under root privileges is not recommended. It's a high security risk but in some cases it is maybe needed and then this is your only solution.</p> Note <p>The agent will inculde by default all the files under /etc/zabbix/zabbix_agent2.d/ with extension .conf. Its good practice to not edit the standard config file and just add your changes in a dedicated file in this folder.</p>"},{"location":"data-collection/zabbix-agent/#agent1-vs-agent2","title":"Agent1 vs Agent2","text":"Parameter Agent Agent 2 Programming language C Go and some parts in C Linux daemonization Yes By systemd only Run as Windows service Yes Yes Supported extensions Loadable Modules in C Plugins in Go Supported platforms All Linux, Window, any OS with GO Concurrency Active checks are executed sequentialy All check executed concurrently Scheduled/flexible intervals Passive check only Acive and Passsive checks Persistent storage No Yes (SQLite3) Timeout settings On agent level only Plugins can override the timout Changes user at runtime Yes (on Unix like sytems only) No (controlled by SystemD Cipersuits user configurable Yes No Info <p>For more details bout the differences check the official documentation. https://www.zabbix.com/documentation/6.0/en/manual/appendix/agent_comparison</p> <p>We can detect the generation from the agent by using the <code>agent.variant</code> item key this will return us 1 for the legacy agent and 2 for agent2. agent.variant</p>"},{"location":"data-collection/zabbix-agent/#active-agent","title":"Active Agent","text":""},{"location":"data-collection/zabbix-agent/#passive-agent","title":"Passive Agent","text":""},{"location":"data-collection/zabbix-agent/#active-vs-passive","title":"Active vs Passive","text":""},{"location":"data-collection/zabbix-agent/#userparameters","title":"UserParameters","text":""},{"location":"data-collection/zabbix-agent/#zabbix-agent-linux","title":"Zabbix agent Linux","text":"<p>The agent can be installed on Linux in different ways. The most easy way however is probably installing the agent from Package.</p> <p>Most of the popular operating systems are supported by Zabbix and installation instrucations are provided on the Zabbix webpage when you go to https://www.zabbix.com/download</p> <p>Here we just have to choose that we like to install from Zabbix packages and choose our OS and the version. Then we just need to follow the instructions to add the repository to our OS. From here we can install the Agent.</p> <p></p> <p>After selecting the correct settings we get to see the instructions how to add our repo to the OS.</p> <p></p> <p>In case your OS was not in the list there is still the option to download the agents pre compiled. Choose <code>Zabbix agents</code> and select your correct kernel version.</p> <p></p> <p>Then select the Zabbix release and press <code>Download</code> to get a binary version.</p> <p></p> <p>If all this fails then there is still the option to download the source and compile the agent yourself.</p> <p>The Agent can be installed from the reposity with <code>dnf install zabbix-agent</code> after the installation the configuration files can be found at <code>/etc/zabbix/zabbix_agentd.conf</code>. The log files will be written in <code>/var/log/zabbix_agentd.log</code> by default.</p> <p>The Agent2 can be installed from our repository with <code>dnf install zabbix-agent2</code>. After the installation, the configuration files can be found at <code>/etc/zabbix/zabbix_agent2.conf</code>. The log files will be written in <code>/var/log/zabbix_agent2.log</code> by default.</p>"},{"location":"data-collection/zabbix-agent/#zabbix-agent-windows","title":"Zabbix agent windows","text":""},{"location":"extra-monitoring/IPMI-monitoring/","title":"IPMI Monitoring","text":"<p>We have already seen a few ways to monitor with Zabbix what we havent seen yet is monitoring with IPMI.  IPMI stands for <code>Intelligent Platform Management Interface</code> and is usually an extra interface in your hardware that needs to be added. It's a set of standard specification for hardware platforms that allows to control and monitor the hardware.</p> <p>An IPMI system has several key components:</p> <ul> <li>BMC (Baseboard management controller) : This is a microcontroller that monitors and manages the hardware of the system independently even when the server is offline.</li> <li>IPMB (Intelligent platform management bus) : This is a framework that allows interactions between all the IPMI components. This is the most important part for us as it has a key role in system monitoring by supporting sensor data collection and the execution of control commands.</li> <li>IPMI Memory : All sensor data, configuration settings and event logs will be stored in memory to make it easier to run diagnostics during failures when the server is offline.</li> <li>Dedicated management network : This network is designed explicitly for IPMI traffic, providing a reliable channel of communication with the BMC.</li> </ul> <p>The features that are provided by IPMI are:</p> <ul> <li>Out-of-band management:  A feature that enables the remote management of servers independently of the operating system and it's status. It is neededfor performing firmware updates, troubleshooting, and executing recovery procedures without the need for direct physical access to the hardware.</li> <li>Hardware monitoring : IPMI provides real-time information  of critical system parameters, like temperature, voltage, fan speed, power consumption, disk health, .... . By monitoring these metrics, IPMI can help to quicklyidentify and address potential issues before they escalate.</li> <li>Event logging: The System Event Log (SEL), records system events, this will offering valuable resources for post-event analysis and troubleshooting.</li> <li>Remote power control: This offers administrators control over the equipment's power state from a distance. It maes it easy to turn devices on/off, performing resets, and cycling power for system management and recovery.</li> <li>Virtual media: IPMI enables mounting remote storage devices as though they were physically connected to the server, this makes remote installations more easy.</li> <li>Security features: IPMI includes security to authenticate user identity and control access permissions. This ensures only authorized users can access.</li> </ul> Note <p>When writing, the landscape of IPMI is defined by two prominent versions: 1.5 and 2.0. Although both versions are in active use, IPMI 2.0 is distinguished by its advanced features, heightened security measures, and superior performance, making it the preferred option for modern server management.</p> <p>In this chapter you will learn how to :</p> <ul> <li>Configuring an IPMI device</li> <li>Configure Zabbix to monitor an IPMI device</li> <li>Setting up an IPMI item</li> <li>Configure LLD with IPMI</li> <li>Monitor discrete sensors</li> </ul>"},{"location":"extra-monitoring/IPMI-monitoring/#configuring-an-ipmi-device","title":"Configuring an IPMI device","text":"<p>Usually you need some hardware device with an IPMI interface. This can be for example a iDrac interface from DELL or an ILO interface from HP. Every hardware vendor has some card based on IPMI but names can be vendor specific</p> <p>If you don't have a hardware device that supports open IPMI don't worry you can install an ipmi simulator. It does not provide any network information but provides the basic functionality to play with.</p> <p>To Install the container run the following commands:</p> <pre><code>sudo dnf install podman\nsudo podman pull vaporio/ipmi-simulator\nsudo podman run --name ipmi_simulator --publish 623:623/udp docker.io/vaporio/ipmi-simulator:latest\nsudo dnf install ipmitool\n</code></pre> <p>Once done everything should be up and running and we can test to see if we can connect to it .</p> <pre><code>ipmitool -H 127.0.0.1 -U ADMIN -I lanplus -P ADMIN chassis status\n</code></pre> <p>if you like to do it from another VM that is also possible we will have to do it later from our Zabbix server anyway but then don't forget to open the firewall port 623/udp.</p> <pre><code>firewall-cmd --add-port=623/udp --permanent\nfirewall-cmmd --reload\n</code></pre> Note <p>It's good to know that IPMI is not free from security problems. Intel , Dell, HP , ... even encourage not to use it and we should not expect any updates on the IPMI specifications in the future. https://www.intel.com/content/www/us/en/products/docs/servers/ipmi/ipmi-home.html?wapkw=ipmi</p>"},{"location":"extra-monitoring/IPMI-monitoring/#configure-zabbix-to-monitor-an-ipmi-device","title":"Configure Zabbix to monitor an IPMI device","text":"<p>Before we can start configuring items in Zabbix we need to configure the Zabbix server to start some IPMI pollers. This can be done in the <code>zabbix_server.conf</code> file. Zabbix relies on the OpenIPMI library to monitor IPMI. So to get things started let's edit <code>/etc/zabbix/zabbix_server.conf</code> and change the line <code># StartIPMIPollers=0</code>.</p>"},{"location":"extra-monitoring/IPMI-monitoring/#setting-up-an-ipmi-items","title":"Setting up an IPMI items","text":"<p>Before we can dive into Zabbix and start adding items we need to be sure we have access to our IPMI. IPMI makes use of port 623 and works on top of UDP, so it's in the OSI 5-7 range so we need to be sure there is no firewall blocking this port. Make sure you have enough pollers in the <code>zabbix_server.conf</code>  for example <code>StartIPMIPollers=3</code> and dont forget to restart the server.</p> <p>We can test the access to the IPMI console with the following command:</p> <pre><code>ipmitool -U &lt;User&gt; -H &lt;IP address of the IPMI host&gt; -I lanplus -P &lt;password&gt; -L user sensor\n</code></pre> <p>The -L is to give user access so that we dont need any administrative privileges. The <code>lanplus</code> option instructs our ipmitool to use the IPMI 2.0 Lan interface and the sensor queries the host for a list of available sensors. You could launch the command without the word sensor then the command will return you a list of options to choose from.</p> <p>+??? info     We have used the openipmi tool so far to query the IPMI interface Zabbix however uses the OpenIPMI library for this. So a working ipmitool is not guarantee that Zabbix will work or vice versa. Also if you use the container for testing then the last command will not work as the test container is rather limited in what it can do. For more options check out the webpage of the owner https://github.com/vapor-ware/ipmi-simulator.</p> <p>Let us launch the following command to see the Power status of our machine:</p> <pre><code># ipmitool -H 192.168.0.23 -U ADMIN -I lanplus -P ADMIN chassis power status\nUnable to Get Channel Cipher Suites\nChassis Power is \n</code></pre>"},{"location":"extra-monitoring/IPMI-monitoring/#_1","title":"IPMI Monitoring","text":""},{"location":"extra-monitoring/IPMI-monitoring/#configure-lld-with-ipmi","title":"Configure LLD with IPMI","text":""},{"location":"extra-monitoring/IPMI-monitoring/#monitor-discrete-sensors","title":"Monitor discrete sensors","text":""},{"location":"extra-monitoring/SNMP-monitoring/","title":"SNMP Monitoring","text":"<p>In this topic we will explain you how to monitor devices over SNMP.</p>"},{"location":"extra-monitoring/SNMP-traps-monitoring/","title":"SNMP trap monitoring","text":"<p>If you have been reading previous topic about SMNP monitoring then you know by now that SNMP monitoring is all about polling information form a device. However there is another way to gather information from a device with SNMP that does not expect us to poll for information but that accepts information being sent from the SNMP device to our Zabbix server or Proxy. This is what we call SNMP traps.</p> <p>Traps are sent from a device to our Zabbix server or proxy and usually are only being sent when there is a change in the status of a device. Traps also dont use TCP but are being sent over UDP to port 162. So why would we use traps as we already can poll SNMP devices ?</p> <p>Well first of all let's imagine there is a short fluke in the power of your switch for only a second. This would never be noticed by Zabbx as we usually poll an item once per minute or even less. If we had to poll every second it would create a huge load on the device and we would maybe overload it and we would need also a more beefy Zabbix server if we had to to this for every item.</p> <p>A trap is sent when a problem is detected so this is extra data that else would probably be missed by Zabbix. There are of course some disadvantages with traps else we would only use traps and never poll for problems. The problem with traps is that they are sent over UDP and the problem with UDP is that packages are being sent without waiting for any acknowledgement that they have arrived at the destination. It's a bit like talking to your wife not even knowing she is in the same room and then thinking she has understood you.</p> <p>We all know how that works out ....</p> <p>So the best way to monitor SNMP devices is probably an implementation of both SNMP polling and SNMP traps.</p> <p>There is one small problem that is not really a problem but complicates things a bit and that is that Zabbix has no build in trap receiver. Zabbix can use SNMP traps but it needs to rely on the OS for this and so we need to install snmptrapd to catch traps when they are bein sent to our Zabbix server/proxy .</p> <p>Once we have catched the trap we need to process the trap to make it readable by Zabbix and for this there are 2 ways:</p> <ul> <li>We can make use of a script usually a perl script that is delivered with the sourcecode from Zabbix or a bash script</li> <li>by making use of SNMPTT.</li> </ul> <p>Since there are 2 solutions it makes sense that they both have advantages and disadvantages as you probably already know.</p> <ul> <li>The perl/bash script is the most easy solution and quit performant but more difficult to make customizations so less flexible.</li> <li>The SNMPTT,snmptrapfmt, ...  is more complex but give more flexiblity.</li> </ul> <p>This table will give us a short overview of the differences between the 2 solutions:</p> Perl Script SNMPTT MIBS Not Required Required Trap formatting Script Config file Trap matching snmptrap[\"PCRE\"] snmptrap[\"PCRE\"] Unknown traps snmptrap.fallback Configuration file Acc or reject trap No Yes Search and replace No Yes <p>The perl script is the most easy way so if you don't need any of the fancy features that are not possible with the perl script it's probably best to stick to this script. In this book we will cover the script. The other way is more or less the same but you will have to do some tuning yourself on the config of SNMPTT or other solution.</p> <p>The script can be found in the source code. You can download the source here. Once downloaded you can find the perl script in the folder <code>/misc/snmptrap/zabbix_trap_receiver.pl</code> If you can not use perl you can find the bash script in the same location.</p>"},{"location":"extra-monitoring/SNMP-traps-monitoring/#setting-up-snmptraps","title":"Setting up snmptraps","text":"<p>Now that we know a bit more about snmptraps let's set it up and configure our Zabbix server. Traps are sent to the zabbix server so in case we have a proxy insteqd of the zabbix server we need to send traps to the proxy.</p> Warning <p>At this moment Zabbix has loadbalancing for proxies implemented but there is no support for SNMP traps in this case. So only the active proxy will accept traps.</p>"},{"location":"extra-monitoring/SNMP-traps-monitoring/#configure-snmp-traps-on-our-system-with-snmptrapd","title":"Configure SNMP traps on our system with snmptrapd","text":"<p>First thing first we will have to open our firewall if we want to accept traps. Traps are being sent over UDP and arrive on port 162 so let's open a port.</p> <pre><code># firewall-cmd --add-port=162/udp --permanent\n# firewall-cmd --reload\n</code></pre> <p>Next we need to install the net-snmp, net-snmp-utils package and the net-snmp-perl package for our perl script to work with snmptrapd.</p> <pre><code>dnf install -y net-snmp net-snmp-utils net-snmp-perl\n</code></pre> <p>Copy our zabbix_trap_receiver file to /usr/bin/ and make it executable</p> <pre><code># cp zabbix_trap_receiver.pl /usr/bin/.\n# chmod +x /usr/bin/zabbix_trap_receiver.pl\n</code></pre> <p>We can now configure <code>snmptrapd</code>  and tell our server what traps it should accept.</p> <pre><code># vi /etc/snmp/snmptrapd.conf\nadd the following line\n</code></pre> <pre><code>authCommunity execute public\nperl do \"/usr/bin/zabbix_trap_receiver.pl\";\n</code></pre> <p>This line will tell our <code>snmptrapd</code> to accept all the traps that are being sent to our device with the community string set as public. so please adapt it to your needs.</p> <p>We also need to tell our Zabbix server to start up the trapper process this can be done in the configuration file of the server. Edit the following file </p> <pre><code># vi /etc/zabbix/zabbix_server.conf\n</code></pre> <p>And look for the line with the parameter <code>StartSNMPTrapper=</code> and make sure that the line is active by removing the # in front and replace <code>0</code> with <code>1</code> so that Zabbix knows it needs to activate the trapper for SNMP</p> <pre><code>StartSNMPTrapper=1\n</code></pre> <p>There is another parameter that we need to configure and that is <code>SNMPTrapperFile=</code>. Same here make sure that the line is active by removing the <code>#</code> in front and poit to the location of the location where Zabbix can read the traps that are written by our perl script. If it's not the same then adapt the script or zabbix_server.conf file so thqt in both files the location point to the same path: The perl script will write with trap information in this file and Zabbix server will look for this file to read the information.</p> <pre><code>SNMPTrapperFile=/var/log/snmptrap/snmptrap.log\n</code></pre> <p>Make sure the folder exists</p> <pre><code>mkidr /var/log/snmptrap/\n</code></pre> <p>Once everything is done restart the Zabbix server so that it picks up the config changes.</p> <pre><code># systemct restart zabbix-server\n</code></pre> <p>Also enable <code>snmptrapd</code> and make sure it starts at boot.</p> <pre><code># systemctl enable snmptrapd --now\n</code></pre> <p>There is one thing we need to do extra and that is to configure log rotate. Snmptrapd will sent traps to the <code>/var/log/zabbix_traps.tmp</code> file and the file weill keep growing and growing so we need to make sure logrotate will cleanup from time to time.</p> <p>Zabbix is not managing the trap file so we need to create the logrotate config for our trap file else it will keep growing over time</p> <pre><code># vi /etc/logrotate.d/zabbix_traps\n</code></pre> <p>Copy following content in to this file and adqpt to your own needs.</p> <pre><code>/var/log/snmptrap/snmptrap.log { \n   weekly \n   size 10M \n   compress \n   notifempty \n   dateext \n   dateformat -%Y%m%d \n   olddir /var/log/snmptrap/\n   maxage 365 \n   rotate 10 \n} \n</code></pre>"},{"location":"extra-monitoring/SNMP-traps-monitoring/#testing-if-traps-are-received","title":"Testing if traps are received","text":"<p>To see if we can receive traps let's run a few tests on our system. In case things don't work as expected verify every step again  see that snmptrapd is calling the perl script on the correct location ,verify that your community names are correct, make sure snmptraps are active in the Zabbix server configureation. And in your perl script check that file will be written to the correct folder and that the script is executable.</p> <pre><code>- # snmptrap -v 1 -c public 127.0.0.1 '.1.3.6.1.6.3.1.1.5.4' '0.0.0.0' 6 33 '55' .1.3.6.1.6.3.1.1.5.4 s \"enp0s1\"\n</code></pre> <p>If all goes well we should now see in our log file the trap </p> <pre><code># cat snmptrap.log\n\n2024-06-08T19:03:08+0200 ZBXTRAP 127.0.0.1\nPDU INFO:\n  messageid                      0\n  requestid                      0\n  version                        0\n  community                      public\n  notificationtype               TRAP\n  errorstatus                    0\n  receivedfrom                   UDP: [127.0.0.1]:32790-&gt;[127.0.0.1]:162\n  errorindex                     0\n  transactionid                  5\nVARBINDS:\n  DISMAN-EVENT-MIB::sysUpTimeInstance type=67 value=Timeticks: (55) 0:00:00.55\n  SNMPv2-MIB::snmpTrapOID.0      type=6  value=OID: IF-MIB::linkUp.0.33\n  IF-MIB::linkUp                 type=4  value=STRING: \"enp0s1\"\n  SNMP-COMMUNITY-MIB::snmpTrapCommunity.0 type=4  value=STRING: \"public\"\n  SNMPv2-MIB::snmpTrapEnterprise.0 type=6  value=OID: IF-MIB::linkUp\n</code></pre> <p>We can now do the same for a snmp trap v2</p> <pre><code>- # snmptrap -v 2c -c public localhost '' 1.3.6.1.4.1.8072.2.3.0.1 1.3.6.1.4.1.8072.2.3.2.1 i 123456\n</code></pre> <p>This should return the following information</p> <pre><code># cat snmptrap.log\n\n2024-06-08T19:03:08+0200 ZBXTRAP 127.0.0.1\nPDU INFO:\n  messageid                      0\n  requestid                      0\n  version                        0\n  community                      public\n  notificationtype               TRAP\n  errorstatus                    0\n  receivedfrom                   UDP: [127.0.0.1]:32790-&gt;[127.0.0.1]:162\n  errorindex                     0\n  transactionid                  5\nVARBINDS:\n  DISMAN-EVENT-MIB::sysUpTimeInstance type=67 value=Timeticks: (55) 0:00:00.55\n  SNMPv2-MIB::snmpTrapOID.0      type=6  value=OID: IF-MIB::linkUp.0.33\n  IF-MIB::linkUp                 type=4  value=STRING: \"enp0s1\"\n  SNMP-COMMUNITY-MIB::snmpTrapCommunity.0 type=4  value=STRING: \"public\"\n  SNMPv2-MIB::snmpTrapEnterprise.0 type=6  value=OID: IF-MIB::linkUp\n2024-06-08T19:05:31+0200 ZBXTRAP 127.0.0.1\nPDU INFO:\n  notificationtype               TRAP\n  community                      public\n  messageid                      0\n  requestid                      2002881661\n  version                        1\n  transactionid                  6\n  errorindex                     0\n  receivedfrom                   UDP: [127.0.0.1]:53810-&gt;[127.0.0.1]:162\n  errorstatus                    0\nVARBINDS:\n  DISMAN-EVENT-MIB::sysUpTimeInstance type=67 value=Timeticks: (218161) 0:36:21.61\n  SNMPv2-MIB::snmpTrapOID.0      type=6  value=OID: NET-SNMP-EXAMPLES-MIB::netSnmpExampleHeartbeatNotification\n  NET-SNMP-EXAMPLES-MIB::netSnmpExampleHeartbeatRate type=2  value=INTEGER: 123456\n</code></pre> <p>First trap has sent us the name of our networkcard the second trap has sent us the value <code>123456</code>.</p>"},{"location":"extra-monitoring/SNMP-traps-monitoring/#create-a-trap-item-in-zabbix","title":"Create a trap item in Zabbix","text":"<p>So we have our traps working but there is still something missing. We don't see any traps yet in Zabbix. This is because we have not created an item yet. We still have to tell zabbix to look in our trap file for items that we like to monitor.</p> <p>Zabbix can monitor for specific items like for example the trap with the networkcard we just sent or in case we don't know what exact item will arrive Zabbix has also a fallback option. Let's create both items so that we have an idea how to do this.</p>"},{"location":"extra-monitoring/SNMP-traps-monitoring/#create-a-fallback-item","title":"Create a fallback item","text":""},{"location":"extra-monitoring/SNMP-traps-monitoring/#create-a-specific-item","title":"Create a specific item","text":"<p>Before we can create an item we have to add a <code>SNMP</code> host interface on our host. Go to <code>Data collection</code> -&gt; <code>Host</code> click on the host where you would like to sent the trap to and add a <code>SNMP</code> host interface with the correct IP of your host. In my case I am sending a trap to the zabbix server with the loopback interface as the IP. This will be different for every host. Zabbix will look in your log file and match the IP in the log with the host in your Zabbix setup.</p> <p>Also for this to work you will have to disable <code>SeLinux</code> as it will block or Zabbix server from accessing the log file. So don't forget to fix this afterwards. to temporary disable run <code>setenforce 0</code>.</p> <p></p> <p>Once you have added your SNMP interface go to <code>Data collection</code> -&gt; <code>Hosts</code> and click on items behind the name of your hosts. Let's create or fallback item by clicking on <code>Create item</code> in the upper right corner.</p> <p>When you see the popup to create the new item we have to add a few things copy everything I will explain later what it does.</p> <p>Name : SNMP Fallback Type : SNMP trap Key : snmptrap.fallback Type of information : Numeric Host interface :  <p></p> <p>Go to the tab Preporcessing and fill in the following information for our Preprocessing setp 1:</p> <ul> <li>Name: Regular expression </li> <li>Parameters: INTEGER:.(\\d+)</li> <li>after the parameter field there is another field here you can fill in : \\1</li> </ul> <p></p> <p>So let us explain quick what we just filled in. The name is just the name that will be visible in our latest data page etc for our item. The type we have to select <code>SNMP trap</code> as we are monitoring for incoming SNMP traps. The key is freeform and needs to be unique so we just choose something that makes sense in this case <code>snmptrap.fallback</code> as this item is a catch all item. Type of information I have chosen numeric usually you will want to keep it as text. I have chosen numeric because with preprocessing I will extract a numeric value from our test trap.</p> <p>In the <code>Preprocessing tab</code>  We added a regular expression in Perl this expression will look for the line starting with <code>INTEGER:</code> and the numeric value behind it. by adding ( ) we created a group. the \\1 is a selector for the number of groups we like to extract in this case we have only 1 group so we look for group 1</p> <p>Sent the following trap to your zabbix server and replace the IP with the IP of the hosts you have added. </p> <pre><code>snmptrap -v 2c -c public 127.0.0.1 '' 1.3.6.1.4.1.8072.2.3.0.1 1.3.6.1.4.1.8072.2.3.2.1 i 123456\n</code></pre> <p>Just run the trap on your Zabbix server and have a look in the latest data page of your hosts Monitoring -&gt; Latest data and fill the name in of your <code>host</code> in the <code>Hosts</code> field. In the <code>Name</code> field you can filter for fallback if there are too many items</p> <p></p> <p>Adding a specific SNMP trap item works exactly the same only here we dont use the item key <code>snmptrap.fallback</code> but the item key <code>snmptrap[regex]</code>. So in our case it will be snmptrap[123456].</p> <p>Create the same item as before but don't add any Preprocessing rules this time.</p> <p></p> <p>Let's send the trap again and go to latest data to see what we have received this time.</p> <pre><code>snmptrap -v 2c -c public 127.0.0.1 '' 1.3.6.1.4.1.8072.2.3.0.1 1.3.6.1.4.1.8072.2.3.2.1 i 123456\n</code></pre> <p></p> <p>It looks like something went wrong in latest data we got a warning. This warning as in the screenshot above can be seen when you go with your mouse over the <code>i</code> in red at the end of you item.</p> <p>So what happened here is that Zabbix looks for a regex in this case <code>123456</code> it has found in the trap the value <code>123456</code> and it will show us the complete trap.</p> <p>So we have 2 options here :</p> <ul> <li>We can change the item it's <code>type of information</code> to <code>Text</code> and choose to see the whole trap. or </li> <li>We can add again a Preprocessing step like we did with our fallback and filter for the numbers <code>123456</code>.</li> </ul> <p>Once this is done our items will work.</p>"},{"location":"extra-monitoring/SNMP-traps-monitoring/#working-with-snmpv3-traps","title":"Working with SNMPv3 Traps","text":"<p>If you like to use SNMPv3 devices and protect the traps that are being sent then this is also possible. It works like with SNMPv1 and v2 we just have to change the config in our snmptrapd config and add the following lines.</p> <pre><code>createUser -e &lt;engineid&gt; &lt;user&gt; SHA &lt;key&gt; AES &lt;key&gt;\nauthUser log,execute &lt;user&gt;\nperl do \"/usr/bin/zabbix_trap_receiver.pl\";\n</code></pre> <p>This will make sure snmptrapd will catch our SNMPv3 traps and sent them to our perl script. </p> Note <p>An engine ID should be unique for every device you can't have devices with the same <code>engineid</code> so for every device you will have to add a line in the config file.</p> Tip <p>The PDU info can be removed from the zabbix_trap_reciever.pl in case you dont like it</p> <p>Remove the folowing lines in the perl script or add a <code>#</code> in front :</p> <pre><code>        # print the PDU info\n        print OUTPUT_FILE \"PDU INFO:\\n\";\n        foreach my $key(keys(%pdu_info))\n        {\n                if ($pdu_info{$key} !~ /^[[:print:]]*$/)\n                {\n                        my $OctetAsHex = unpack('H*', $pdu_info{$key}); # convert octet string to hex\n                        $pdu_info{$key} = \"0x$OctetAsHex\";              # apply 0x prefix for consistency\n                }\n\n                printf OUTPUT_FILE \"  %-30s %s\\n\", $key, $pdu_info{$key};\n        }\n</code></pre>"},{"location":"extra-monitoring/SNMP-traps-monitoring/#some-useful-links","title":"Some useful links","text":"<ul> <li>https://www.unix.com/man-page/redhat/8/logrotate/</li> <li>https://www.netreo.com/blog/snmp-traps-definition-types-examples-best-practices/</li> <li>https://www.zabbix.com/documentation/7.0/en/manual/config/items/itemtypes/snmptrap</li> <li>https://net-snmp.sourceforge.io/wiki/index.php/TUT:Configuring_snmptrapd</li> <li>https://net-snmp.sourceforge.io/wiki/index.php/TUT:Configuring_snmptrapd_to_receive_SNMPv3_notifications</li> </ul>"},{"location":"extras/contributors/","title":"Contributors","text":"<p>Thanks to all the contributors to this book for helping me with translations and articles. Let me know if you don't see your name and have contributed to this book.</p> <ul> <li>Bgmot - https://bgmot.com/</li> <li>Jason Drummond - https://www.linkedin.com/in/jason-drummond/</li> <li>David Moreau - https://github.com/david-moreau</li> </ul>"},{"location":"extras/modbus/","title":"Modbus monitoring with Zabbix.","text":""},{"location":"extras/modbus/#introduction","title":"Introduction","text":"<p>MODBUS TCP is a technology that takes MODBUS RTU packets and encapsulates this in a TCP/IP wrapper for communication over a network instead of typical RS485 serial connections. MODBUS as a technology has been around since 1979 and is one of the de-facto industrial application protocols commonly found in HVAC controllers, Generator controllers and a multitude of other PLC devices. Zabbix has the ability to monitor MODBUS using a Zabbix agent. If the Zabbix agent is running on a machine with a serial connection to the Modbus device, this monitoring can be done over serial communications.  If the Modbus device is connected to a TCP/IP network, the Zabbix agent will still be required for sending/receiving commands. TCP port 502 is commonly used for modbus TCP communications.</p> <p>In this example, all generator PLCs are connected to a TCP/IP network.</p> <p></p> <p>Due to the nature of the network used for this example, a Zabbix proxy is also required. In this case the Zabbix proxy server is a docker container on a virtual machine that can reach  both the Zabbix server network and the network the PLC devices are connected too. The Zabbix agent that is needed for the Modbus commands is also running as a docker container on the same virtual machine as the Zabbix proxy server. Different networks may require different solutions. The common element for all networks for Modbus monitoring is there needs to be a Zabbix agent that can interface with the Modbus devices.</p> <p></p> <p>In this screenshot is the initial template creation step. The template group used in this screen shot is templates/power as this example will be using a generator PLC. Templates should be named in a self explanatory way.  If monitoring a Horner XL4 PLC, it would be best to name the template \u201cHorner XL4\u201d</p> <p></p> <p>Before adding in the template, add in a default Macro under the tab macros wich is called {$DEVICE_CONNECTION} and set the value to \u201ctcp://127.0.0.1:502\u201d. Later when adding in hosts, each host that is added in will overwrite this value with the actual value of the connection string for that particular host. This will allow for troubleshooting in the future if communications are not established with a host.</p>"},{"location":"extras/modbus/#template-item-creation","title":"Template Item creation","text":"<p>For a detailed explanation of all the modbus.get parameters see the Zabbix documentation:</p> <p>https://www.zabbix.com/documentation/7.0/en/manual/appendix/items/modbus</p> <p>The item key for modbus.get looks like this:</p> <pre><code>modbus.get[&lt;endpoint&gt;,&lt;slaveid&gt;,&lt;function&gt;,&lt;address&gt;,&lt;count&gt;,&lt;type&gt;,&lt;endianness&gt;,&lt;offset&gt;]\n</code></pre> <p>For creating the template of the item, in this example the following values will be set:</p> <ul> <li>Endpoint \u2013 the protocol/connection string in this example this is set to {$DEVICE_CONNECTION}</li> <li>Slaveid \u2013 for Serial communications, multiple Modbus can be on the same serial connection and this value allows addressing of those devices. For this TCP example, this value will be 1</li> <li>Function \u2013 1 - Read Coil, 2 - Read Discrete Input, 3 - Read Holding Registers, 4 - Read Input Register \u2013 please read Modbus documentation on these 4 different modes.</li> <li>Address \u2013 this is the internal address of the registry to be read. In this example, address 42 is used. This will require in-depth knowledge of the Modbus device to properly determine.</li> <li>Count \u2013 if the function is 1 or 2, then count = 1 bit, for all other cases, (count*type)/2 = real count of registers for reading. To simplify, this is the number of registers to read with this command. </li> <li>Type \u2013 this is the data type to be returned from the Modbus device, for function 1 and 2, this should be set to bit. For function 3 and 4 there is a wide variety of options from bit to double. Please see the Zabbix documentation linked above, also you will need to fully understand your Modbus device and know what data types it returns.</li> <li>Endianness \u2013 does the Modbus device return big endian, little endian, Mid-big endian, or Mid-little endian values? For bit values that are returned the value be for big endian is used here. Again knowledge of the data type returned by the Modbus device is important</li> <li>Offset \u2013 for some Modbus devices that do not support random read access an offset has to be given. This allows the Modbus device to return a data byte, and the correct bit to be selected by Zabbix. The example below allows random read access so Offset is set to 0</li> </ul>"},{"location":"extras/modbus/#example-item-key","title":"Example Item key:","text":"<p>In this example the Modbus device is a generator controller. For this generator controller I have address 42 for a generator AC Fail alarm. This is a coil read operation. The Modbus.get item key will look like this:</p> <pre><code>modbus.get[{$DEVICE_CONNECTION},1,1,42,1,bit,be,0]\n</code></pre> <ul> <li>{$DEVICE_CONNECTION} \u2013 this allows the use of a macro set in the host creation step</li> <li>1 \u2013 Slaveid, for this example, MODBUS TCP is used so this is ignored</li> <li>1 \u2013 Function, for this example, it is a read coil operation</li> <li>42 \u2013 this is the internal address in the Modbus device to be read</li> <li>1 \u2013 Count is set to 1 because this value is a bit for this example</li> <li>bit \u2013 The type of data for the example</li> <li>be \u2013 endianness \u2013 big endianness for bit operations</li> <li>0 \u2013 the offset for this example.</li> </ul>"},{"location":"extras/modbus/#full-item-template-example","title":"Full Item template example","text":"<p>This is the full example of the item creation window. - Name \u2013 Generator AC fail \u2013 this is the name of the item we are creating - Type \u2013 Zabbix agent \u2013 This is used so that the Modbus.get command can be used - Key \u2013 modbus.get \u2013 explained above for this example - Type of information \u2013 In this case the value is either 0 or 1 so we used numeric (unsigned) - Units \u2013 There are no units to assign to this item - Update interval \u2013 15m, this could be quicker if the Modbus device has data at a quicker interval, for this example 15m was used as a proof of concept - Value Mapping \u2013 A map was created called Alarm status where 0 = OK and 1 = Alarm which matches the expected data from this Modbus device</p>"},{"location":"extras/modbus/#host-creation","title":"Host Creation","text":"<p>After creating the template, with all the items to be monitored, the hosts can be created and assigned to the template In this example:</p> <ul> <li>Host name \u2013 Test PLC for this example host</li> <li>Templates \u2013 The generic PLC template from the above example was used</li> <li>Host Group \u2013 Since this will eventually be used for a generator Modbus PLC I have a generator/Modbus host group created</li> <li>Interfaces \u2013 We use a Zabbix Agent interface with a DNS name of the Zabbix agent running on the same virtual machine as the Zabbix Proxy. This is setup due to the network configuration presented above. The Zabbix agent and Zabbix proxy are docker containers on the virtual machine with connections to both the PLC network and the Zabbix server. To communicate with a Modbus device a zabbix agent needs to be used.</li> <li>Monitored by proxy \u2013 The proxy server that will communicate with the Zabbix agent</li> </ul>"},{"location":"extras/modbus/#host-creation-macro-definition","title":"Host Creation \u2013 Macro definition","text":"<p>Before adding the host in, the device connection string needs to be applied. In this case we change {$DEVICE_CONNECTION} to the actual value we will be using for this Modbus device. Doing it this way will allow for the template to be used over and over with different Modbus devices.</p> <p></p>"},{"location":"extras/modbus/#network-diagram-explained","title":"Network Diagram explained","text":"<ol> <li>The Zabbix Server requests the Zabbix proxy to get the item value</li> <li>The Zabbix proxy requests the modbus.get command from the Zabbix agent</li> <li>The Zabbix Agent executes the modbus.get command to the PLC via Modbus TCP in this example</li> <li>The PLC responds to the Modbus TCP command to the Zabbix Agent</li> <li>The Zabbix agent returns the results of the modbus.get query to the Zabbix proxy </li> <li>The Zabbix proxy returns the item value to the zabbix server.</li> </ol> <p>By : Jason Drummond</p>"},{"location":"installation/Requirements/","title":"Requirements","text":"<p>Zabbix has specific hardware and software requirements that must be met, and these requirements may change over time. They also depend on the size of your setup and the software stack you select. Before purchasing hardware or installing a database version, it's essential to consult the Zabbix documentation for the most up-to-date requirements for the version you plan to install. You can find the latest requirements here. Make sure to select the correct Zabbix version from the list.</p> <p>For smaller or test setups, Zabbix can comfortably run on a system with 2 CPUs and 8 GB of RAM. However, your setup size, the number of items you monitor, the triggers you create, and how long you plan to retain data will impact resource requirements. In today\u2019s virtualized environments, my advice is to start small and scale up as needed.</p> <p>You can install all components (Zabbix server, database, web server) on a single machine or distribute them across multiple servers. For simplicity, take note of the server details:</p> Component IP Address Zabbix Server Database Server Web Server Tip <p>Zabbix package names often use dashes (<code>-</code>) in their names, such as <code>zabbix-get</code></p> <p>or <code>zabbix-sender</code>, but the binaries themselves may use underscores (<code>_</code>), like <code>zabbix_sender</code> or <code>zabbix_server</code>. This naming discrepancy can sometimes be confusing, particularly if you are using packages from non-official Zabbix repositories. Always check if a binary uses a dash or an underscore when troubleshooting.</p>"},{"location":"installation/Requirements/#basic-os-configuration","title":"Basic OS Configuration","text":""},{"location":"installation/Requirements/#firewall","title":"Firewall","text":"<p>Before installing Zabbix, it's essential to properly prepare the operating system. The first step is to ensure that the firewall is installed and configured.</p> <p>To install and enable the firewall, run the following command:</p> <pre><code># dnf install firewalld --now\n</code></pre> <p>Once installed, you can configure the necessary ports. For Zabbix, we need to allow access to port <code>10051/tcp</code>, which is where the Zabbix trapper listens for incoming data. Use the following command to open this port in the firewall:</p> <pre><code># firewall-cmd --add-service=Zabbix-server --permanent\n</code></pre> <p>If the service is not recognized, you can manually specify the port:</p> <pre><code># firewall-cmd --add-port=10051/tcp --permanent\n</code></pre> <p>firewalld</p> <p>\"Firewalld is the replacement for iptables in RHEL-based systems and allows changes to take effect immediately without needing to restart the service. If your distribution does not use Firewalld, refer to your OS documentation for the appropriate firewall configuration steps.\"</p>"},{"location":"installation/Requirements/#time-server","title":"Time Server","text":"<p>Another crucial step is configuring the time server and syncing the Zabbix server using an NTP client. Accurate time synchronization is vital for Zabbix, both for the server and the devices it monitors. If one of the hosts has an incorrect time zone, it could lead to confusion, such as investigating an issue in Zabbix that appears to have happened hours earlier than it actually did.</p> <p>To install Chrony, an NTP client, use the following command:</p> <pre><code># dnf install chronyd --now\n</code></pre> <p>Once installed, you can verify that Chrony is enabled and running by checking its status:</p> <pre><code># systemctl status chronyd\n</code></pre> <p>dnf</p> <p>\"dnf is a package manager used in Red Hat-based systems. If you're using another distribution, replace <code>dnf</code> with your appropriate package manager, such as <code>zyper</code>, <code>apt</code>, or <code>yum</code>. Chrony is a modern replacement for <code>ntpd</code>, offering faster and more accurate time synchronization. If your OS does not support Chrony, consider using <code>ntpd</code> instead.\"</p> <p>Once Chrony is installed, the next step is to ensure the correct time zone is set. You can view your current time configuration using the <code>timedatectl</code> command:</p> <pre><code># timedatectl\n               Local time: Thu 2023-11-16 15:09:14 UTC\n           Universal time: Thu 2023-11-16 15:09:14 UTC\n                 RTC time: Thu 2023-11-16 15:09:15\n                Time zone: UTC (UTC, +0000)\nSystem clock synchronized: yes\n              NTP service: active\n          RTC in local TZ: no\n</code></pre> <p>Ensure that the Chrony service is active (refer to the previous steps if needed). To set the correct time zone, first, you can list all available time zones with the following command:</p> <pre><code># timedatectl list-timezones\n</code></pre> <p>This will display a list of time zones, from which you can select the one closest to your location, for example:</p> <pre><code>Africa/Abidjan\nAfrica/Accra\n...\nPacific/Tongatapu\nPacific/Wake\nPacific/Wallis\nUTC\n</code></pre> <p>Once you've identified your time zone, configure it using the following command:</p> <pre><code># timedatectl set-timezone Europe/Brussels\n</code></pre> <p>To verify that the time zone has been configured correctly, use the <code>timedatectl</code> command again:</p> <pre><code># timedatectl\n               Local time: Thu 2023-11-16 16:13:35 CET\n           Universal time: Thu 2023-11-16 15:13:35 UTC\n                 RTC time: Thu 2023-11-16 15:13:36\n                Time zone: Europe/Brussels (CET, +0100)\nSystem clock synchronized: yes\n              NTP service: active\n          RTC in local TZ: no\n</code></pre> Note <p>Some administrators prefer installing all servers in the UTC time zone to ensure that server logs across global deployments are synchronized. Zabbix supports user-based time zone settings, which allows the server to remain in UTC while individual users can adjust the time zone via the interface if needed.</p>"},{"location":"installation/Requirements/#verifying-chrony-synchronization","title":"Verifying Chrony Synchronization","text":"<p>To ensure that Chrony is synchronizing with the correct time servers, you can run the following command:</p> <pre><code># chronyc\n</code></pre> <p>The output should resemble:</p> <pre><code>chrony version 4.2\nCopyright (C) 1997-2003, 2007, 2009-2021 Richard P. Curnow and others\nchrony comes with ABSOLUTELY NO WARRANTY.  This is free software, and\nyou are welcome to redistribute it under certain conditions.  See the\nGNU General Public License version 2 for details.\n\nchronyc&gt;\n</code></pre> <p>Once inside the Chrony prompt, type the following to check the sources:</p> <pre><code>chronyc&gt; sources\n</code></pre> <p>Example output:</p> <pre><code>MS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^- 51-15-20-83.rev.poneytel&gt;     2   9   377   354   +429us[ +429us] +/-  342ms\n^- 5.255.99.180                  2  10   377   620  +7424us[+7424us] +/-   37ms\n^- hachi.paina.net               2  10   377   412   +445us[ +445us] +/-   39ms\n^* leontp1.office.panq.nl        1  10   377   904  +6806ns[ +171us] +/- 2336us\n</code></pre> <p>In this example, the NTP servers in use are located outside your local region. It is recommended to switch to time servers in your country or, if available, to a dedicated company time server. You can find local NTP servers here.</p>"},{"location":"installation/Requirements/#updating-time-servers","title":"Updating Time Servers","text":"<p>To update the time servers, modify the <code>/etc/chrony.conf</code> file. Replace the existing NTP server with one closer to your location.</p> <p>Example of the current configuration:</p> <pre><code># Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\npool 2.centos.pool.ntp.org iburst\n</code></pre> <p>Change it to a local time server:</p> <pre><code># Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\npool be.pool.ntp.org iburst\n</code></pre> <p>After making this change, restart the Chrony service to apply the new configuration:</p> <pre><code># systemctl restart chronyd\n</code></pre>"},{"location":"installation/Requirements/#verifying-updated-time-servers","title":"Verifying Updated Time Servers","text":"<p>Check the time sources again to ensure that the new local servers are in use:</p> <pre><code>chronyc&gt; sources\n</code></pre> <p>Example of expected output with local servers:</p> <pre><code>MS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^- ntp1.unix-solutions.be        2   6    17    43   -375us[ -676us] +/-   28ms\n^* ntp.devrandom.be              2   6    17    43   -579us[ -880us] +/- 2877us\n^+ time.cloudflare.com           3   6    17    43   +328us[  +27us] +/- 2620us\n^+ time.cloudflare.com           3   6    17    43\n</code></pre> <p>This confirms that the system is now using local time servers.</p>"},{"location":"installation/installing-zabbix-ha/","title":"Configure Zabbix HA","text":"<p>In this section, we will set up Zabbix in a High Availability (HA) configuration. This feature, introduced in Zabbix 6, is a crucial enhancement that ensures continued monitoring even if a Zabbix server fails. With HA, when one Zabbix server goes down, another can take over seamlessly.</p> <p>For this guide, we will use two Zabbix servers, but the setup allows for adding more if necessary.</p> <p>It's important to note that Zabbix's HA setup is straightforward, providing redundancy without complex features like load balancing.</p> <p>Just as in our basic configuration, we will document key details for the servers in this HA setup. Below is the list of servers and their respective IP addresses:</p> <p></p> Server IP Address Zabbix Server 1 192.168.0.130 Zabbix Server 2 192.168.0.131 PostgreSQL DB 192.168.0.132 Virtual IP 192.168.0.135 Note <p>Our database (DB) in this setup is not configured for HA. Since it's not a Zabbix component, you will need to implement your own solution for database HA, such as a HA SAN or a database cluster setup. A DB cluster configuration is out of the scope of this guide and unrelated to Zabbix, so it will not be covered here.</p>"},{"location":"installation/installing-zabbix-ha/#installing-postgresql-database","title":"Installing PostgreSQL Database","text":"<p>To set up the Zabbix HA environment, we'll begin by installing the PostgreSQL database. Follow these steps to install PostgreSQL on a Red Hat-based system.</p> Note <p>If you're using a non-x86 architecture or another OS, refer to the PostgreSQL official download page for the correct installation commands.</p> Warning <p>In this exercise, we will simplify the PostgreSQL and OS installation. For detailed configurations and optimizations, review the previous sections of this guide.</p> <ol> <li>Install the PostgreSQL repository:</li> </ol> <p><code>bash    sudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm</code></p> <ol> <li>Disable the built-in PostgreSQL module:</li> </ol> <p><code>bash    sudo dnf -qy module disable postgresql</code></p> <ol> <li>Install PostgreSQL 16:</li> </ol> <p><code>bash    sudo dnf install -y postgresql16-server</code></p> <ol> <li>Initialize the database and enable automatic startup:</li> </ol> <p><code>bash    sudo /usr/pgsql-16/bin/postgresql-16-setup initdb    sudo systemctl enable postgresql-16 --now</code></p> <p>At this stage, PostgreSQL should be installed and running, ready for configuration with Zabbix in an HA setup.</p>"},{"location":"installation/installing-zabbix-ha/#securing-the-postgresql-database","title":"Securing the PostgreSQL Database","text":"<p>PostgreSQL manages access permissions differently compared to MySQL or MariaDB. Specifically, PostgreSQL uses the <code>pg_hba.conf</code> file, which controls who can access the database, from where, and what encryption is used for passwords. To allow the Zabbix frontend and Zabbix server to connect to the PostgreSQL database, we need to configure this file accordingly.</p> <p>First, edit the <code>pg_hba.conf</code> file to specify the access permissions:</p> <pre><code># vi /var/lib/pgsql/16/data/pg_hba.conf\n</code></pre> <p>Update the file to include the following lines:</p> <pre><code># \"local\" is for Unix domain socket connections only\nlocal   all             all                                     trust\n# IPv4 local connections:\nhost    zabbix          zabbix  192.168.0.130/32               scram-sha-256\nhost    zabbix          zabbix  192.168.0.131/32               scram-sha-256\nhost    all             all     127.0.0.1/32                   scram-sha-256\n</code></pre> <p>This configuration permits the Zabbix servers (at IPs <code>192.168.0.130</code> and <code>192.168.0.131</code>) to connect using SCRAM-SHA-256 encryption.</p> <p>Once you\u2019ve updated <code>pg_hba.conf</code>, don't forget to restart PostgreSQL for the changes to take effect. But before doing so, you also need to modify <code>postgresql.conf</code> to allow incoming connections from the Zabbix servers.</p> <p>By default, PostgreSQL listens only on the Unix socket, restricting external connections. To change this, edit the <code>postgresql.conf</code> file:</p> <pre><code># vi /var/lib/pgsql/16/data/postgresql.conf\n</code></pre> <p>Find and modify the <code>listen_addresses</code> line to:</p> <pre><code>listen_addresses = '*'\n</code></pre> <p>This will allow PostgreSQL to listen on all network interfaces, enabling external connections from the Zabbix servers.</p> <p>After making the changes to both configuration files, restart the PostgreSQL service:</p> <pre><code># systemctl restart postgresql-16\n</code></pre> <p>If PostgreSQL fails to restart, check the <code>pg_hba.conf</code> file for any syntax errors or typos.</p>"},{"location":"installation/installing-zabbix-ha/#add-the-zabbix-repository-and-populate-the-db","title":"Add the Zabbix repository and populate the DB","text":"<p>To set up the Zabbix database, you need to add the appropriate Zabbix repository and install the necessary database scripts. Begin by adding the Zabbix repository. Ensure that you select the correct repository for your operating system and Zabbix version by visiting Zabbix download page.</p> <p>For example, on a RHEL-based system:</p> <pre><code># rpm -Uvh https://repo.zabbix.com/zabbix/7.0/rhel/9/x86_64/zabbix-release-latest.el9.noarch.rpm\n</code></pre>"},{"location":"installation/installing-zabbix-ha/#install-the-database-scripts","title":"Install the database scripts","text":"<p>Once the repository is added, install the database scripts:</p> <pre><code># dnf install zabbix-sql-scripts -y\n</code></pre> <p>Next, unzip the database schema files required to create the necessary tables:</p> <pre><code># gzip -d /usr/share/zabbix-sql-scripts/postgresql/server.sql.gz\n</code></pre> <p>At this point, the PostgreSQL database is secured, and the Zabbix database schema is ready to be populated.</p>"},{"location":"installation/installing-zabbix-ha/#creating-the-database-users","title":"Creating the Database Users","text":"<p>With PostgreSQL configured and ready, the next step is to create the Zabbix users. These users will be used by both the Zabbix server and frontend to interact with the database. If you prefer to separate the users for the frontend and the server, refer to the basic installation guide for additional details.</p> <p>To create a new user for the Zabbix server:</p> <ul> <li>Switch to the <code>postgres</code> user:</li> </ul> <pre><code># su - postgres\n</code></pre> <ul> <li>Use the <code>createuser</code> command to create the Zabbix user and assign a password:</li> </ul> <pre><code># createuser --pwprompt zabbix\n</code></pre> <p>You will be prompted to enter a password for the new role:</p> <pre><code>    Enter password for new role: &lt;server-password&gt;\n    Enter it again: &lt;server-password&gt;\n\n    Replace `&lt;server-password&gt;` with a strong, secure password that you will use\n    for the Zabbix server's database connection.\n</code></pre> <p>Once the user is created, this account will be ready to use by both the <code>Zabbix server</code> and frontend (unless you choose to create separate users for each).</p>"},{"location":"installation/installing-zabbix-ha/#populating-the-database","title":"Populating the Database","text":"<p>With the Zabbix user created, we can now set up the Zabbix database. Follow these steps to create and populate the database with the necessary schemas and data.</p> <ol> <li>Create the Zabbix Database</li> </ol> <p>Switch to the <code>postgres</code> user and create the Zabbix database:</p> <pre><code>    # su - postgres\n    # createdb -E Unicode -O zabbix zabbix\n</code></pre> <p>This command creates a new database named <code>zabbix</code>, using Unicode encoding and assigning ownership to the <code>zabbix</code> user.</p> <ul> <li>Populate the Database</li> </ul> <p>Next, connect to the database as the <code>zabbix</code> user and run the SQL script to set up the required schemas, tables, and data. Use the <code>psql</code> command-line tool:</p> <pre><code>    # psql -U zabbix -W zabbix\n    Password:\n    psql (16.2)\n    Type \"help\" for help.\n\n    zabbix=&gt; SELECT session_user, current_user;\n    session_user | current_user\n    --------------+--------------\n    zabbix       | zabbix\n    (1 row)\n</code></pre> <p>Once connected, execute the SQL script:</p> <pre><code>    zabbix=&gt; \\i /usr/share/zabbix-sql-scripts/postgresql/server.sql\n</code></pre> <p>You should see output indicating that tables are being created and data is being inserted:</p> <pre><code>    CREATE TABLE\n    CREATE INDEX\n    CREATE TABLE\n    ...\n    INSERT 0 1\n    DELETE 80424\n    COMMIT\n</code></pre> <ul> <li>Verify Table Ownership</li> </ul> <p>Ensure that the <code>zabbix</code> user owns the tables by listing them:</p> <pre><code>zabbix=&gt; \\dt\n               List of relations\nSchema |            Name            | Type  | Owner\n--------+----------------------------+-------+--------\npublic | acknowledges               | table | zabbix\npublic | actions                    | table | zabbix\n...\n</code></pre> <p>If the tables are correctly owned by the <code>zabbix</code> user, you can exit the <code>psql</code> prompt:</p> <pre><code>    zabbix=&gt; \\q\n</code></pre> <p>The database is now populated and ready for use by the Zabbix server.</p>"},{"location":"installation/installing-zabbix-ha/#configuring-the-firewall","title":"Configuring the Firewall","text":"<p>To complete the setup, you need to configure the firewall to allow incoming connections to the PostgreSQL database from the Zabbix server. By default, the firewall does not permit these connections, so we'll need to open the appropriate ports and define rules.</p> <ul> <li>Create a New Firewall Zone</li> </ul> <p>Create a new firewall zone specifically for PostgreSQL access:</p> <pre><code># firewall-cmd --new-zone=postgresql-access --permanent\nsuccess\n</code></pre> <ul> <li>Reload the Firewall Configuration</li> </ul> <p>Apply the changes by reloading the firewall configuration:</p> <pre><code>    # firewall-cmd --reload\n    success\n</code></pre> <ul> <li>Verify Available Zones</li> </ul> <p>Confirm that the new zone has been added:</p> <pre><code>    # firewall-cmd --get-zones\n    block dmz drop external home internal nm-shared postgresql-access public\n    trusted work\n</code></pre> <ul> <li> <p>Add the Zabbix Server IPs to the New Zone</p> <p>Allow the Zabbix server IP addresses to access the PostgreSQL database. Replace <code>&lt;zabbix-serverip 1&gt;</code> and <code>&lt;zabbix-serverip 2&gt;</code> with the actual IP addresses of your Zabbix servers:</p> </li> </ul> <pre><code>    # firewall-cmd --zone=postgresql-access --add-source=&lt;zabbix-serverip 1&gt; --permanent\n    success\n\n    # firewall-cmd --zone=postgresql-access --add-source=&lt;zabbix-serverip 2&gt; --permanent\n    success\n</code></pre> <ul> <li>Allow PostgreSQL Port</li> </ul> <p>Open port 5432 for TCP connections in the new zone:</p> <pre><code>    # firewall-cmd --zone=postgresql-access --add-port=5432/tcp --permanent\n    success\n</code></pre> <ul> <li>Reload the Firewall Configuration Again</li> </ul> <p>Reload the firewall to apply the new rules:</p> <pre><code>    # firewall-cmd --reload\n</code></pre> <ul> <li>Verify the Firewall Rules</li> </ul> <p>Check that the firewall rules are correctly set up:</p> <pre><code>    # firewall-cmd --zone=postgresql-access --list-all\n</code></pre> <p>Your PostgreSQL server is now configured to accept connections from your Zabbix server. You can proceed with the next task in your Zabbix HA setup.</p>"},{"location":"installation/installing-zabbix-ha/#installing-the-zabbix-cluster","title":"Installing the Zabbix Cluster","text":"<p>Setting up a Zabbix cluster involves configuring multiple Zabbix servers to work together, providing high availability. While the process is similar to setting up a single Zabbix server, there are additional configuration steps required to enable HA (High Availability).</p>"},{"location":"installation/installing-zabbix-ha/#adding-zabbix-repositories","title":"Adding Zabbix Repositories","text":"<p>First, add the Zabbix 7.0 repositories to both of your Zabbix servers:</p> <pre><code># rpm -Uvh https://repo.zabbix.com/zabbix/7.0/rhel/9/x86_64/zabbix-release-6.5-2.el9.noarch.rpm\n</code></pre>"},{"location":"installation/installing-zabbix-ha/#installing-zabbix-servers","title":"Installing Zabbix Servers","text":"<p>Once the repository is added, install the Zabbix server package on both servers:</p> <pre><code># dnf install zabbix-server-pgsql -y\n</code></pre>"},{"location":"installation/installing-zabbix-ha/#configuring-zabbix-server-1","title":"Configuring Zabbix Server 1","text":"<p>Edit the Zabbix server configuration file on the first server:</p> <pre><code># vi /etc/zabbix/zabbix_server.conf\n</code></pre> <p>Update the following lines to connect to the PostgreSQL database:</p> <pre><code>DBHost=&lt;zabbix db ip&gt;\nDBName=zabbix\nDBUser=zabbix\nDBPassword=&lt;your secret password&gt;\n</code></pre> <p>Configure the HA parameters for this server:</p> <pre><code>HANodeName=zabbix1 (or choose a name you prefer)\n</code></pre> <p>Specify the frontend node address for failover scenarios:</p> <pre><code>NodeAddress=&lt;Zabbix server 1 ip&gt;:10051\n</code></pre>"},{"location":"installation/installing-zabbix-ha/#configuring-zabbix-server-2","title":"Configuring Zabbix Server 2","text":"<p>Repeat the configuration steps for the second Zabbix server. Adjust the <code>HANodeName</code> and <code>NodeAddress</code> as necessary for this server.</p>"},{"location":"installation/installing-zabbix-ha/#starting-zabbix-server","title":"Starting Zabbix Server","text":"<p>After configuring both servers, enable and start the <code>zabbix-server</code> service on each:</p> <pre><code># systemctl enable zabbix-server --now\n</code></pre>"},{"location":"installation/installing-zabbix-ha/#verifying-the-configuration","title":"Verifying the Configuration","text":"<p>Check the log files on both servers to ensure they have started correctly and are operating in their respective HA modes.</p> <p>On the first server:</p> <pre><code># grep HA /var/log/zabbix/zabbix_server.log\n</code></pre> <p>You should see:</p> <pre><code>22597:20240309:155230.353 starting HA manager\n22597:20240309:155230.362 HA manager started in active mode\n</code></pre> <p>On the second server (and any additional nodes):</p> <pre><code># grep HA /var/log/zabbix/zabbix_server.log\n</code></pre> <p>You should see:</p> <pre><code>22304:20240309:155331.163 starting HA manager\n22304:20240309:155331.174 HA manager started in standby mode\n</code></pre> <p>Your Zabbix cluster should now be set up with high availability, ensuring continuous monitoring even if one of the servers fails.</p>"},{"location":"installation/installing-zabbix-ha/#installing-the-frontends","title":"Installing the frontends","text":"<p>First things first before we can install and configure our webserver we need to install keepalived. Keepalived allows us to use a VIP for our frontends. Keepalived provides frameworks for both load balancing and high availability.</p> Info <p>Some useful documentation on the subject you might like. https://www.redhat.com/sysadmin/advanced-keepalived and https://keepalived.readthedocs.io/en/latest/introduction.html</p>"},{"location":"installation/installing-zabbix-ha/#setup-keepalived","title":"Setup keepalived","text":"<p>So let's get started. On both our servers we have to install keepalived.</p> <pre><code>dnf install keepalived\n</code></pre> <p>We also need to adapt the configuration of keepalived on both servers. The configuration for both servers needs to be a bit changed so let's start with our server 1. Edit the config file with the following command:</p> <pre><code># vi /etc/keepalived/keepalived.conf\n</code></pre> <p>Delete everything and replace it with the following lines:</p> <pre><code>vrrp_track_process track_nginx {\n    process nginx\n    weight 10\n}\n\nvrrp_instance VI_1 {\n    state MASTER\n    interface enp0s1\n    virtual_router_id 51\n    priority 244\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 12345\n    }\n    virtual_ipaddress {\n        192.168.0.135\n    }\n    track_process {\n         track_nginx\n      }\n}\n</code></pre> <p>Replace <code>enp0s1</code> with the interface name of your machine and replace the password with something secure. For the virual_ipaddress use aa free IP from your network. Now do the same thing for our second Zabbix server.</p> <pre><code># vi /etc/keepalived/keepalived.conf\n</code></pre> <p>Delete everything and replace it with the following lines:</p> <pre><code>vrrp_track_process track_nginx {\n      process nginx\n      weight 10\n}\n\nvrrp_instance VI_1 {\n    state BACKUP\n    interface enp0s1\n    virtual_router_id 51\n    priority 243\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 12345\n    }\n    virtual_ipaddress {\n        192.168.0.135\n    }\n    track_process {\n         track_nginx\n      }\n}\n</code></pre> <p>Just as with our 1<sup>st</sup> Zabbix server, replace <code>enp0s1</code> with the interface name of your machine and replace the password with something secure. For the virual_ipaddress use aa free IP from your network.</p>"},{"location":"installation/installing-zabbix-ha/#install-and-configure-the-frontend","title":"Install and configure the frontend","text":"<p>On both servers we can run the following commands to install our webserver and the zabbix frontend packages:</p> <pre><code>dnf install nginx zabbix-web-pgsql zabbix-nginx-conf\n</code></pre> <p>Also let's not forget to configure our firewall</p> <pre><code>firewall-cmd --add-service=http --permanent\nfirewall-cmd --add-service=zabbix-server --permanent\nfirewall-cmd --reload\n</code></pre> <p>And now we can start our keepalived and enable it so that it comes up next reboot</p> <pre><code>systemctl enable keepalived nginx --now\n</code></pre>"},{"location":"installation/installing-zabbix-ha/#configure-zabbix-frontend","title":"Configure Zabbix Frontend","text":"<p>After configuring the Zabbix servers, you need to complete the setup via the Zabbix web interface. Follow these steps:</p> <ul> <li>Access the Zabbix Web Interface</li> </ul> <p>Navigate through the web interface until you reach the page where you need to    configure the database connection.</p> <ul> <li> <p>Fill in Database Connection Details</p> </li> <li> <p>Database IP Address: Enter the IP address of your PostgreSQL database server.</p> </li> <li>Port: You can leave this as <code>0</code> to use the default port (5432).</li> <li>Database Name: Enter the name of your database (e.g., <code>zabbix</code>).</li> <li>User: Enter the database user (e.g., <code>zabbix</code>).</li> <li>Password: Enter the password for the database user.</li> </ul> <p>Note: Ensure you deselect TLS encryption and select the option to store    passwords as plaintext.</p> <ul> <li>Adjust SELinux Settings</li> </ul> <p>If you encounter issues during the configuration due to SELinux restrictions,    run the following commands on both Zabbix servers to allow the web server to    communicate with the database:</p> <pre><code>    # setsebool -P httpd_can_network_connect_db on\n    # setsebool -P httpd_can_connect_zabbix on\n</code></pre> <p>These commands modify SELinux policies to enable network connections between    the web server and the database.</p> <ul> <li>Continue with the Setup</li> </ul> <p>After adjusting SELinux settings, return to the web interface and click \"Next.\"    The setup should proceed without issues.</p> <p>By completing these steps, your Zabbix servers should be fully configured and connected to the database, ready for use in your monitoring environment.</p> <p></p> <p>We are almost ready the only thing left here is now to add the name of our server and configure the default timezone.</p> <p></p> <p>Since you\u2019re using a host-based firewall, you need to add the necessary rules to permit IP protocol 112 traffic. Otherwise, Keepalived\u2019s advertisement method won\u2019t work.</p> <pre><code>firewall-cmd --add-rich-rule='rule protocol value=\"112\" accept' --permanent\n</code></pre> <p>Now that this is all taken care of stop keepalived on our server and repeat the same steps on the second server. After this is finished start keepalived again.</p> <p>Congratulations you have a HA Zabbix server now .</p>"},{"location":"installation/installing-zabbix-ha/#checking-the-database-for-ha-information","title":"Checking the Database for HA Information","text":"<p>Once your Zabbix HA setup is operational, you might want to verify the status of your servers within the database. Here\u2019s how to check the information:</p> <ul> <li>Query HA Node Information</li> </ul> <p>Access your Zabbix database and run the following SQL query to view details about the HA nodes:</p> <pre><code>    zabbix=# SELECT * FROM ha_node;\n</code></pre> <pre><code>Example output:\n\n         ha_nodeid         |  name   |    address    | port  | lastaccess | status |       ha_sessionid\n---------------------------+---------+---------------+-------+------------+--------+---------------------------\n cltk7h2n600017kkd1jtx6f1f | zabbix2 | 192.168.0.131 | 10051 | 1710085786 |      0 | cltlov4ly0000jkkdteikeo77\n cltk7ci340001inkc2befwg9f | zabbix1 | 192.168.0.130 | 10051 | 1710085787 |      3 | cltlov1r00000jtkcpeh9oqhp\n</code></pre> <p>This query provides information on each HA node, including its ID, name, address, port, last access time, status, and session ID.</p> <ul> <li>Understanding Node Statuses</li> </ul> <p>The status column in the <code>ha_node</code> table indicates the current state of each node. Here are the possible statuses:</p> Status Number Description Active 3 Only one node can be active at any time Standby 0 Multiple nodes can be in standby mode Stopped 1 A node has been detected as stopped Unavailable 2 A node was lost without proper shutdown detection <p>The frontend uses this information to determine which server to connect to based on the active and standby nodes.</p> <ul> <li>Configuring Zabbix Agents</li> </ul> <p>Ensure that Zabbix agents are configured to point to both the active and passive Zabbix servers. This option is supported in all agents since Zabbix 6.0.</p> <pre><code>Server=&lt;active-server-ip&gt;,&lt;passive-server-ip&gt;\nServerActive=&lt;active-server-ip&gt;,&lt;passive-server-ip&gt;\n</code></pre> <p>This configuration ensures that agents can communicate with both servers, enhancing redundancy and reliability.</p>"},{"location":"installation/installing-zabbix/","title":"Installing Zabbix","text":"<p>In this chapter, we will walk through the process of installing the Zabbix server. In the previous section, we covered the installation of the database. Now, we will proceed with installing the Zabbix server and connecting it to the previously set up database. Additionally, we will explore various design options, as Zabbix supports a modular installation approach.</p> <p>Before beginning the installation, it is important to understand the architecture of Zabbix. The Zabbix server is structured in a modular fashion, composed of three main components, which we will discuss in detail.</p> <ul> <li>The Zabbix server</li> <li>The Zabbix web server</li> <li>The Zabbix database</li> </ul> <p></p> <p>All of these components can either be installed on a single server or distributed across three separate servers. The core of the system is the Zabbix server, often referred to as the \"brain.\" This component is responsible for processing trigger calculations and sending alerts. The database serves as the storage for the Zabbix server\u2019s configuration and all the data it collects. The web server provides the user interface (front-end) for interacting with the system. It is important to note that the Zabbix API is part of the front-end component, not the Zabbix server itself.</p> <p>These components must function together seamlessly, as illustrated in the diagram above. The Zabbix server must read configurations and store monitoring data in the database, while the front-end needs access to read and write configuration data. Furthermore, the front-end must be able to check the status of the Zabbix server and retrieve additional necessary information to ensure smooth operation.</p> <p>For our setup, we will be using two virtual machines (VMs): one VM will host both the Zabbix server and the Zabbix web front-end, while the second VM will host the Zabbix database.</p> <p>In this chapter, we will cover the following topics:</p> <ul> <li>Installing the Zabbix server for MySQL/MariaDB</li> <li>Installing the Zabbix server for PostgreSQL</li> <li>Installing the Zabbix front-end with NginX</li> <li>Installing the Zabbix front-end with Apache</li> </ul> <p>Each section will guide you through the steps for setting up these components in a way that aligns with your specific configuration.</p>"},{"location":"installation/installing-zabbix/#installing-the-zabbix-server","title":"Installing the Zabbix Server","text":"<p>Before proceeding with the installation of your Zabbix server, ensure that the server is properly configured, as outlined in the previous section, Basic OS configuration.</p> <p>Another critical step at this stage is disabling SELinux, which can interfere with the installation and operation of Zabbix. We will revisit SELinux in the chapter Securing Zabbix with SELinux to learn how to configure it securely.</p> <p>To check the current status of SELinux, you can use the following command: <code>sestatus</code></p> <pre><code># sestatus\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   enforcing\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre> <p>As shown, the system is currently in enforcing mode. To temporarily disable SELinux, you can run the following command: <code>setenforce 0</code></p> <pre><code># setenforce 0\n# sestatus\n\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   permissive\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre> <p>Now, as you can see, the mode is switched to permissive. However, this change is not persistent across reboots. To make it permanent, you need to modify the SELinux configuration file located at <code>/etc/selinux/config</code>. Open the file and replace <code>enforcing</code> with <code>permissive</code>.</p> <p>Alternatively, you can achieve the same result more easily by running the following command:</p> <pre><code>sed -i 's/SELINUX=enforcing/SELINUX=permissive/g' /etc/selinux/config\n</code></pre> <p>This line will alter the config file for you. So when we run <code>sestatus</code> again we will see that we are in <code>permissive</code> mode and that our config file is also in <code>permissive</code> mode.</p> <p>We can verify this with our <code>cat</code> commando.</p> <pre><code># cat /etc/selinux/config\n\n# This file controls the state of SELinux on the system.\n# SELINUX= can take one of these three values:\n#     enforcing - SELinux security policy is enforced.\n#     permissive - SELinux prints warnings instead of enforcing.\n#     disabled - No SELinux policy is loaded.\n# See also:\n# https://docs.fedoraproject.org/en-US/quick-docs/getting-started-with-selinux/#getting-started-with-selinux-selinux-states-and-modes\n#\n# NOTE: In earlier Fedora kernel builds, SELINUX=disabled would also\n# fully disable SELinux during boot. If you need a system with SELinux\n# fully disabled instead of SELinux running with no policy loaded, you\n# need to pass selinux=0 to the kernel command line. You can use grubby\n# to persistently set the bootloader to boot with selinux=0:\n#\n#    grubby --update-kernel ALL --args selinux=0\n#\n# To revert back to SELinux enabled:\n#\n#    grubby --update-kernel ALL --remove-args selinux\n#\nSELINUX=permissive\n# SELINUXTYPE= can take one of these three values:\n#     targeted - Targeted processes are protected,\n#     minimum - Modification of targeted policy. Only selected processes are protected.\n#     mls - Multi Level Security protection.\nSELINUXTYPE=targeted\n</code></pre> <p>And we can also verify it with our commando <code>setstatus</code></p> <pre><code># sestatus\n\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   permissive\nMode from config file:          permissive\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre>"},{"location":"installation/installing-zabbix/#adding-the-zabbix-repository","title":"Adding the Zabbix repository","text":"<p>From the Zabbix Download page, select the appropriate Zabbix version you wish to install. In this case, we will be using <code>Zabbix 7.0 LTS</code>. Additionally, ensure you choose the correct OS distribution for your environment, which will be Rocky Linux 9 in our case for this setup but RHEL 9 or AlmaLinux 9 are fine too.</p> <p>We will be installing the Zabbix Server along with NGINX as the web server for the front-end. Make sure to download the relevant packages for your chosen configuration.</p> <p></p> <p>Our first step is to disable the Zabbix packages provided by the EPEL repository, if it's installed on your system. To do this, edit the <code>/etc/yum.repos.d/epel.repo</code> file and add the following statement to disable the EPEL repository by default:</p> <pre><code>[epel]\n...\nexcludepkgs=zabbix*\n</code></pre> Tip <p>It's considered bad practice to keep the EPEL repository enabled all the time, as it may cause conflicts by unintentionally overwriting or installing unwanted packages. Instead, it's safer to enable the repository only when needed, by using the following command during installations: <code>dnf install --enablerepo=epel &lt;package-name&gt;</code> This ensures that EPEL is only enabled when explicitly required.</p> <p>Next, we will install the Zabbix repository on our operating system. After adding the Zabbix repository, it is recommended to perform a repository cleanup to remove old cache files and ensure the repository metadata is up to date. You can do this by running:</p> <pre><code>&gt; rpm -Uvh https://repo.zabbix.com/zabbix/7.0/rhel/9/x86_64/zabbix-release-6.5-2.el9.noarch.rpm\n&gt; dnf clean all\n</code></pre> <p>This will refresh the repository metadata and prepare the system for Zabbix installation.</p> Note <p>A repository in Linux is a configuration that allows you to access and install software packages. You can think of it like an \"app store\" where you find and download software from a trusted source, in this case, the Zabbix repository. Many repositories are available, but it's important to only add those you trust. The safest practice is to stick to the repositories provided by your operating system and only add additional ones when you're sure they are both trusted and necessary.</p> <pre><code>For our installation, the Zabbix repository is provided by the vendor itself,\nmaking it a trusted source. Another popular and safe repository for\nRedHat-based systems is EPEL (Extra Packages for Enterprise Linux), which is\ncommonly used in enterprise environments.\nHowever, always exercise caution when adding new repositories to ensure\nsystem security and stability.\n</code></pre>"},{"location":"installation/installing-zabbix/#installing-the-zabbix-server-for-mysqlmariadb","title":"Installing the Zabbix server for MySQL/MariaDB","text":"<p>Now that we\u2019ve added the Zabbix repository with the necessary software, we are ready to install both the Zabbix server and the web server. Keep in mind that the web server doesn\u2019t need to be installed on the same machine as the Zabbix server; they can be hosted on separate systems if desired.</p> <p>To install the Zabbix server and the web server components for MySQL/MariaDB, run the following command:</p> <pre><code>dnf install zabbix-server-mysql zabbix-web-mysql\n</code></pre> <p>After successfully installing the Zabbix server and frontend packages, we need to configure the Zabbix server to connect to the database. This requires modifying the Zabbix server configuration file. Open the <code>/etc/zabbix/zabbix_server.conf</code> file and update the following lines to match your database configuration:</p> <pre><code>DBHost=&lt;database-host&gt;\nDBName=&lt;database-name&gt;\nDBUser=&lt;database-user&gt;\nDBPassword=&lt;database-password&gt;\n</code></pre> <p>Replace <code>&lt;database-host&gt;</code>, <code>&lt;database-name&gt;</code>, <code>&lt;database-user&gt;</code>, and <code>&lt;database-password&gt;</code> with the appropriate values for your setup. This ensures that the Zabbix server can communicate with your database.</p> <p>Ensure that there is no # (comment symbol) in front of the configuration parameters, as Zabbix will treat lines beginning with # as comments, ignoring them during execution. Additionally, double-check for duplicate configuration lines; if there are multiple lines with the same parameter, Zabbix will use the value from the last occurrence.</p> <p>For our setup, the configuration will look like this:</p> <pre><code># vi /etc/zabbix/zabbix_server.conf\n\nDBHost=&lt;ip or dns of your MariaDB server&gt;\nDBName=zabbix\nDBUser=zabbix-srv\nDBPassword=&lt;your super secret password&gt;\nDBPort=3306\n</code></pre> <p>In this example:</p> <ul> <li>DBHost refers to the host where your database is running (use localhost if it's on the same machine).</li> <li>DBName is the name of the Zabbix database.</li> <li>DBUser is the database user.</li> <li>DBPassword is the password for the database user.</li> </ul> <p>Make sure the settings reflect your environment's database configuration.</p> Note <p>The Zabbix server configuration file offers an option to include additional configuration files for custom parameters. For a production environment, it's often best to avoid altering the original configuration file directly. Instead, you can create and include a separate configuration file for any additional or modified parameters. This approach ensures that your original configuration file remains untouched, which is particularly useful when performing upgrades or managing configurations with tools like Ansible, Puppet, or SaltStack.</p> <p>To enable this feature, remove the <code>#</code> from the line:</p> <pre><code># Include=/usr/local/etc/zabbix_server.conf.d/*.conf\n</code></pre> <pre><code>Then, ensure the path `/usr/local/etc/zabbix_server.conf.d/` exists and\ncreate a custom configuration file in this directory.\nThis file should be readable by the `zabbix` user. By doing so, you can add\nor modify parameters without modifying the default configuration file,\nmaking system management and upgrades smoother.\n</code></pre> <p>With the Zabbix server configuration updated to connect to your database, you can now start and enable the Zabbix server service. Run the following command to enable the Zabbix server and ensure it starts automatically on boot:</p> <pre><code>systemctl enable zabbix-server --now`\n</code></pre> <p>This command will start the Zabbix server service immediately and configure it to launch on system startup.</p> <p>To verify that the Zabbix server is running correctly, check the log file for any messages. You can view the latest entries in the Zabbix server log file using:</p> <pre><code>tail /var/log/zabbix/zabbix_server.log\n</code></pre> <p>Look for messages indicating that the server has started successfully. If there are any issues, the log file will provide details to help with troubleshooting.</p> <pre><code>  1123:20231120:110604.440 Starting Zabbix Server. Zabbix 7.0.0alpha7 (revision 60de6a81aca).\n  1123:20231120:110604.440 ****** Enabled features ******\n  1123:20231120:110604.440 SNMP monitoring:           YES\n  1123:20231120:110604.440 IPMI monitoring:           YES\n  1123:20231120:110604.440 Web monitoring:            YES\n  1123:20231120:110604.440 VMware monitoring:         YES\n  1123:20231120:110604.440 SMTP authentication:       YES\n  1123:20231120:110604.440 ODBC:                      YES\n  1123:20231120:110604.440 SSH support:               YES\n  1123:20231120:110604.440 IPv6 support:              YES\n  1123:20231120:110604.440 TLS support:               YES\n  1123:20231120:110604.440 ******************************\n  1123:20231120:110604.440 using configuration file: /etc/zabbix/zabbix_server.conf\n  1123:20231120:110604.470 current database version (mandatory/optional): 06050143/06050143\n  1123:20231120:110604.470 required mandatory version: 06050143\n  1124:20231120:110604.490 starting HA manager\n  1124:20231120:110604.507 HA manager started in active mode\n  1123:20231120:110604.508 server #0 started [main process]\n  1126:20231120:110604.509 server #2 started [configuration syncer #1]\n  1125:20231120:110604.510 server #1 started [service manager #1]\n  1133:20231120:110604.841 server #9 started [lld worker #1]\n  1132:20231120:110604.841 server #8 started [lld manager #1]\n  1134:20231120:110604.841 server #10 started [lld worker #2]\n</code></pre> <p>If there was an error and the server was not able to connect to the database you would see something like this in the server log file :</p> <pre><code> 10773:20231118:213248.570 Starting Zabbix Server. Zabbix 7.0.0alpha7 (revision 60de6a81aca).\n 10773:20231118:213248.570 ****** Enabled features ******\n 10773:20231118:213248.570 SNMP monitoring:           YES\n 10773:20231118:213248.570 IPMI monitoring:           YES\n 10773:20231118:213248.570 Web monitoring:            YES\n 10773:20231118:213248.570 VMware monitoring:         YES\n 10773:20231118:213248.570 SMTP authentication:       YES\n 10773:20231118:213248.570 ODBC:                      YES\n 10773:20231118:213248.570 SSH support:               YES\n 10773:20231118:213248.570 IPv6 support:              YES\n 10773:20231118:213248.570 TLS support:               YES\n 10773:20231118:213248.570 ******************************\n 10773:20231118:213248.570 using configuration file: /etc/zabbix/zabbix_server.conf\n 10773:20231118:213248.574 [Z3001] connection to database 'zabbix' failed: [2002] Can't connect to server on 'xxx.xxx.xxx.xxx' (115)\n 10773:20231118:213248.574 database is down: reconnecting in 10 seconds\n 10773:20231118:213258.579 [Z3001] connection to database 'zabbix' failed: [2002] Can't connect to server on 'xxx.xxx.xxx.xxx' (115)\n 10773:20231118:213258.579 database is down: reconnecting in 10 seconds\n</code></pre> <p>Let's check the Zabbix server service to see if it's enabled so that it survives a reboot</p> <pre><code># systemctl status zabbix-server\n\n\u25cf zabbix-server.service - Zabbix Server\n     Loaded: loaded (/usr/lib/systemd/system/zabbix-server.service; enabled; preset: disabled)\n     Active: active (running) since Mon 2023-11-20 11:06:04 CET; 1h 2min ago\n   Main PID: 1123 (zabbix_server)\n      Tasks: 59 (limit: 12344)\n     Memory: 52.6M\n        CPU: 20.399s\n     CGroup: /system.slice/zabbix-server.service\n             \u251c\u25001123 /usr/sbin/zabbix_server -c /etc/zabbix/zabbix_server.conf\n             \u251c\u25001124 \"/usr/sbin/zabbix_server: ha manager\"\n             \u251c\u25001125 \"/usr/sbin/zabbix_server: service manager #1 [processed 0 events, updated 0 event tags, deleted 0 problems, synced 0 service updates, idle 5.008686 sec during 5.016382 sec]\"\n             \u251c\u25001126 \"/usr/sbin/zabbix_server: configuration syncer [synced configuration in 0.092797 sec, idle 10 sec]\"\n             \u251c\u25001127 \"/usr/sbin/zabbix_server: alert manager #1 [sent 0, failed 0 alerts, idle 5.027620 sec during 5.027828 sec]\"\n             \u251c\u25001128 \"/usr/sbin/zabbix_server: alerter #1 started\"\n             \u251c\u25001129 \"/usr/sbin/zabbix_server: alerter #2 started\"\n             \u251c\u25001130 \"/usr/sbin/zabbix_server: alerter #3 started\"\n             \u251c\u25001131 \"/usr/sbin/zabbix_server: preprocessing manager #1 [queued 1, processed 2 values, idle 5.490312 sec during 5.490555 sec]\"\n             \u251c\u25001132 \"/usr/sbin/zabbix_server: lld manager #1 [processed 1 LLD rules, idle 5.028973sec during 5.029123 sec]\"\n             \u251c\u25001133 \"/usr/sbin/zabbix_server: lld worker #1 [processed 1 LLD rules, idle 60.060180 sec during 60.085009 sec]\"\n             \u251c\u25001134 \"/usr/sbin/zabbix_server: lld worker #2 [processed 1 LLD rules, idle 60.065526 sec during 60.095165 sec]\"\n             \u251c\u25001135 \"/usr/sbin/zabbix_server: housekeeper [deleted 0 hist/trends, 0 items/triggers, 0 events, 0 sessions, 0 alarms, 0 audit items, 0 autoreg_host, 0 records in 0.019108 sec, idle for 1 hour(s)]\"\n             \u251c\u25001136 \"/usr/sbin/zabbix_server: timer #1 [updated 0 hosts, suppressed 0 events in 0.002856 sec, idle 59 sec]\"\n             \u251c\u25001137 \"/usr/sbin/zabbix_server: http poller #1 [got 0 values in 0.000059 sec, idle 5 sec]\"\n             \u251c\u25001138 \"/usr/sbin/zabbix_server: discovery manager #1 [processing 0 rules, 0.000000% of queue used, 0 unsaved checks]\"\n             \u251c\u25001139 \"/usr/sbin/zabbix_server: history syncer #1 [processed 0 values, 0 triggers in 0.000036 sec, idle 1 sec]\"\n             \u251c\u25001140 \"/usr/sbin/zabbix_server: history syncer #2 [processed 1 values, 0 triggers in 0.005016 sec, idle 1 sec]\"\n             \u251c\u25001141 \"/usr/sbin/zabbix_server: history syncer #3 [processed 0 values, 0 triggers in 0.000031 sec, idle 1 sec]\"\n             \u251c\u25001142 \"/usr/sbin/zabbix_server: history syncer #4 [processed 0 values, 0 triggers in 0.000014 sec, idle 1 sec]\"\n             \u251c\u25001143 \"/usr/sbin/zabbix_server: escalator #1 [processed 0 escalations in 0.005587 sec, idle 3 sec]\"\n             \u251c\u25001144 \"/usr/sbin/zabbix_server: proxy poller #1 [exchanged data with 0 proxies in 0.000010 sec, idle 5 sec]\"\n             \u251c\u25001145 \"/usr/sbin/zabbix_server: self-monitoring [processed data in 0.000016 sec, idle 1 sec]\"\n             \u251c\u25001146 \"/usr/sbin/zabbix_server: task manager [processed 0 task(s) in 0.002511 sec, idle 5 sec]\"\n             \u251c\u25001147 \"/usr/sbin/zabbix_server: poller #1 [got 0 values in 0.000009 sec, idle 1 sec]\"\n             \u251c\u25001148 \"/usr/sbin/zabbix_server: poller #2 [got 1 values in 0.000232 sec, idle 1 sec]\"\n             \u251c\u25001149 \"/usr/sbin/zabbix_server: poller #3 [got 0 values in 0.000015 sec, idle 1 sec]\"\n             \u251c\u25001150 \"/usr/sbin/zabbix_server: poller #4 [got 0 values in 0.000010 sec, idle 1 sec]\"\n</code></pre> <p>This concludes our chapter on installing and configuring the Zabbix server with MySQL. Next, we will proceed with configuring the front-end. You can choose to follow the instructions for either:</p> <ul> <li>Installing Zabbix frontend with Nginx</li> <li>Installing Zabbix frontend with Apache</li> </ul> <p>Each guide will walk you through setting up the web interface for Zabbix based on your preferred web server.</p>"},{"location":"installation/installing-zabbix/#installing-the-zabbix-server-for-postgresql","title":"Installing the Zabbix server for PostgreSQL","text":"<p>Now that we\u2019ve added the Zabbix repository with the necessary software, we are ready to install both the Zabbix server and the web server. Keep in mind that the web server doesn\u2019t need to be installed on the same machine as the Zabbix server; they can be hosted on separate systems if desired.</p> <p>To install the Zabbix server and the web server components for PostgreSQL, run the following command:</p> <p><code>dnf install zabbix-server-pgsql zabbix-web-pgsql</code></p> <p>After successfully installing the Zabbix server and frontend packages, we need to configure the Zabbix server to connect to the database. This requires modifying the Zabbix server configuration file. Open the <code>/etc/zabbix/zabbix_server.conf</code> file and update the following lines to match your database configuration:</p> <pre><code>DBHost=&lt;ip or dns of your PostgreSQL server&gt;\nDBName=&lt;the name of your database&gt;\nDBSchema=&lt;our PostgreSQL schema name&gt;\nDBUser=&lt;the user that will connect to the database&gt;\nDBPassword=&lt;your super secret password&gt;\n</code></pre> <p>Replace , , , and  with the appropriate values for your setup. This ensures that the Zabbix server can communicate with your database. <p>Ensure that there is no # (comment symbol) in front of the configuration parameters, as Zabbix will treat lines beginning with # as comments, ignoring them during execution. Additionally, double-check for duplicate configuration lines; if there are multiple lines with the same parameter, Zabbix will use the value from the last occurrence.</p> <p>For our setup, the configuration will look like this:</p> <pre><code># vi /etc/zabbix/zabbix_server.conf\n\nDBHost=&lt;ip or dns of your MariaDB server&gt;\nDBName=zabbix\nDBSchema=zabbix_server\nDBUser=zabbix-srv\nDBPassword=&lt;your super secret password&gt;\nDBPort=5432\n</code></pre> <p>In this example:</p> <ul> <li>DBHost refers to the host where your database is running (use localhost if it's on the same machine).</li> <li>DBName is the name of the Zabbix database.</li> <li>DBUser is the database user.</li> <li>DBPassword is the password for the database user.</li> </ul> <p>Make sure the settings reflect your environment's database configuration.</p> Note <p>The Zabbix server configuration file offers an option to include additional configuration files for custom parameters. For a production environment, it's often best to avoid altering the original configuration file directly. Instead, you can create and include a separate configuration file for any additional or modified parameters. This approach ensures that your original configuration file remains untouched, which is particularly useful when performing upgrades or managing configurations with tools like Ansible, Puppet, or SaltStack. To enable this feature, remove the # from the line: <code># Include=/usr/local/etc/zabbix_server.conf.d/*.conf</code> Then, ensure the path <code>/usr/local/etc/zabbix_server.conf.d/</code> exists and create a custom configuration file in this directory. This file should be readable by the <code>zabbix</code> user. By doing so, you can add or modify parameters without modifying the default configuration file, making system management and upgrades smoother.</p> <p>With the Zabbix server configuration updated to connect to your database, you can now start and enable the Zabbix server service. Run the following command to enable the Zabbix server and ensure it starts automatically on boot:</p> <p><code>systemctl enable zabbix-server --now</code></p> <p>This command will start the Zabbix server service immediately and configure it to launch on system startup. To verify that the Zabbix server is running correctly, check the log file for any messages. You can view the latest entries in the Zabbix server log file using:</p> <p><code>tail /var/log/zabbix/zabbix_server.log</code></p> <p>Look for messages indicating that the server has started successfully. If there are any issues, the log file will provide details to help with troubleshooting.</p> <pre><code>  1123:20231120:110604.440 Starting Zabbix Server. Zabbix 7.0.0alpha7 (revision 60de6a81aca).\n  1123:20231120:110604.440 ****** Enabled features ******\n  1123:20231120:110604.440 SNMP monitoring:           YES\n  1123:20231120:110604.440 IPMI monitoring:           YES\n  1123:20231120:110604.440 Web monitoring:            YES\n  1123:20231120:110604.440 VMware monitoring:         YES\n  1123:20231120:110604.440 SMTP authentication:       YES\n  1123:20231120:110604.440 ODBC:                      YES\n  1123:20231120:110604.440 SSH support:               YES\n  1123:20231120:110604.440 IPv6 support:              YES\n  1123:20231120:110604.440 TLS support:               YES\n  1123:20231120:110604.440 ******************************\n  1123:20231120:110604.440 using configuration file: /etc/zabbix/zabbix_server.conf\n  1123:20231120:110604.470 current database version (mandatory/optional): 06050143/06050143\n  1123:20231120:110604.470 required mandatory version: 06050143\n  1124:20231120:110604.490 starting HA manager\n  1124:20231120:110604.507 HA manager started in active mode\n  1123:20231120:110604.508 server #0 started [main process]\n  1126:20231120:110604.509 server #2 started [configuration syncer #1]\n  1125:20231120:110604.510 server #1 started [service manager #1]\n  1133:20231120:110604.841 server #9 started [lld worker #1]\n  1132:20231120:110604.841 server #8 started [lld manager #1]\n  1134:20231120:110604.841 server #10 started [lld worker #2]\n</code></pre> <p>If there was an error and the server was not able to connect to the database you would see something like this in the server log file :</p> <pre><code> 10773:20231118:213248.570 Starting Zabbix Server. Zabbix 7.0.0alpha7 (revision 60de6a81aca).\n 10773:20231118:213248.570 ****** Enabled features ******\n 10773:20231118:213248.570 SNMP monitoring:           YES\n 10773:20231118:213248.570 IPMI monitoring:           YES\n 10773:20231118:213248.570 Web monitoring:            YES\n 10773:20231118:213248.570 VMware monitoring:         YES\n 10773:20231118:213248.570 SMTP authentication:       YES\n 10773:20231118:213248.570 ODBC:                      YES\n 10773:20231118:213248.570 SSH support:               YES\n 10773:20231118:213248.570 IPv6 support:              YES\n 10773:20231118:213248.570 TLS support:               YES\n 10773:20231118:213248.570 ******************************\n 10773:20231118:213248.570 using configuration file: /etc/zabbix/zabbix_server.conf\n 10773:20231118:213248.574 [Z3001] connection to database 'zabbix' failed: [2002] Can't connect to server on 'xxx.xxx.xxx.xxx' (115)\n 10773:20231118:213248.574 database is down: reconnecting in 10 seconds\n 10773:20231118:213258.579 [Z3001] connection to database 'zabbix' failed: [2002] Can't connect to server on 'xxx.xxx.xxx.xxx' (115)\n 10773:20231118:213258.579 database is down: reconnecting in 10 seconds\n</code></pre> <p>Let's check the Zabbix server service to see if it's enabled so that it survives a reboot</p> <pre><code># systemctl status zabbix-server\n</code></pre> <pre><code>\u25cf zabbix-server.service - Zabbix Server\n     Loaded: loaded (/usr/lib/systemd/system/zabbix-server.service; enabled; preset: disabled)\n     Active: active (running) since Mon 2023-11-20 11:06:04 CET; 1h 2min ago\n   Main PID: 1123 (zabbix_server)\n      Tasks: 59 (limit: 12344)\n     Memory: 52.6M\n        CPU: 20.399s\n     CGroup: /system.slice/zabbix-server.service\n             \u251c\u25001123 /usr/sbin/zabbix_server -c /etc/zabbix/zabbix_server.conf\n             \u251c\u25001124 \"/usr/sbin/zabbix_server: ha manager\"\n             \u251c\u25001125 \"/usr/sbin/zabbix_server: service manager #1 [processed 0 events, updated 0 event tags, deleted 0 problems, synced 0 service updates, idle 5.008686 sec during 5.016382 sec]\"\n             \u251c\u25001126 \"/usr/sbin/zabbix_server: configuration syncer [synced configuration in 0.092797 sec, idle 10 sec]\"\n             \u251c\u25001127 \"/usr/sbin/zabbix_server: alert manager #1 [sent 0, failed 0 alerts, idle 5.027620 sec during 5.027828 sec]\"\n             \u251c\u25001128 \"/usr/sbin/zabbix_server: alerter #1 started\"\n             \u251c\u25001129 \"/usr/sbin/zabbix_server: alerter #2 started\"\n             \u251c\u25001130 \"/usr/sbin/zabbix_server: alerter #3 started\"\n             \u251c\u25001131 \"/usr/sbin/zabbix_server: preprocessing manager #1 [queued 1, processed 2 values, idle 5.490312 sec during 5.490555 sec]\"\n             \u251c\u25001132 \"/usr/sbin/zabbix_server: lld manager #1 [processed 1 LLD rules, idle 5.028973sec during 5.029123 sec]\"\n             \u251c\u25001133 \"/usr/sbin/zabbix_server: lld worker #1 [processed 1 LLD rules, idle 60.060180 sec during 60.085009 sec]\"\n             \u251c\u25001134 \"/usr/sbin/zabbix_server: lld worker #2 [processed 1 LLD rules, idle 60.065526 sec during 60.095165 sec]\"\n             \u251c\u25001135 \"/usr/sbin/zabbix_server: housekeeper [deleted 0 hist/trends, 0 items/triggers, 0 events, 0 sessions, 0 alarms, 0 audit items, 0 autoreg_host, 0 records in 0.019108 sec, idle for 1 hour(s)]\"\n             \u251c\u25001136 \"/usr/sbin/zabbix_server: timer #1 [updated 0 hosts, suppressed 0 events in 0.002856 sec, idle 59 sec]\"\n             \u251c\u25001137 \"/usr/sbin/zabbix_server: http poller #1 [got 0 values in 0.000059 sec, idle 5 sec]\"\n             \u251c\u25001138 \"/usr/sbin/zabbix_server: discovery manager #1 [processing 0 rules, 0.000000% of queue used, 0 unsaved checks]\"\n             \u251c\u25001139 \"/usr/sbin/zabbix_server: history syncer #1 [processed 0 values, 0 triggers in 0.000036 sec, idle 1 sec]\"\n             \u251c\u25001140 \"/usr/sbin/zabbix_server: history syncer #2 [processed 1 values, 0 triggers in 0.005016 sec, idle 1 sec]\"\n             \u251c\u25001141 \"/usr/sbin/zabbix_server: history syncer #3 [processed 0 values, 0 triggers in 0.000031 sec, idle 1 sec]\"\n             \u251c\u25001142 \"/usr/sbin/zabbix_server: history syncer #4 [processed 0 values, 0 triggers in 0.000014 sec, idle 1 sec]\"\n             \u251c\u25001143 \"/usr/sbin/zabbix_server: escalator #1 [processed 0 escalations in 0.005587 sec, idle 3 sec]\"\n             \u251c\u25001144 \"/usr/sbin/zabbix_server: proxy poller #1 [exchanged data with 0 proxies in 0.000010 sec, idle 5 sec]\"\n             \u251c\u25001145 \"/usr/sbin/zabbix_server: self-monitoring [processed data in 0.000016 sec, idle 1 sec]\"\n             \u251c\u25001146 \"/usr/sbin/zabbix_server: task manager [processed 0 task(s) in 0.002511 sec, idle 5 sec]\"\n             \u251c\u25001147 \"/usr/sbin/zabbix_server: poller #1 [got 0 values in 0.000009 sec, idle 1 sec]\"\n             \u251c\u25001148 \"/usr/sbin/zabbix_server: poller #2 [got 1 values in 0.000232 sec, idle 1 sec]\"\n             \u251c\u25001149 \"/usr/sbin/zabbix_server: poller #3 [got 0 values in 0.000015 sec, idle 1 sec]\"\n             \u251c\u25001150 \"/usr/sbin/zabbix_server: poller #4 [got 0 values in 0.000010 sec, idle 1 sec]\"\n</code></pre> <p>This concludes our chapter on installing and configuring the Zabbix server with PostgreSQL. Next, we will proceed with configuring the front-end. You can choose to follow the instructions for either:</p> <ul> <li>Installing Zabbix frontend with Nginx</li> <li>Installing Zabbix frontend with Apache</li> </ul> <p>Each guide will walk you through setting up the web interface for Zabbix based on your preferred web server.</p>"},{"location":"installation/installing-zabbix/#installing-zabbix-frontend-with-nginx","title":"Installing Zabbix frontend with Nginx","text":"<p>Before configuring the front-end, you need to install the necessary packages. If the Zabbix front-end is hosted on the same server as the Zabbix server, you can install the required packages with the following command:</p> <pre><code># dnf install zabbix-nginx-conf and zabbix-web-mysql\nor if you used PostgreSQL\n# dnf install zabbix-web-pgsql\n</code></pre> <p>This command will install the front-end packages along with the required dependencies for Nginx or Apache, depending on your web server choice. If you are installing the front-end on a different server, make sure to execute this command on that specific machine.</p> <p>If you don't remember how to add the repository, have a look at Adding the Zabbix repository</p> <p>First thing we have to do is alter the Nginx configuration file so that we don't use the standard config.</p> <pre><code>vi /etc/nginx/nginx.conf\n</code></pre> <p>In this config look for the followin block that starts with :</p> <pre><code>    server {\n        listen       80;\n        listen       [::]:80;\n        server_name  _;\n        root         /usr/share/nginx/html;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n</code></pre> <p>And place the following lines in comment:</p> <pre><code>    server {\n#        listen       80;\n#        listen       [::]:80;\n#        server_name  _;\n#        root         /usr/share/nginx/html;\n</code></pre> <p>We now have to alter the Zabbix configuration file so that it matches our setup. Edit the following file:</p> <pre><code>vi /etc/nginx/conf.d/zabbix.conf\n</code></pre> <pre><code>server {\n        listen          8080;\n        server_name     example.com;\n\n        root    /usr/share/zabbix;\n\n        index   index.php;\n</code></pre> <p>Replace the first 2 lines with the correct port and domain for your frontend in case you don't have a domain you can replace servername with; like in the exaple below:</p> <pre><code>server {\n#        listen          8080;\n#        server_name     example.com;\n        listen          80;\n        server_name     _;\n\n        root    /usr/share/zabbix;\n\n        index   index.php;\n</code></pre> <p>We are now ready to start our websever and enable it so that it comes online after a reboot.</p> <pre><code>systemctl enable php-fpm --now\nsystemctl enable nginx --now\n</code></pre> <p>Let's verify if the service is properly started and enabled so that it survives our reboot next time.</p> <pre><code># systemctl status nginx\n\n\u25cf nginx.service - The nginx HTTP and reverse proxy server\n     Loaded: loaded (/usr/lib/systemd/system/nginx.service; enabled; preset: disabled)\n    Drop-In: /usr/lib/systemd/system/nginx.service.d\n             \u2514\u2500php-fpm.conf\n     Active: active (running) since Mon 2023-11-20 11:42:18 CET; 30min ago\n   Main PID: 1206 (nginx)\n      Tasks: 2 (limit: 12344)\n     Memory: 4.8M\n        CPU: 38ms\n     CGroup: /system.slice/nginx.service\n             \u251c\u25001206 \"nginx: master process /usr/sbin/nginx\"\n             \u2514\u25001207 \"nginx: worker process\"\n\nNov 20 11:42:18 zabbix-srv systemd[1]: Starting The nginx HTTP and reverse proxy server...\nNov 20 11:42:18 zabbix-srv nginx[1204]: nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nNov 20 11:42:18 zabbix-srv nginx[1204]: nginx: configuration file /etc/nginx/nginx.conf test is successful\nNov 20 11:42:18 zabbix-srv systemd[1]: Started The nginx HTTP and reverse proxy server.\n</code></pre> <p>The service is running and enabled so there is only 1 thing left to do before we can start the configuration in the GUI and that is to configure our firewall to allow incoming communication to the webserver.</p> <pre><code>firewall-cmd --add-service=http --permanent\nfirewall-cmd --reload\n</code></pre> <p>Open your browser and go to the url or ip of your frontend :</p> <pre><code>http://&lt;ip or dns of the zabbix frontend server&gt;/\n</code></pre> <p>If all goes well you should be greeted with a Zabbix welcome page. In case you have an error check the configuration again or have a look at the nginx log file :</p> <p><code>/var/log/nginx/error.log</code></p> <p>or run</p> <p><code>journalctl -xe</code></p> <p>This should help you in locating the errors you made.</p> <p>When you point your browser to the correct URL you should be greeted with a page like here :</p> <p></p> <p>As you see there is only a limited list of local translations available on our Zabbix frontend to choose from</p> <p></p> <p>What if we want to install Chinese as language or another language from the list ? Run the next command to get a list of all locales available for your OS.</p> <p><code>dnf list glibc-langpack-*</code></p> <p>This will give you a list like</p> <pre><code>Installed Packages\nglibc-langpack-en.x86_64\nAvailable Packages\nglibc-langpack-aa.x86_64\n...\n\nglibc-langpack-zu.x86_64\n</code></pre> <p>Let's search for our Chinese locale to see if it is available. As you can see the code starts with zh</p> <pre><code># dnf list glibc-langpack-* | grep zh\nglibc-langpack-zh.x86_64\nglibc-langpack-lzh.x86_64\n</code></pre> <p>The command returns us 2 lines but as we have seen that the code was zh_CN we only have to install the first package.</p> <pre><code># dnf install glibc-langpack-zh.x86_64 -y\n</code></pre> <p>When we return now to our frontend we are able to select the Chinese language.</p> <p></p> Note <p>If your preferred language is not available in the Zabbix front-end, don't worry\u2014it simply means that the translation is either incomplete or not yet available. Zabbix is an open-source project that relies on community contributions for translations, so you can help improve it by contributing your own translations.</p> <pre><code>Visit the translation page at [https://translate.zabbix.com/](https://translate.zabbix.com/)\nto assist with the translation efforts. Once your translation is complete and reviewed,\nit will be included in the next minor patch version of Zabbix.\nYour contributions help make Zabbix more accessible and improve the overall\nuser experience for everyone.\n</code></pre> <p>When you're satisfied with the available translations, click Next. You will then be taken to a screen to verify that all prerequisites are met. If any prerequisites are not fulfilled, address those issues first. However, if everything is in order, you should be able to proceed by clicking Next.</p> <p></p> <p>On the next page, you'll configure the database connection parameters:</p> <ol> <li>Select the Database Type: Choose either <code>MySQL</code> or <code>PostgreSQL</code> depending    on your setup.</li> <li>Enter the Database Host: Provide the IP address or DNS name of your    database server. Use port <code>3306</code> for MariaDB/MySQL or <code>5432</code> for PostgreSQL.</li> <li>Enter the Database Name: Specify the name of your database. In our case,    it is <code>zabbix</code>. If you are using PostgreSQL, you will also need to provide    the schema name, which is <code>zabbix_server</code> in our case.</li> <li>Enter the Database User: Input the database user created for the web front-end,    such as <code>zabbix-web</code>. Enter the corresponding password for this user.</li> </ol> <p>Ensure that the Database TLS encryption option is not selected, and then click Next step to proceed.</p> <p></p> <p>You're almost finished with the setup! The final steps involve:</p> <ol> <li>Assigning an Instance Name: Choose a descriptive name for your Zabbix instance.</li> <li>Selecting the Timezone: Choose the timezone that matches your location or    your preferred time zone for the Zabbix interface.</li> <li>Setting the Default Time Format: Select the default time format you prefer    to use.</li> </ol> <p>Once these settings are configured, you can complete the setup and proceed with any final configuration steps as needed.</p> Note <p>It\u2019s a good practice to set your Zabbix server to the UTC timezone, especially when managing systems across multiple timezones. Using UTC helps ensure consistency in time-sensitive actions and events, as the server\u2019s timezone is often used for calculating and displaying time-related information.</p> <p></p> <p>After clicking Next step again, you'll be taken to a page confirming that the configuration was successful. Click Finish to complete the setup process.</p> <p></p> <p>We are now ready to login :</p> <p></p> <p>Login : Admin Password : zabbix</p> <p>This concludes our topic on setting up the Zabbix server. If you're interested in securing your front-end, I recommend checking out the topic Securing Zabbix for additional guidance and best practices.</p>"},{"location":"installation/installing-zabbix/#installing-zabbix-frontend-with-apache","title":"Installing Zabbix frontend with Apache","text":"<p>Before we can configure our frontend we need to install our package first. If you run the frontend on the same server as the Zabbix server then there is nothing else you have to do you can just run the following command on your server to install the packages needed for our frontend to install:</p> <pre><code># dnf install zabbix-apache-conf zabbix-web-mysql\nor if you used PostgreSQL\n# dnf install zabbix-apache-conf zabbix-web-pgsql\n</code></pre> <p>This command will install the front-end packages along with the required dependencies for Nginx or Apache, depending on your web server choice. If you are installing the front-end on a different server, make sure to execute this command on that specific machine.</p> <p>If you don't remember how to add the repository, have a look at Adding the Zabbix repository</p> <p>We are now ready to start our websever and enable it so that it comes online after a reboot.</p> <pre><code>systemctl enable php-fpm --now\nsystemctl enable httpd --now\n</code></pre> <p>Let's verify if the service is properly started and enabled so that it survives our reboot next time.</p> <pre><code># systemctl status httpd\n</code></pre> <pre><code>\u25cf httpd.service - The Apache HTTP Server\n     Loaded: loaded (/usr/lib/systemd/system/httpd.service; enabled; preset: disabled)\n    Drop-In: /usr/lib/systemd/system/httpd.service.d\n             \u2514\u2500php-fpm.conf\n     Active: active (running) since Mon 2024-03-04 08:50:17 CET; 7min ago\n       Docs: man:httpd.service(8)\n   Main PID: 690 (httpd)\n     Status: \"Total requests: 96; Idle/Busy workers 100/0;Requests/sec: 0.213; Bytes served/sec: 560 B/sec\"\n      Tasks: 278 (limit: 22719)\n     Memory: 39.6M\n        CPU: 1.132s\n     CGroup: /system.slice/httpd.service\n             \u251c\u2500 690 /usr/sbin/httpd -DFOREGROUND\n             \u251c\u2500 736 /usr/sbin/httpd -DFOREGROUND\n             \u251c\u2500 737 /usr/sbin/httpd -DFOREGROUND\n             \u251c\u2500 738 /usr/sbin/httpd -DFOREGROUND\n             \u251c\u2500 739 /usr/sbin/httpd -DFOREGROUND\n             \u2514\u25004534 /usr/sbin/httpd -DFOREGROUND\n\nMar 04 08:50:17 localhost.localdomain systemd[1]: Starting The Apache HTTP Server...\nMar 04 08:50:17 localhost.localdomain httpd[690]: AH00558: httpd: Could not reliably determine the server's fully qualified domain name, using localhost.localdomain. Set th&gt;\nMar 04 08:50:17 localhost.localdomain httpd[690]: Server configured, listening on: port 80\nMar 04 08:50:17 localhost.localdomain systemd[1]: Started The Apache HTTP Server.x\n</code></pre> <p>The service is running and enabled so there is only 1 thing left to do before we can start the configuration in the GUI and that is to configure our firewall to allow incoming communication to the webserver.</p> <pre><code># firewall-cmd --add-service=http --permanent\n# firewall-cmd --reload\n</code></pre> <p>Open your browser and go to the url or ip of your frontend :</p> <pre><code>http://&lt;ip or dns of the zabbix frontend server&gt;/zabbix/\n</code></pre> <p>If all goes well you should be greeted with a Zabbix welcome page. In case you have an error check the configuration again or have a look at the Apache log file :</p> <p><code>/var/log/httpd/error_log</code></p> <p>or run</p> <p><code>journalctl -xe</code></p> <p>This should help you in locating the errors you made.</p> <p></p> <p>As you see there is only a limited list of local translations available on our Zabbix frontend to choose from</p> <p></p> <p>What if we want to install Chinese as language or another language from the list ? Run the next command to get a list of all locales available for your OS.</p> <p><code>dnf list glibc-langpack-*</code></p> <p>This will give you a list like</p> <pre><code>Installed Packages\nglibc-langpack-en.x86_64\nAvailable Packages\nglibc-langpack-aa.x86_64\n...\n\nglibc-langpack-zu.x86_64\n</code></pre> <p>Let's search for our Chinese locale to see if it is available. As you can see the code starts with zh</p> <pre><code># dnf list glibc-langpack-* | grep zh\nglibc-langpack-zh.x86_64\nglibc-langpack-lzh.x86_64\n</code></pre> <p>The command returns us 2 lines but as we have seen that the code was zh_CN we only have to install the first package.</p> <pre><code># dnf install glibc-langpack-zh.x86_64 -y\n</code></pre> <p>When we return now to our frontend we are able to select the Chinese language.</p> <p></p> Note <p>If your preferred language is not available in the Zabbix front-end, don't worry\u2014it simply means that the translation is either incomplete or not yet available. Zabbix is an open-source project that relies on community contributions for translations, so you can help improve it by contributing your own translations.</p> <pre><code>Visit the translation page at `https://translate.zabbix.com/` to assist with\nthe translation efforts. Once your translation is complete and reviewed,\nit will be included in the next minor patch version of Zabbix.\nYour contributions help make Zabbix more accessible and improve the overall\nuser experience for everyone.\n</code></pre> <p>When you're satisfied with the available translations, click Next. You will then be taken to a screen to verify that all prerequisites are met. If any prerequisites are not fulfilled, address those issues first. However, if everything is in order, you should be able to proceed by clicking Next.</p> <p></p> <p>On the next page, you'll configure the database connection parameters:</p> <ol> <li>Select the Database Type: Choose either MySQL or PostgreSQL depending on    your setup.</li> <li>Enter the Database Host: Provide the IP address or DNS name of your database    server. Use port 3306 for MariaDB/MySQL or 5432 for PostgreSQL.</li> <li>Enter the Database Name: Specify the name of your database. In our case,    it is zabbix. If you are using PostgreSQL, you will also need to provide the    schema name, which is zabbix_server in our case.</li> <li>Enter the Database User: Input the database user created for the web front-end,    such as zabbix-web. Enter the corresponding password for this user.</li> </ol> <p>Ensure that the Database TLS encryption option is not selected, and then click Next step to proceed.</p> <p></p> <p>You're almost finished with the setup! The final steps involve:</p> <ol> <li>Assigning an Instance Name: Choose a descriptive name for your Zabbix instance.</li> <li>Selecting the Timezone: Choose the timezone that matches your location or    your preferred time zone for the Zabbix interface.</li> <li>Setting the Default Time Format: Select the default time format you    prefer to use.</li> </ol> <p>Once these settings are configured, you can complete the setup and proceed with any final configuration steps as needed.</p> Note <p>It\u2019s a good practice to set your Zabbix server to the UTC timezone, especially when managing systems across multiple timezones. Using UTC helps ensure consistency in time-sensitive actions and events, as the server\u2019s timezone is often used for calculating and displaying time-related information.</p> <p></p> <p>After clicking Next step again, you'll be taken to a page confirming that the configuration was successful. Click Finish to complete the setup process.</p> <p></p> <p>We are now ready to login :</p> <p></p> <p>Login : Admin Password : zabbix</p> <p>In case you are like me and don't like the /zabbix path at the end of you url then there is an easy way to remove this. Edit you <code>httpd</code> config file and add the lines below and replace it with your own domain:</p> <pre><code># vi /etc/httpd/conf/httpd.conf\n</code></pre> <pre><code>NameVirtualHost 172.1.11.21:80\n\n&lt;VirtualHost \"your ip or dns\":80&gt;\n  ServerName zabbixserver.mydomain.org\n  ServerAlias zabbixserver\n  DocumentRoot /usr/share/zabbix\n&lt;/VirtualHost&gt;\n</code></pre> <p>Don't forget to restart the <code>httpd</code> service</p> <pre><code># systemctl restart httpd\n</code></pre> <p>This concludes our topic on setting up the Zabbix server. If you're interested in securing your front-end, I recommend checking out the topic Securing Zabbix for additional guidance and best practices.</p>"},{"location":"installation/installing-zabbixdb/","title":"Installing Zabbix DB Server","text":"<p>This chapter focuses on the installation of the Zabbix database. While Zabbix supports various SQL databases, we will concentrate on three primary options: PostgreSQL, MariaDB, and MySQL. It's worth noting that Oracle is also supported, but its support is deprecated. Zabbix 7 will be the final version supporting Oracle as a backend.</p> <p>We will outline the installation and configuration process for each database on a separate machine. However, it's important to understand that there's no strict requirement to install the database on a separate server from your Zabbix server. The choice between local and remote database installation depends on your specific needs and infrastructure.</p> <p>For most initial setups, a locally installed database will likely suffice. When opting for local installation, follow these best practices:</p> <ul> <li>Ensure the database is stored on separate disks from the operating system.</li> <li>Monitor performance as your system grows.</li> <li>Be prepared to migrate the database to a separate server if performance issues arise.</li> </ul> Note <p>Local connections are typically faster than connections over TCP. Therefore, moving the database to its own server isn't always the optimal solution. The best configuration depends on your specific requirements and system architecture.</p> <p>When deciding between local and remote database installation, consider the following factors:</p> <ol> <li>System Resources: Evaluate whether your Zabbix server has sufficient resources to handle both the application and database workload.</li> <li>Network Latency: Assess the impact of network latency on database queries if opting for a remote installation.</li> <li>Scalability: Consider future growth and the potential need for dedicated database hardware.</li> <li>Backup and Maintenance: Determine if separate database installation simplifies your backup and maintenance procedures.</li> </ol> <p>In the following sections, we'll dive into the installation and configuration processes for PostgreSQL, MariaDB, and MySQL. Each section will provide step-by-step instructions to ensure a smooth setup, regardless of whether you choose local or remote installation.</p>"},{"location":"installation/installing-zabbixdb/#installing-zabbix-with-mariadb","title":"Installing Zabbix with MariaDB","text":"<p>To begin the installation process for the MariaDB server, the first step involves manually creating a repository configuration file. This file, <code>mariadb.repo</code>, must be placed in the <code>/etc/yum.repos.d/</code> directory. The repository file will allow your package manager to locate and install the necessary MariaDB components.</p> <p>To create the MariaDB repository file, execute the following command in your terminal:</p>"},{"location":"installation/installing-zabbixdb/#add-the-mariadb-repository","title":"Add the MariaDB repository","text":"<pre><code># sudo nano /etc/yum.repos.d/mariadb.repo\n</code></pre> <p>This will open a text editor where you can input the repository configuration details. Once the repository is configured, you can proceed with the installation of MariaDB using your package manager.</p> <pre><code># vi /etc/yum.repos.d/mariadb.repo\n</code></pre> <p>The above command will open a new file, allowing you to define the repository configuration. After the file is created, you'll need to add the following content to configure the MariaDB repository. Ensure that the version specified, in this case, <code>10.11</code>, is supported by Zabbix by reviewing the latest version requirements for your specific Zabbix deployment.</p> <p>Here\u2019s the configuration you need to add:</p> <pre><code># MariaDB 10.11 RedHatEnterpriseLinux repository list - created 2023-11-01 14:20 UTC\n# https://mariadb.org/download/\n[mariadb]\nname = MariaDB\n# rpm.mariadb.org is a dynamic mirror if your preferred mirror goes offline. See https://mariadb.org/mirrorbits/ for details.\n# baseurl = https://rpm.mariadb.org/10.11/rhel/$releasever/$basearch\nbaseurl = https://mirror.23m.com/mariadb/yum/10.11/rhel/$releasever/$basearch\n# gpgkey = https://rpm.mariadb.org/RPM-GPG-KEY-MariaDB\ngpgkey = https://mirror.23m.com/mariadb/yum/RPM-GPG-KEY-MariaDB\ngpgcheck = 1\n</code></pre> <p>After saving the file, ensure that everything is properly set up and that your MariaDB version is compatible with your Zabbix version to avoid potential integration issues.</p> <p>Before proceeding with the MariaDB installation, it\u2019s a best practice to ensure your operating system is up-to-date with the latest patches and security fixes. This will help maintain system stability and compatibility with the software you're about to install.</p> <p>To update your OS, run the following command:</p> <pre><code># dnf update -y\n</code></pre> <p>This command will automatically fetch and install the latest updates available for your system, applying security patches, performance improvements, and bug fixes. Once the update process is complete, you can move forward with the MariaDB installation.</p>"},{"location":"installation/installing-zabbixdb/#install-the-mariadb-database","title":"Install the MariaDB database","text":"<p>With the operating system updated and the MariaDB repository configured, you are now ready to install the MariaDB server and client packages. This will provide the necessary components to run and manage your database.</p> <p>To install the MariaDB server and client, execute the following command:</p> <pre><code># dnf install MariaDB-server MariaDB-client\n</code></pre> <p>This command will download and install both the server and client packages, enabling you to set up, configure, and interact with your MariaDB database. Once the installation is complete, you can proceed to start and configure the MariaDB service.</p> <p>Now that MariaDB is installed, we need to enable the service to start automatically upon boot and start it immediately. Use the following command to accomplish this:</p> <pre><code># systemctl enable mariadb --now\n</code></pre> <p>This command will both enable and start the MariaDB service. Once the service is running, you can verify that the installation was successful by checking the version of MariaDB using the following command:</p> <pre><code># mysql -V\n</code></pre> <p>The expected output should resemble this:</p> <pre><code>mysql  Ver 15.1 Distrib 10.11.6-MariaDB, for Linux (x86_64) using EditLine wrapper\n</code></pre> <p>To ensure that the MariaDB service is running properly, you can check its status with the following command:</p> <pre><code># systemctl status mariadb\n</code></pre> <p>You should see an output similar to this, indicating that the MariaDB service is active and running:</p> <pre><code>\u25cf mariadb.service - MariaDB 10.11.6 database server\n     Loaded: loaded (/usr/lib/systemd/system/mariadb.service; enabled; preset: disabled)\n    Drop-In: /etc/systemd/system/mariadb.service.d\n             \u2514\u2500migrated-from-my.cnf-settings.conf\n     Active: active (running) since Sat 2023-11-18 19:19:36 CET; 2min 13s ago\n       Docs: man:mariadbd(8)\n             https://mariadb.com/kb/en/library/systemd/\n    Process: 41986 ExecStartPre=/bin/sh -c systemctl unset-environment _WSREP_START_POSITION (code=exited, status=0/SUCCESS)\n    Process: 41987 ExecStartPre=/bin/sh -c [ ! -e /usr/bin/galera_recovery ] &amp;&amp; VAR= ||   VAR=`cd /usr/bin/..; /usr/bin/galera_recovery`; [ $? -eq 0 ]   &amp;&amp; systemctl set-environment _WSREP_START&gt;\n    Process: 42006 ExecStartPost=/bin/sh -c systemctl unset-environment _WSREP_START_POSITION (code=exited, status=0/SUCCESS)\n   Main PID: 41995 (mariadbd)\n     Status: \"Taking your SQL requests now...\"\n      Tasks: 9 (limit: 12344)\n     Memory: 206.8M\n        CPU: 187ms\n</code></pre> <p>This confirms that your MariaDB server is up and running, ready for further configuration.</p>"},{"location":"installation/installing-zabbixdb/#securing-the-mariadb-database","title":"Securing the MariaDB database","text":"<p>To enhance the security of your MariaDB server, it's essential to remove unnecessary test databases, anonymous users, and set a root password. This can be done using the mariadb-secure-installation script, which provides a step-by-step guide to securing your database.</p> <p>Run the following command:</p> <pre><code># mariadb-secure-installation\n\nNOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB\n      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!\n\nIn order to log into MariaDB to secure it, we'll need the current\npassword for the root user. If you've just installed MariaDB, and\nhaven't set the root password yet, you should just press enter here.\n\nEnter current password for root (enter for none):\nOK, successfully used password, moving on...\n\nSetting the root password or using the unix_socket ensures that nobody\ncan log into the MariaDB root user without the proper authorisation.\n\nYou already have your root account protected, so you can safely answer 'n'.\n\nSwitch to unix_socket authentication [Y/n] n\n ... skipping.\n\nYou already have your root account protected, so you can safely answer 'n'.\n\nChange the root password? [Y/n] y\nNew password:\nRe-enter new password:\nPassword updated successfully!\nReloading privilege tables..\n ... Success!\n\n\nBy default, a MariaDB installation has an anonymous user, allowing anyone\nto log into MariaDB without having to have a user account created for\nthem.  This is intended only for testing, and to make the installation\ngo a bit smoother.  You should remove them before moving into a\nproduction environment.\n\nRemove anonymous users? [Y/n] y\n ... Success!\n\nNormally, root should only be allowed to connect from 'localhost'.  This\nensures that someone cannot guess at the root password from the network.\n\nDisallow root login remotely? [Y/n] y\n ... Success!\n\nBy default, MariaDB comes with a database named 'test' that anyone can\naccess.  This is also intended only for testing, and should be removed\nbefore moving into a production environment.\n\nRemove test database and access to it? [Y/n] y\n - Dropping test database...\n ... Success!\n - Removing privileges on test database...\n ... Success!\n\nReloading the privilege tables will ensure that all changes made so far\nwill take effect immediately.\n\nReload privilege tables now? [Y/n] y\n ... Success!\n\nCleaning up...\n\nAll done!  If you've completed all of the above steps, your MariaDB\ninstallation should now be secure.\n\nThanks for using MariaDB!\n</code></pre> <p>The mariadb-secure-installation script will guide you through several key steps:</p> <ol> <li>Set a root password if one isn't already set.</li> <li>Remove anonymous users.</li> <li>Disallow remote root logins.</li> <li>Remove the test database.</li> <li>Reload the privilege tables to ensure the changes take effect.</li> </ol> <p>Once complete, your MariaDB instance will be significantly more secure.</p>"},{"location":"installation/installing-zabbixdb/#create-the-zabbix-database","title":"Create the Zabbix database","text":"<p>With MariaDB now set up and secured, we can move on to creating the database for Zabbix. This database will store all the necessary data related to your Zabbix server, including configuration information and monitoring data.</p> <p>Follow these steps to create the Zabbix database:</p> <ul> <li>Log in to the MariaDB shell as the root user:</li> </ul> <p>You'll be prompted to enter the root password that you set during the mariadb-secure-installation process.</p> <pre><code># mysql -uroot -p\n</code></pre> <ul> <li>Create the Zabbix database:</li> </ul> <p>Once you're logged into the MariaDB shell, run the following command to create a database for Zabbix:</p> <pre><code>MariaDB [(none)]&gt; CREATE DATABASE zabbix CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\n</code></pre> <p>This command creates a new database named zabbix with the UTF-8 character set, which is required for Zabbix.</p> <ul> <li>Create a dedicated user for Zabbix and grant the necessary privileges: Next, you need to create a user that Zabbix will use to access the database. Replace password with a strong password of your choice.</li> </ul> <pre><code>MariaDB [(none)]&gt; CREATE USER 'zabbix-web'@'&lt;zabbix server ip&gt;' IDENTIFIED BY '&lt;password&gt;';\nMariaDB [(none)]&gt; CREATE USER 'zabbix-srv'@'&lt;zabbix server ip&gt;' IDENTIFIED BY '&lt;password&gt;';\nMariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON zabbix.* TO 'zabbix-srv'@'&lt;zabbix server ip&gt;';\nMariaDB [(none)]&gt; GRANT SELECT, UPDATE, DELETE, INSERT ON zabbix.* TO 'zabbix-web'@'&lt;zabbix server ip&gt;';\nMariaDB [(none)]&gt; FLUSH PRIVILEGES;\n</code></pre> <p>This creates new users for zabbix-web and zabbix-srv, grants them  access to the zabbix database, and ensures that the privileges are applied immediately.</p> <ul> <li>In some cases, especially when setting up Zabbix with MariaDB, you might encounter issues related to stored functions and triggers if binary logging is enabled.</li> </ul> <p>To address this, you need to set the log_bin_trust_function_creators option to 1 in the MariaDB configuration file. This allows non-root users to create stored functions and triggers without requiring SUPER privileges, which are restricted when binary logging is enabled.</p> <pre><code>MariaDB [(none)]&gt; SET GLOBAL log_bin_trust_function_creators = 1;\nMariaDB [(none)]&gt; QUIT\n</code></pre> <p>At this point, your Zabbix database is ready, and you can proceed with configuring the Zabbix server to connect to the database.</p> Warning <p>In the Zabbix documentation, it is explicitly stated that deterministic triggers need to be created during the schema import. On MySQL and MariaDB systems, this requires setting <code>GLOBAL log_bin_trust_function_creators = 1</code> if binary logging is enabled, and you lack superuser privileges.</p> <p>If the <code>log_bin_trust_function_creators</code> option is not set in the MySQL configuration file, it will block the creation of these triggers during schema import. This is essential because, without superuser access, non-root users cannot create triggers or stored functions unless this setting is applied.</p> <p>To summarize:</p> <ul> <li>Binary logging enabled: If binary logging is enabled and the user does not have superuser privileges, the creation of necessary Zabbix triggers will fail unless <code>log_bin_trust_function_creators = 1</code> is set.</li> <li>Solution: Add <code>log_bin_trust_function_creators = 1</code> to the <code>[mysqld]</code>  section in your MySQL/MariaDB configuration file or temporarily set it at runtime with <code>SET GLOBAL log_bin_trust_function_creators = 1</code> if you have sufficient permissions.</li> </ul> <p>This ensures that Zabbix can successfully create the required triggers during schema import without encountering privilege-related errors.</p>"},{"location":"installation/installing-zabbixdb/#add-the-zabbix-repository-and-populate-the-db","title":"Add the Zabbix repository and populate the DB","text":"<pre><code># rpm -Uvh https://repo.zabbix.com/zabbix/6.5/rocky/9/x86_64/zabbix-release-6.5-2.el9.noarch.rpm\n# dnf clean all\n# dnf install zabbix-sql-scripts\n</code></pre> <p>Upload the data from zabbix (db structure, images, user, ... )</p> <pre><code># zcat /usr/share/zabbix-sql-scripts/mysql/server.sql.gz | mysql --default-character-set=utf8mb4 -uroot -p zabbix\n</code></pre> Warning <p>Depending on the speed of your hardware or virtual machine, the process may take anywhere from a few seconds to several minutes. Please be patient and avoid canceling the operation; just wait for the prompt to appear.</p> <p>Log back into your MariaDB Database as root</p> <pre><code># mysql -uroot -p\n</code></pre> <p>Once the import of the Zabbix schema is complete and you no longer need the <code>log_bin_trust_function_creators</code> global parameter, it is a good practice to remove it for security reasons.</p> <p>To revert the change and set the global parameter back to <code>0</code>, use the following command in the MariaDB shell:</p> <pre><code>MariaDB [(none)]&gt; SET GLOBAL log_bin_trust_function_creators = 0;\nQuery OK, 0 rows affected (0.001 sec)\n</code></pre> <p>This command will disable the setting, ensuring that the server's security posture remains robust.</p>"},{"location":"installation/installing-zabbixdb/#configure-the-firewall","title":"Configure the firewall","text":"<p>Configuring Firewall Rules for MariaDB Access To complete our database setup, we need to configure the firewall to allow incoming connections for the MariaDB database from our Zabbix server. Currently, no connections are accepted. Let's examine the current firewall configuration:</p> <pre><code># firewall-cmd --list-all\npublic (active)\n  target: default\n  icmp-block-inversion: no\n  interfaces: enp0s3 enp0s8\n  sources:\n  services: cockpit dhcpv6-client  ssh\n  ports:\n  protocols:\n  forward: yes\n  masquerade: no\n  forward-ports:\n  source-ports:\n  icmp-blocks:\n  rich rules:\n</code></pre> <p>To securely allow MariaDB access, we'll create a dedicated zone and open port 3306/tcp only for the Zabbix server's IP address:</p> <ul> <li>Create a new firewall zone for MariaDB:</li> </ul> <pre><code># firewall-cmd --new-zone=mariadb-access --permanent\nsuccess\n</code></pre> <ul> <li>Reload the firewall to apply changes:</li> </ul> <pre><code># firewall-cmd --reload\nsuccess\n</code></pre> <ul> <li>Verify the new zone has been added:</li> </ul> <pre><code># firewall-cmd --get-zones\nblock dmz drop external home internal mariadb-access nm-shared public trusted work\n</code></pre> <ul> <li>Add the Zabbix server's IP to the new zone:</li> </ul> <pre><code># firewall-cmd --zone=mariadb-access --add-source=&lt;zabbix-serverip&gt; --permanent\n</code></pre> <ul> <li>Open port 3306/tcp in the new zone:</li> </ul> <pre><code>success\n# firewall-cmd --zone=mariadb-access --add-port=3306/tcp  --permanent\n</code></pre> <ul> <li>Reload the firewall again to apply the latest changes:</li> </ul> <pre><code>success\n# firewall-cmd --reload\n</code></pre> <p>To verify the new firewall rules, inspect the mariadb-access zone:</p> <pre><code># firewall-cmd --zone=mariadb-access --list-all\n\nmariadb-access (active)\n  target: default\n  icmp-block-inversion: no\n  interfaces:\n  sources: &lt;ip from zabbix-server&gt;\n  services:\n  ports: 3306/tcp\n  protocols:\n  forward: no\n  masquerade: no\n  forward-ports:\n  source-ports:\n  icmp-blocks:\n  rich rules:\n</code></pre> <p>With these configurations in place, the database server is now ready to accept connections from the Zabbix server. You can proceed with the next task: Installing the Zabbix Server</p>"},{"location":"installation/installing-zabbixdb/#installing-zabbix-with-mysql","title":"Installing Zabbix with MySQL","text":"<p>Before proceeding with the MySQL server installation, it's crucial to set up the appropriate MySQL repository. This ensures that we install the correct version compatible with our Zabbix implementation.</p> <ul> <li> <p>Verify Supported MySQL Versions Prior to installation, consult the official Zabbix documentation to confirm the supported MySQL versions. This step is critical for several reasons:</p> </li> <li> <p>Compatibility: Ensures that the MySQL version works seamlessly with your Zabbix installation.</p> </li> <li>Support: Avoids installing versions that are no longer supported or maintained.</li> <li> <p>Performance: Guarantees optimal performance and utilization of features specific to Zabbix requirements.</p> </li> <li> <p>Create MySQL Repository To install the proper MySQL server files, you need to add the official MySQL repository to your system. This process typically involves the following steps: a. Download the MySQL repository configuration file. b. Add the repository to your system's package manager. c. Update the package manager's cache to recognize the new repository. The exact commands for these steps may vary depending on your operating system and the specific MySQL version required for your Zabbix installation.</p> </li> <li> <p>Prepare for Installation Once the repository is set up and you've confirmed the appropriate MySQL version, you'll be ready to proceed with the actual installation of the MySQL server.</p> </li> </ul> <p>By following these preliminary steps, you ensure a smooth installation process and avoid potential compatibility issues down the line. The next section will cover the actual installation procedure for the MySQL server.</p> <p>documentation to see what version is supported so you don't install a version that is not supported or is not supported anymore.</p>"},{"location":"installation/installing-zabbixdb/#add-the-mysql-repo","title":"Add the MySQL repo","text":"<p>Run the following command to install the MySQL repo for version 8.0</p> <p><code># dnf -y install https://dev.mysql.com/get/mysql80-community-release-el9-1.noarch.rpm</code></p> Note <p>\"If you install this on RedHat 8 and higher or alternatives like CentOS, Rocky or Alma 8 then you need to disable the OS provided MySQL module by running 'module disable mysql'.\"</p> <p>Let's update our OS first with the latest patches</p> <pre><code># dnf update -y\n</code></pre> <p>This command will automatically fetch and install the latest updates available for your system, applying security patches, performance improvements, and bug fixes. Once the update process is complete, you can move forward with the MariaDB installation.</p>"},{"location":"installation/installing-zabbixdb/#installing-the-mysql-database","title":"Installing the MySQL database","text":"<p>With the operating system updated and the MySQL repository configured, you are now ready to install the MySQL server and client packages. This will provide the necessary components to run and manage your database.</p> <p>To install the MySQL server, execute the following command:</p> <p><code># dnf -y install mysql-community-server</code></p> <p>Now that MySQL is installed, we need to enable the service to start automatically upon boot and start it immediately. Use the following command to accomplish this:</p> <pre><code># systemctl enable mysqld --now\n</code></pre> <p>Once the installation is complete, you can verify the version of the MySQL server by using the following command:</p> <p><code># mysql -V</code></p> <p>The output should look like this:</p> <p><code>mysql  Ver 8.0.35 for Linux on x86_64 (MySQL Community Server - GPL)</code></p> <p>To ensure that the MySQL service is running properly, you can check its status with the following command:</p> <pre><code># systemctl status mysqld\n\n\u25cf mysqld.service - MySQL Server\n     Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; preset: disabled)\n     Active: active (running) since Mon 2023-11-20 22:15:51 CET; 1min 15s ago\n       Docs: man:mysqld(8)\n             http://dev.mysql.com/doc/refman/en/using-systemd.html\n    Process: 44947 ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=0/SUCCESS)\n   Main PID: 45012 (mysqld)\n     Status: \"Server is operational\"\n      Tasks: 37 (limit: 12344)\n     Memory: 448.3M\n        CPU: 4.073s\n     CGroup: /system.slice/mysqld.service\n             \u2514\u250045012 /usr/sbin/mysqld\n\nNov 20 22:15:43 mysql-db systemd[1]: Starting MySQL Server...\nNov 20 22:15:51 mysql-db systemd[1]: Started MySQL Server.\n</code></pre>"},{"location":"installation/installing-zabbixdb/#securing-the-mysql-database","title":"Securing the MySQL database","text":"<p>MySQL will secure our database with a random root password that is generated when we install the database. First thing we need to do is replace it with our own password. To find what the password is we need to read the log file with the following command:</p> <pre><code># grep 'temporary password' /var/log/mysqld.log\n</code></pre> <p>Change the root password as soon as possible by logging in with the generated, temporary password and set a custom password for the superuser account:</p> <pre><code># mysql -uroot -p\n</code></pre> <pre><code>mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED BY '&lt;my mysql password&gt;';\nmysql&gt; quit\n</code></pre> <p>To enhance the security of your MySQL server, it's essential to remove unnecessary test databases, anonymous users, and set a root password. This can be done using the mysql-secure-installation script, which provides a step-by-step guide to securing your database.</p> Note <p>\"There is no need to reset the root password for MySQL again as we have reset it already. The next step is optional but recommended.\"</p> <pre><code># mysql_secure_installation\n\nSecuring the MySQL server deployment.\n\nEnter password for user root:\nThe 'validate_password' component is installed on the server.\nThe subsequent steps will run with the existing configuration\nof the component.\nUsing existing password for root.\n\nEstimated strength of the password: 100\nChange the password for root ? ((Press y|Y for Yes, any other key for No) : n\n\n ... skipping.\nBy default, a MySQL installation has an anonymous user,\nallowing anyone to log into MySQL without having to have\na user account created for them. This is intended only for\ntesting, and to make the installation go a bit smoother.\nYou should remove them before moving into a production\nenvironment.\n\nRemove anonymous users? (Press y|Y for Yes, any other key for No) : y\nSuccess.\n\n\nNormally, root should only be allowed to connect from\n'localhost'. This ensures that someone cannot guess at\nthe root password from the network.\n\nDisallow root login remotely? (Press y|Y for Yes, any other key for No) : y\nSuccess.\n\nBy default, MySQL comes with a database named 'test' that\nanyone can access. This is also intended only for testing,\nand should be removed before moving into a production\nenvironment.\n\n\nRemove test database and access to it? (Press y|Y for Yes, any other key for No) : y\n - Dropping test database...\nSuccess.\n\n - Removing privileges on test database...\nSuccess.\n\nReloading the privilege tables will ensure that all changes\nmade so far will take effect immediately.\n\nReload privilege tables now? (Press y|Y for Yes, any other key for No) : y\nSuccess.\n\nAll done!\n</code></pre> <p>The mysql-secure-installation script will guide you through several key steps:</p> <ol> <li>Set a root password if one isn't already set.</li> <li>Remove anonymous users.</li> <li>Disallow remote root logins.</li> <li>Remove the test database.</li> <li>Reload the privilege tables to ensure the changes take effect.</li> </ol> <p>Once complete, your MySQL instance will be significantly more secure.</p>"},{"location":"installation/installing-zabbixdb/#create-the-zabbix-databases","title":"Create the Zabbix databases","text":"<p>With MySQL now set up and secured, we can move on to creating the database for Zabbix. This database will store all the necessary data related to your Zabbix server, including configuration information and monitoring data.</p> <p>Follow these steps to create the Zabbix database:</p> <ol> <li>Log in to the MySQL shell as the root user:</li> </ol> <pre><code># mysql -u root -p\n</code></pre> <p>You'll be prompted to enter the root password that you set during the mysql-secure-installation process.</p> <p>Once you're logged into the MySQL shell, run the following command to create a database for Zabbix:</p> <pre><code>mysql&gt; CREATE DATABASE zabbix CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\n</code></pre> <p>This command creates a new database named zabbix with the UTF-8 character set, which is required for Zabbix.</p> <ul> <li>Create a dedicated user for Zabbix and grant the necessary privileges: Next, you need to create a user that Zabbix will use to access the database. Replace password with a strong password of your choice.</li> </ul> <pre><code>mysql&gt; CREATE USER 'zabbix-web'@'&lt;zabbix server ip&gt;' IDENTIFIED BY '&lt;password&gt;';\nmysql&gt; CREATE USER 'zabbix-srv'@'&lt;zabbix server ip&gt;' IDENTIFIED BY '&lt;password&gt;';\nmysql&gt; GRANT ALL PRIVILEGES ON zabbix.* TO 'zabbix-srv'@'&lt;zabbix server ip&gt;';\nmysql&gt; GRANT SELECT, UPDATE, DELETE, INSERT ON zabbix.* TO 'zabbix-web'@'&lt;zabbix server ip&gt;';\nmysql&gt; FLUSH PRIVILEGES;\n</code></pre> <p>This creates new users for zabbix-web and zabbix-srv, grants them  access to the zabbix database, and ensures that the privileges are applied immediately.</p> <ul> <li>In some cases, especially when setting up Zabbix with MariaDB, you might encounter issues related to stored functions and triggers if binary logging is enabled.</li> </ul> <p>To address this, you need to set the log_bin_trust_function_creators option to 1 in the MariaDB configuration file. This allows non-root users to create stored functions and triggers without requiring SUPER privileges, which are restricted when binary logging is enabled.</p> <pre><code>mysql&gt; SET GLOBAL log_bin_trust_function_creators = 1;\nmysql&gt; QUIT\n</code></pre> <p>At this point, your Zabbix database is ready, and you can proceed with configuring the Zabbix server to connect to the database.</p> Warning <p>In the Zabbix documentation, it is explicitly stated that deterministic triggers need to be created during the schema import. On MySQL and MariaDB systems, this requires setting <code>GLOBAL log_bin_trust_function_creators = 1</code> if binary logging is enabled, and you lack superuser privileges.</p> <p>If the <code>log_bin_trust_function_creators</code> option is not set in the MySQL configuration file, it will block the creation of these triggers during schema import. This is essential because, without superuser access, non-root users cannot create triggers or stored functions unless this setting is applied.</p> <p>To summarize:</p> <ul> <li>Binary logging enabled: If binary logging is enabled and the user does not have superuser privileges, the creation of necessary Zabbix triggers will fail unless <code>log_bin_trust_function_creators = 1</code> is set.</li> <li>Solution: Add <code>log_bin_trust_function_creators = 1</code> to the <code>[mysqld]</code> section in your MySQL/MariaDB configuration file or temporarily set it at runtime with <code>SET GLOBAL log_bin_trust_function_creators = 1</code> if you have sufficient permissions.</li> </ul> <p>This ensures that Zabbix can successfully create the required triggers during schema import without encountering privilege-related errors.</p>"},{"location":"installation/installing-zabbixdb/#add-the-zabbix-repository-and-populate-the-mysql-db","title":"Add the Zabbix repository and populate the MySQL DB","text":"<pre><code># rpm -Uvh https://repo.zabbix.com/zabbix/6.5/rocky/9/x86_64/zabbix-release-6.5-2.el9.noarch.rpm\n# dnf clean all\n# dnf install zabbix-sql-scripts\n</code></pre> <p>Now let;s upload the data from zabbix (db structure, images, user, ... )</p> <pre><code># zcat /usr/share/zabbix-sql-scripts/mysql/server.sql.gz | mysql --default-character-set=utf8mb4 -uroot -p zabbix\nEnter password:\n</code></pre> Warning <p>Depending on the speed of your hardware or virtual machine, the process may take anywhere from a few seconds to several minutes. Please be patient and avoid canceling the operation; just wait for the prompt to appear.</p> <p>Log back into your MySQL Database as root</p> <pre><code># mysql -uroot -p\n</code></pre> <p>Once the import of the Zabbix schema is complete and you no longer need the <code>log_bin_trust_function_creators</code> global parameter, it is a good practice to remove it for security reasons.</p> <p>To revert the change and set the global parameter back to <code>0</code>, use the following command in the MariaDB shell:</p> <pre><code>mysql&gt; SET GLOBAL log_bin_trust_function_creators = 0;\nQuery OK, 0 rows affected (0.001 sec)\n</code></pre> <p>This command will disable the setting, ensuring that the server's security posture remains robust.</p>"},{"location":"installation/installing-zabbixdb/#configure-the-firewall_1","title":"Configure the firewall","text":"<p>Configuring Firewall Rules for MySQL Access To complete our database setup, we need to configure the firewall to allow incoming connections for the MySQL database from our Zabbix server. Currently, no connections are accepted. Let's examine the current firewall configuration:</p> <pre><code># firewall-cmd --list-all\npublic (active)\n  target: default\n  icmp-block-inversion: no\n  interfaces: enp0s3 enp0s8\n  sources:\n  services: cockpit dhcpv6-client  ssh\n  ports:\n  protocols:\n  forward: yes\n  masquerade: no\n  forward-ports:\n  source-ports:\n  icmp-blocks:\n  rich rules:\n</code></pre> <p>To securely allow MySQL access, we'll create a dedicated zone and open port 3306/tcp only for the Zabbix server's IP address:</p> <ul> <li>Create a new firewall zone for MariaDB:</li> </ul> <pre><code># firewall-cmd --new-zone=mysql-access --permanent\nsuccess\n</code></pre> <ul> <li>Reload the firewall to apply changes:</li> </ul> <pre><code># firewall-cmd --reload\nsuccess\n</code></pre> <ul> <li>Verify the new zone has been added:</li> </ul> <pre><code># firewall-cmd --get-zones\nblock dmz drop external home internal mysql-access nm-shared public trusted work\n</code></pre> <ul> <li>Add the Zabbix server's IP to the new zone:</li> </ul> <pre><code># firewall-cmd --zone=mysql-access --add-source=&lt;zabbix-serverip&gt; --permanent\n</code></pre> <ul> <li>Open port 3306/tcp in the new zone:</li> </ul> <pre><code>success\n# firewall-cmd --zone=mysql-access --add-port=3306/tcp  --permanent\n</code></pre> <ul> <li>Reload the firewall again to apply the latest changes:</li> </ul> <pre><code>success\n# firewall-cmd --reload\n</code></pre> <p>To verify the new firewall rules, inspect the mysql-access zone:</p> <pre><code># firewall-cmd --list-all --zone=mysql-access\n</code></pre> <pre><code>mysql-access (active)\n  target: default\n  icmp-block-inversion: no\n  interfaces:\n  sources: &lt;ip from the zabbix-server&gt;\n  services:\n  ports: 3306/tcp\n  protocols:\n  forward: no\n  masquerade: no\n  forward-ports:\n  source-ports:\n  icmp-blocks:\n  rich rules:\n</code></pre> <p>With these configurations in place, the database server is now ready to accept connections from the Zabbix server. You can proceed with the next task: Installing the Zabbix Server</p>"},{"location":"installation/installing-zabbixdb/#installing-zabbix-with-postgresql","title":"Installing Zabbix with PostgreSQL","text":"<p>For our DB setup with PostgreSQL we need to add our PostgreSQL repository first to the system. As of writing PostgreSQL 13-16 are supported but best is to have a look before you install it as new versions may be supported and older maybe unsupported both by Zabbix and PostgreSQL. Usually it's a good idea to go with the latest version that is supported by Zabbix. Zabbix also supports the extension TimescaleDB this is someting we will talk later about. As you will see the setup from PostgreSQL is very different from MySQL not only the installation but also securing the DB.</p> <p>The table of compatibility can be found here.</p>"},{"location":"installation/installing-zabbixdb/#add-the-postgresql-repo","title":"Add the PostgreSQL repo","text":"<p>So let us start first setting up our PostgreSQL repository with the folowing commands.</p> <pre><code># Install the repository RPM:\nsudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\n# Disable the built-in PostgreSQL module:\nsudo dnf -qy module disable postgresql\n\n# Install PostgreSQL:\nsudo dnf install -y postgresql16-server\n\n# Initialize the database and enable automatic start:\nsudo /usr/pgsql-16/bin/postgresql-16-setup initdb\nsudo systemctl enable postgresql-16 --now\n</code></pre>"},{"location":"installation/installing-zabbixdb/#securing-the-postgresql-database","title":"Securing the PostgreSQL database","text":"<p>As you've pointed out, PostgreSQL handles access permissions differently from MySQL and MariaDB. PostgreSQL relies on a file called pg_hba.conf to manage who can access the database, from where, and what encryption method is used for authentication.</p> Note <p>Client authentication in PostgreSQL is configured through the pg_hba.conf file, where \"HBA\" stands for Host-Based Authentication. This file specifies which users can access the database, from which hosts, and how they are authenticated. For further details, you can refer to the official PostgreSQL documentation.\"</p> <p>Add the following lines, the order here is important.</p> <pre><code># vi /var/lib/pgsql/16/data/pg_hba.conf\n</code></pre> <pre><code># \"local\" is for Unix domain socket connections only\nlocal   zabbix          zabbix-srv                               scram-sha-256\nlocal   all             all                                      peer\n# IPv4 local connections:\nhost    zabbix          zabbix-srv      &lt;ip from zabbix server/24&gt; scram-sha-256\nhost    zabbix          zabbix-web      &lt;ip from zabbix server/24&gt; scram-sha-256\nhost    all             all             127.0.0.1/32             scram-sha-256\n</code></pre> <p>After we changed the pg_hba file don't forget to restart postgres else the settings will not be applied. But before we restart let us also edit the file postgresql.conf and allow our database to listen on our network interface for incomming connections from the zabbix server. Postgresql will standard only allow connections from the socket.</p> <pre><code># vi /var/lib/pgsql/16/data/postgresql.conf\n</code></pre> <p>To configure PostgreSQL to listen on all network interfaces, you need to modify the <code>postgresql.conf</code> file. Locate the following line:</p> <pre><code>#listen_addresses = 'localhost'\n</code></pre> <p>Replace it with:</p> <pre><code>listen_addresses = '*'\n</code></pre> <p>This will enable PostgreSQL to accept connections from any network interface, not just the local machine. After making this change, restart the PostgreSQL service to apply the new settings:</p> <pre><code># systemctl restart postgresql-16\n</code></pre> <p>If the service fails to restart, review the <code>pg_hba.conf</code> file for any syntax errors, as incorrect entries here may prevent PostgreSQL from starting.</p> <p>Next, to prepare your PostgreSQL instance for Zabbix, you\u2019ll need to create the necessary database tables. Begin by installing the Zabbix repository, as you did for the Zabbix server. Then, install the appropriate Zabbix package that contains the predefined tables, images, icons, and other database elements needed for the Zabbix application.</p>"},{"location":"installation/installing-zabbixdb/#add-the-zabbix-repository-and-populate-the-pgsql-db","title":"Add the Zabbix repository and populate the PgSQL DB","text":"<p>To begin, add the Zabbix repository to your system by running the following commands:</p> <pre><code># dnf install https://repo.zabbix.com/zabbix/6.0/rhel/9/x86_64/zabbix-release-6.0-4.el9.noarch.rpm -y\n# dnf install zabbix-sql-scripts -y\n</code></pre> <p>With the necessary packages installed, you are now ready to create the Zabbix users for both the server and frontend.</p> <p>First, switch to the <code>postgres</code> user and create the Zabbix server database user:</p> <pre><code># su - postgres\n# createuser --pwprompt zabbix-srv\nEnter password for new role: &lt;server-password&gt;\nEnter it again: &lt;server-password&gt;\n</code></pre> <p>Next, create the Zabbix frontend user, which will be used to connect to the database:</p> <pre><code># createuser --pwprompt zabbix-web\nEnter password for new role: &lt;frontend-password&gt;\nEnter it again: &lt;frontend-password&gt;\n</code></pre> <p>After creating the users, you need to prepare the database schema. As the root user, unzip the necessary schema files by running the following command:</p> <pre><code># gzip -d /usr/share/zabbix-sql-scripts/postgresql/server.sql.gz\n</code></pre> <p>This will extract the database schema required for the Zabbix server.</p> <p>Now that the users are created, the next step is to create the Zabbix database. First, switch to the <code>postgres</code> user and execute the following command to create the database with the owner set to <code>zabbix-srv</code>:</p> <pre><code># su - postgres\n# createdb -E Unicode -O zabbix-srv zabbix\n</code></pre> <p>Once the database is created, you should verify the connection and ensure that the correct user session is active. To do this, log into the <code>zabbix</code> database using the <code>zabbix-srv</code> user:</p> <pre><code># psql -d zabbix -U zabbix-srv\n</code></pre> <p>After logging in, run the following SQL query to confirm that both the <code>session_user</code> and <code>current_user</code> are set to <code>zabbix-srv</code>:</p> <pre><code>zabbix=&gt; SELECT session_user, current_user;\n session_user | current_user\n--------------+--------------\n zabbix-srv   | zabbix-srv\n(1 row)\n</code></pre> <p>If the output matches, you are successfully connected to the database with the correct user.</p> <p>We are now ready to create our database zabbix. Become user postgres again and run next command to create the database as our user zabbix-srv:</p> <pre><code># su - postgres\n# createdb -E Unicode -O zabbix-srv  zabbix\n</code></pre> <p>Let's verify that we are really connected to the database with the correct session. Login from the Postgres shell on the zabbix database</p> <pre><code># psql -d zabbix -U zabbix-srv\n</code></pre> <p>Make sure we are logged in with our correct user <code>zabbix-srv</code>.</p> <pre><code>zabbix=&gt; SELECT session_user, current_user;\n session_user | current_user\n--------------+--------------\n zabbix-srv   | zabbix-srv\n(1 row)\n</code></pre> <p>PostgreSQL indeed differs significantly from MySQL or MariaDB in several aspects, and one of the key features that sets it apart is its use of schemas. Unlike MySQL, where databases are more standalone, PostgreSQL's schema system provides a structured, multi-user environment within a single database.</p> <p>Schemas act as logical containers within a database, enabling multiple users or applications to access and manage data independently without conflicts. This feature is especially valuable in environments where several users or applications need to interact with the same database concurrently. Each user or application can have its own schema, preventing accidental interference with each other\u2019s data.</p> Note <p>PostgreSQL comes with a default schema, typically called <code>public</code>, but it's generallya best practice to create custom schemas to better organize and separate database objects, especially in complex or multi-user environments.</p> <p>For more in-depth information, I recommend checking out the detailed guide at this URI, which explains the benefits and use cases for schemas in PostgreSQL.</p> <p>To finalize the database setup for Zabbix, we need to configure schema permissions for both the <code>zabbix-srv</code> and <code>zabbix-web</code> users.</p> <p>First, we create a custom schema named <code>zabbix_server</code> and assign ownership to the <code>zabbix-srv</code> user:</p> <pre><code>zabbix=&gt; CREATE SCHEMA zabbix_server AUTHORIZATION \"zabbix-srv\";\nCREATE SCHEMA\n</code></pre> <p>Next, we set the search path to the <code>zabbix_server</code> schema so that it's the default for the current session:</p> <pre><code>zabbix=&gt; SET search_path TO \"zabbix_server\";\n</code></pre> <p>To confirm the schema setup, you can list the existing schemas:</p> <pre><code>zabbix=&gt; \\dn\n          List of schemas\n     Name      |       Owner\n---------------+-------------------\n public        | pg_database_owner\n zabbix_server | zabbix-srv\n(2 rows)\n</code></pre> <p>At this point, the <code>zabbix-srv</code> user has full access to the schema, but the <code>zabbix-web</code> user still needs appropriate permissions to connect and interact with the database. First, we grant <code>USAGE</code> privileges on the schema to allow <code>zabbix-web</code> to connect:</p> <pre><code>zabbix=# GRANT USAGE ON SCHEMA zabbix_server TO \"zabbix-web\";\nGRANT\n</code></pre> <p>However, <code>zabbix-web</code> still cannot perform any operations on the tables or sequences. To allow basic data interaction without giving too many privileges, grant the following permissions:</p> <ul> <li>For tables: <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code>.</li> <li>For sequences: <code>SELECT</code> and <code>UPDATE</code>.</li> </ul> <pre><code>zabbix=# GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA zabbix_server TO \"zabbix-web\";\nGRANT\n</code></pre> <pre><code>zabbix=# GRANT SELECT, UPDATE ON ALL SEQUENCES IN SCHEMA zabbix_server TO \"zabbix-web\";\nGRANT\n</code></pre> <p>Now, the <code>zabbix-web</code> user has appropriate access to interact with the schema while maintaining security by limiting permissions to essential operations.</p> <p>With the users and permissions set up correctly, you can now populate the database with the Zabbix schema and other required elements. Follow these steps:</p> <ol> <li>Log in as the <code>postgres</code> user if you are not already:</li> </ol> <p><code>bash    # su - postgres</code></p> <ol> <li>Connect to the Zabbix database and run the SQL script to create the necessar y tables and insert initial data. Enter the <code>psql</code> shell for the <code>zabbix</code> database:</li> </ol> <p><code>bash    # psql -d zabbix -U zabbix-srv</code></p> <ol> <li>Execute the SQL file to populate the database. Run the following command in the <code>psql</code> shell:</li> </ol> <p><code>sql    zabbix=# \\i /usr/share/zabbix-sql-scripts/postgresql/server.sql</code></p> <p>Warning: Depending on your hardware or VM performance, this process can    take anywhere from a few seconds to several minutes.    Please be patient and avoid canceling the operation.</p> <ol> <li>Monitor the progress as the script runs. You will see output similar to:</li> </ol> <p><code>plaintext    CREATE TABLE    CREATE INDEX    ...    ...    INSERT 0 1    INSERT 0 1    INSERT 0 1    INSERT 0 1    COMMIT</code></p> <p>Once the script completes and you return to the <code>zabbix=#</code> prompt, the database    should be successfully populated with all the required tables, schemas, images,    and other elements needed for Zabbix.</p> Note <p>If you encounter the following error during the SQL import: <code>vbnet psql:/usr/share/zabbix-sql-scripts/postgresql/server.sql:7: ERROR: no schema has been selected to create in</code> It indicates that the search_path setting might not have been correctly applied. This setting is crucial because it specifies the schema where the tables and other objects should be created. By correctly setting the search path, you ensure that the SQL script will create tables and other objects in the intended schema.</p> <p>To ensure that the Zabbix tables were created successfully and have the correct permissions, you can verify the table list and their ownership using the <code>psql</code> command:</p> <ul> <li>List the Tables: Use the following command to list all tables in the <code>zabbix_server</code> schema:</li> </ul> <p><code>sql    zabbix=# \\dt</code></p> <p>You should see a list of tables with their schema, name, type, and owner. For example:</p> <pre><code>Schema         | Name                       | Type  | Owner\n----------------+----------------------------+-------+------------\nzabbix_server  | acknowledges               | table | zabbix-srv\nzabbix_server  | actions                    | table | zabbix-srv\nzabbix_server  | alerts                     | table | zabbix-srv\nzabbix_server  | auditlog                   | table | zabbix-srv\nzabbix_server  | autoreg_host               | table | zabbix-srv\n...\nzabbix_server  | usrgrp                      | table | zabbix-srv\nzabbix_server  | valuemap                    | table | zabbix-srv\nzabbix_server  | valuemap_mapping            | table | zabbix-srv\nzabbix_server  | widget                      | table | zabbix-srv\nzabbix_server  | widget_field                | table | zabbix-srv\n(173 rows)\n</code></pre> <ul> <li>Verify Permissions: Confirm that the <code>zabbix-srv</code> user owns the tables and has the necessary permissions. You can check permissions for specific tables using the <code>\\dp</code> command:</li> </ul> <p><code>sql    zabbix=# \\dp zabbix_server.*</code></p> <p>This will display the access privileges for all tables in the <code>zabbix_server</code>    schema. Ensure that <code>zabbix-srv</code> has the required privileges.</p> <p>If everything looks correct, your tables are properly created and the <code>zabbix-srv</code> user has the appropriate ownership and permissions. If you need to adjust any permissions, you can do so using the <code>GRANT</code> commands as needed.</p> Note <p>If you prefer not to set the search path manually each time you log in as the <code>zabbix-srv</code> user, you can configure PostgreSQL to automatically use the desired search path. Run the following SQL command to set the default search path for the <code>zabbix-srv</code> role:</p> <p><code>sql zabbix=&gt; ALTER ROLE \"zabbix-srv\" SET search_path = \"$user\", public, zabbix_server;</code></p> <p>This command ensures that every time the <code>zabbix-srv</code> user connects to the database, the <code>search_path</code> is automatically set to include <code>$user</code>, <code>public</code>, and <code>zabbix_server</code>.</p> <p>If you are ready you can exit the database and return as user root.</p> <pre><code>zabbix=&gt;  \\q\n# exit\n</code></pre>"},{"location":"installation/installing-zabbixdb/#configure-the-firewall_2","title":"Configure the firewall","text":"<p>To allow incoming connections to the PostgreSQL database from your Zabbix server, follow these steps to configure the firewall:</p> <ol> <li>Check Current Firewall Configuration: Verify the current settings to ensure the firewall is active and no PostgreSQL-related rules are present:</li> </ol> <p><code>bash    # firewall-cmd --list-all</code></p> <ol> <li>Create a New Zone for PostgreSQL: Define a new firewall zone specifically for PostgreSQL access:</li> </ol> <p><code>bash    # firewall-cmd --new-zone=postgresql-access --permanent    success</code></p> <ol> <li>Reload Firewall Configuration: Apply the changes made to the firewall configuration:</li> </ol> <p><code>bash    # firewall-cmd --reload    success</code></p> <ol> <li>Verify New Zones: Check that the new <code>postgresql-access</code> zone has been created:</li> </ol> <p><code>bash    # firewall-cmd --get-zones    block dmz drop external home internal nm-shared postgresql-access public trusted work</code></p> <ol> <li>Allow Zabbix Server IP: Add the IP address of your Zabbix server to the new <code>postgresql-access</code> zone to permit incoming connections:</li> </ol> <p><code>bash    # firewall-cmd --zone=postgresql-access --add-source=&lt;zabbix-serverip&gt; --permanent    success</code></p> <ol> <li>Open PostgreSQL Port: Open port <code>5432/tcp</code> for the PostgreSQL service within the <code>postgresql-access</code> zone:</li> </ol> <p><code>bash    # firewall-cmd --zone=postgresql-access --add-port=5432/tcp --permanent    success</code></p> <ol> <li>Reload Firewall Configuration Again: Apply the new rules to the firewall:</li> </ol> <p><code>bash    # firewall-cmd --reload</code></p> <ol> <li>Verify the Firewall Rules: Ensure that the new rules are correctly applied by listing the configurations for the <code>postgresql-access</code> zone:</li> </ol> <p><code>bash    # firewall-cmd --zone=postgresql-access --list-all</code></p> <p>You should see output similar to:</p> <p><code>bash    postgresql-access (active)      target: default      icmp-block-inversion: no      interfaces:      sources: 192.168.56.18      services:      ports: 5432/tcp      protocols:      forward: no      masquerade: no      forward-ports:      source-ports:      icmp-blocks:      rich rules:</code></p> <p>With these steps, the firewall will be configured to allow incoming connections to the PostgreSQL database from your Zabbix server on port <code>5432/tcp</code>.</p> <p>This concludes our chapter. You can continue with the next task Installing the Zabbix Server</p>"},{"location":"maintenance/maintaining-zabbix/","title":"Maintaining Zabbix","text":""},{"location":"permissions/managing-permissions/","title":"Managing Permissions","text":""},{"location":"problems/zabbix-triggers/","title":"Triggers","text":""},{"location":"proxies/active-proxy/","title":"Active proxy","text":"<p>Let's first start with the setup of an active Proxy. Things should be very simple just make sure you have a VM that you can use to install a proxy.</p>"},{"location":"proxies/active-proxy/#zabbix-gui-config","title":"Zabbix Gui config","text":"<p>First we will have to add the config in our Zabbix server frontend. From our Administration menu choose the menu <code>Proxies</code>.</p> <p></p> <p>Go to the upper right corner of the screen and press <code>Create proxy</code> You will now get a pop-up like shown here. Fill in the proxy name. I have chosen for ProxyA as it will be our active proxy. You can use for yourself whatever you like. In production I would suggest to use names that make it easy for you to see it's a proxy and where the proxy belongs to. Ex: what vlan or what division ....</p> <p>Choose Proxy mode <code>Active</code> and fill in the IP of your virtualmachine.</p> <p></p> <p>When done press <code>Add</code> at the bottom.</p>"},{"location":"proxies/active-proxy/#zabbix-proxy-config","title":"Zabbix Proxy config","text":"<p>Ok now that this is done lets go to the VM where we like to install our proxy and add the Zabbix repository so we can install our needed packages.</p> <pre><code>rpm -Uvh https://repo.zabbix.com/zabbix/7.0/rhel/9/x86_64/zabbix-release-7.0-1.el9.noarch.rpm\n</code></pre> <p>Zabbix provides the proxy with the option to connecto to a SQLiteDB this can be enough for most setups. In case you need more performance from the DB there is also the option to install the Proxy with a PostgreSQL or MySQL DB. We will cover how to do with the SQLite db as this is the most easy way. We show you later what to look for if installing a proxy With MySQL or PostgreSQL.</p> <pre><code>dnf install zabbix-proxy-sqlite3 zabbix-selinux-policy -y\n</code></pre> <p>Once this is done let's change the proxy configuration by editing the proxy configuration file.</p> <pre><code>vi /etc/zabbix/zabbix_proxy.conf\n</code></pre> <p>Here a few parameters needs to be changed before we can use our proxy</p> <ul> <li>Server=</li> <li>DBName=</li> <li>Hostname=</li> </ul> <p>Change them according to your settings:</p> <ul> <li>Server=&lt; zabbix server ip &gt;</li> <li>Hostname=ProxyA ( or the name you have used in your Zabbix frontend for the Proxy )</li> <li>DBName=/tmp/zabbix_proxy.db</li> </ul> <p>The parameters are explained as follows:</p> <ul> <li>Server: Same as with active agents this parameter is used to connect to the Zabbix server, we can use the IP or DNS name here.</li> <li>DBName: This depends a bit, it is usually the name of the database like we configured on the Zabbix server in case we use PostgreSQL or MySQL. However with SQLite we need to specify dbname and location.           Username and Password will be ignored when using SQLite. Just make sure SELinux is properly configured else the DB will not be created. It can help to put SELinux in permissive first.</li> <li>Hostname: This parameter is used by the proxy to identify itself to the Zabbix server. This needs to be the same name we have registered in the Zabbix frontend.</li> </ul> Tip <p>Another parameter that can be useful is ListenPort this is usually 10051 for Active and Passive proxies. But if you run for some reason the proxy on the zabbix server then you have to change this port to something else.</p> Note <p>With Zabbix 7 a new parameter has been introduced on the proxy side <code>ProxyBufferMode</code>. This is standard set to <code>Hybrid</code> and is what is recommended. With Hybrid the proxy will buffer will work in memory and fallback to the database if needed. The documentation states that the proxy buffer normally works like in memory mode until it runs out of memory or the oldest record exceeds the configured age. If that happens the buffer is flushed to database and it works like in disk mode until all data have been uploaded and it starts working with memory again. On shutdown the memory buffer is flushed to database.</p> Note <p>Don't worry about the file for the db not existing Zabbix will create it by itself.</p> Warning <p>If you use DNS names make sure there is DNS caching configured on the machine. If not Zabbix will do a lookup on the DNS server everytime it wants to make a connection.</p> <p>So now that we have configured everything let's start our proxy. First disable SELinux as it will block a few things this can be done by running <code>setenforce 0</code>. This is only temporary and either you keep it disabled permanent or you fix the config. An easy way is to use <code>sealert -a /var/log/audit/audit.log</code>. Once this is done there is only 1 thing that rests us to do and that is start and enable the zabbix-proxy service.</p> <pre><code>systemctl enable zabbix-proxy --now\n</code></pre> <p>If you look now in the frontend of the Zabbix server you will see that the proxy we have configured is Online</p> <p></p> Note <p>If you like to install the proxy with MySQL or PostgreSQL as database then it is important to also install the package <code>zabbix-sql-scripts</code>. There is a special shema to be used for the proxy database that can be found under <code>/usr/share/zabbix-sql-scripts/mysql|postgresql&gt;/proxy.sql</code>. Also in this case don't forget to edit the zabbix_proxy.conf file and add DBHost, DBUser, DBPassword and DBSchema as needed.</p>"},{"location":"proxies/installing-proxies/","title":"Installing Proxies","text":"<p>There are some cases where monitoring with the Zabbix server and agents \u2026. is not enough.  Imagine monitoring external clients, different VLANs or just monitoring a DMZ where you don\u2019t want to open for every agent a port in the firewall for the agent, SNMP, IPMI, \u2026  Here Zabbix proxies come to the rescue. A Zabbix proxy is a small remote Zabbix server that supports the collection of data. With Zabbix 7 it\u2019s now even possible to run Zabbix proxies in HA. Proxies will also become important in larger environments to simplify the management and most importantly to offload the Zabbix server. Our proxies can do pre-processing and it will also limit the number of connections from devices to the Zabbix server.</p> <p>So in short a Zabbix proxy can be used to : - Monitor remote locations - Monitor locations that have unreliable connections - Offload the Zabbix server when monitoring thousands of devices - Simplify the maintenance and management</p>"},{"location":"proxies/installing-proxies/#proxy-requirements","title":"Proxy requirements","text":"<p>If you like to setup a few proxies for test or in your environment you will need a few Linux hosts to install the Proxies on.  Proxies are also available in containers so a full VM is not needed. However here we will use a VM so we can show you how to install a proxy. When it comes to proxies they are very lightweight however since Zabbix 4.2 Proxies are able to do Item value preprocessing and this can use a lot of CPU power. So the number of CPUs and memory will depends on how many machines you will monitor and how many preprocessing rules you have on your hosts.</p> Note <p>Imagine that you need to restart your Zabbix server and that all proxies start to push the data they have gathered during the downtime of the Zabbix server. This would create ahuge amount of data being sent at once to the Zabbix server and bring it to its knees in no time. Since Zabbix 6 Zabbix has added protection for overload. When Zabbix server history cache is full the history cache write access is being throttled. Zabbix server will stop accepting data from proxies when history cache usage reaches 80%. Instead those proxies will be put on a throttling list. This will continue until the cache usage falls down to 60%. Now server will start accepting data from proxies one by one, defined by the throttling list. This means the first proxy that attempted to upload data during the throttling period will be served first and until it's done the server will not accept data from other proxies.</p> History write cache usage Zabbix server mode Zabbix server action Reaches 80% Wait Stops accepting proxy data, but maintains a throttling list (prioritized list of proxies to be contacted later). Drops to 60% Throttled Starts processing throttling list, but still not accepting proxy data. Drops to 20% Normal Drops the throttling list and starts accepting proxy data normally."},{"location":"proxies/installing-proxies/#configuration","title":"Configuration","text":"<p>Zabbix actually has 2 proxy modes it supports. A Zabbix proxy can be Active or Passive just like the Zabbix agent with this exception that the agent can be both on the same time. So our first problem will be choose the Zabbix proxy that fits us. When we talk about active / passive we always talk about the proxy being active or passive. Active means the Proxy will initiate the connection to the Zabbix server, passive means it will be the Zabbix server taking contact with the proxy to gather the data.</p>"},{"location":"proxies/installing-proxies/#active-vs-passive-proxy","title":"Active vs Passive proxy","text":"<p>Zabbix proxies have been available since Zabbix 1.6, at that time they where available only as what we know today as <code>Active proxies</code>. Active means that the proxy would initiate the connection by itself to the Zabbix Server. Since version 1.8.3 passive proxies where introduced. This allowed the server to connect to the proxy. As mentioned before Zabbix agents can be both active and passive however proxies cannot be both so whe have to choose the way of the communication when we install a proxy. Just remember that choosing the proxy mode <code>active</code> or <code>passive</code> has no impact on how Zabbix agents can communicate with our proxy. It's perfectly fine to have an <code>active proxy</code> and a <code>passive agent</code> working together.</p>"},{"location":"proxies/installing-proxies/#active-proxy","title":"Active proxy","text":"<p>Let's first start with the setup of an active Proxy. Things should be very simple just make sure you have a VM that you can use to install a proxy.</p>"},{"location":"proxies/installing-proxies/#zabbix-gui-config","title":"Zabbix Gui config","text":"<p>First we will have to add the config in our Zabbix server frontend. From our Administration menu choose the menu <code>Proxies</code>.</p> <p></p> <p>Go to the upper right corner of the screen and press <code>Create proxy</code> You will now get a pop-up like shown here. Fill in the proxy name. I have chosen for <code>ProxyA</code> as it will be our active proxy. In case you like to configure the Passive proxy use the name <code>ProxyP</code>.</p> <p>You can use for yourself whatever you like. In production I would suggest to use names that make it easy for you to see it's a proxy and where the proxy belongs to. Ex: what vlan or what division ....</p> <p>Choose Proxy mode <code>Active</code> and fill in the IP of your virtualmachine if you like to install an active proxy. or Choose Proxy mode <code>Passive</code> and fill in the IP of your virtualmachine if you like to install a passive proxy.</p> <p></p> <p>When done press <code>Add</code> at the bottom.</p>"},{"location":"proxies/loadbalancing-proxies/","title":"Proxy loadbalancing","text":"<p>With the introduction of Zabbix 7.0 proxy loadbalancing has been introduced. After running the server in a native HA setup this was probably the next logical step to add. So like the name implies it's not just a simple HA solution but Zabbix proxies will loadbalance the hosts connected to them in an automated way.</p> <p>Zabbix has added something new to manage how we group those proxies together with the obvious name <code>Proxy groups</code> and it works for active and for passive proxies.</p> <p>Zabbix is able to detect 3 states in our group with proxies</p> <ul> <li>Online: This implies that everything is working as expected so there was communication with all the proxies.</li> <li>Offline: The minimum number of proxies defined in our proxy config group has not been met.</li> <li>Recovering: Some proxies are offline but we still have enough proxies online to not drop below the setting <code>minimum proxies</code>.</li> </ul>"},{"location":"proxies/loadbalancing-proxies/#configuration","title":"Configuration","text":"<p>The first thing we have to do is of course set up a couple of proxies. Here I will make use of 3 active proxies but feel free to use passives if you prefer or to do a mix. If you don't know how to install a proxy take a look at the installation guides for Active proxies or Passive proxies.</p> <p>I have set up 3 proxies for this example:</p> <ul> <li>ProxyA1</li> <li>ProxyA2</li> <li>ProxyA3</li> </ul> <p>each of them has a unique IP and hostname.</p> <p>So once you have set up 3 proxies and have added them into the frontend like we did for active and passive proxies you should have a similar looking config in your Administration frontend under Proxies.</p> <p></p> <p>Before we start to create a loadbalancing group there are a few steps we need to fix first. We need to monitor our proxies and we also need to install some Zabbix agents on the proxies. To install the agents we have to follow a few simple steps.</p> <p>On every proxy run the following commands:</p> <p><code>dnf install zabbix-agent</code></p> <p>We already installed the zabbix repository when we installed the proxy so no need to add it again. Now we have to adjust a few configuration options.</p> <ul> <li>Server: A list of IP adressess or DNS names pointing to our zabbix servers. This is for the Passive agent only</li> <li>ServerActive: A list of IP adressess or DNS names pointing to our zabbix servers. This is for the Active agent only.</li> <li>Hostname: The hostname of our proxy server</li> </ul> <p>So set the unique hostname and point every proxy for Server and or ServerActive to the IP of your Zabbix proxy and not the Zabbix server. Our Proxy is in this case acting as our Zabbix server.</p> <p>Do this for all the agents that are installed on the proxies and when done start the agents and enable them to start automatic.</p> <pre><code>systemctl enable zabbix-agent --now\n</code></pre> <p>Our next step will be to create our proxies in the Zabbix frontend to monitor them. For this we go to <code>Data collection -&gt; Hosts</code> and click on <code>Create host</code>.</p> <p>Next we have to fill in a few fields:</p> <ul> <li>Host name: Name of the agent on the proxy. I used the same name for my agent as on the proxy this makes it easy to see when a proxy is down. Ex ProxyA1, ProxyA2, ProxyA3</li> <li>Templates: We will want to monitor the OS and the proxy so we have to apply 2 templates : Linux by Zabbix agent and Zabbix proxy health</li> <li>Host groups: Here we choose a group to put our proxies is you can choose what you want this is just a logical grouping used for permissions.</li> <li>Interface: Every hosts needs to have an interface where we define the IP of the host and the port.</li> </ul> <p></p> <p>Make sure your proxies are properly monitored before you continue to the next step.</p>"},{"location":"proxies/loadbalancing-proxies/#configure-proxy-groups","title":"Configure proxy groups","text":"<p>As one of the final steps we have to Create a <code>proxy group</code> to gather all proxies we want to use for our loadbalancing. In our Zabbix menu go to <code>Administration -&gt; Proxy groups</code> Click in the upper right corner on <code>Create proxy group</code>.</p> <p>Here we have to define a few options:</p> <ul> <li>Name : The name of our proxy group. This can be anything you like I have chosen for the group <code>Active proxies</code> because I have setup 3 proxies for this test.</li> <li>Failover period: Period in seconds before failover is executed (1m by default; allowed range 10s-15m).</li> <li>Minimum number of proxies: The minimum number of online proxies required for the group to be online (1 by default; allowed range 1-1000). Since we have 3 proxies I added 2 as minimum.</li> </ul> <p></p> <p>Next we have to configure our 3 existing proxies to join this proxy group. Go in the Zabbix menu to <code>Administration -&gt; Proxies</code> click on every proxy in the list you would like to add to the group and enter following details.</p> <p></p> <ul> <li>Proxy group: <code>Active proxies</code> (or whatever name you gave to your proxy group.)</li> <li>Proxy address: The active proxy ip, If specified then active proxy requests are only accepted from this list of comma-delimited IP addresses, optionally in CIDR notation, or DNS names of active Zabbix proxy.</li> <li>Address for active agents: The address and port where active agents will connect to. Usually same IP as the IP from the proxy but not needed to be the same.</li> <li>Proxy Mode: Configure if it proxy is Active or Passive </li> </ul> <p></p> <p>The next step is now to reconfigure our Agents on our proxies so that they are monitored by The proxy group <code>Active Proxies</code> instead of only the proxy they run on. Go to <code>Data collection -&gt; Hosts</code> and click on every host that you have configured to monitor the proxy agent. Switch Monitored by <code>Proxy</code> to <code>Proxy group</code>.</p> <p></p> <p>Because our proxies will accept active connections make sure to open firewall port 10051 on all the proxies and because we have Agents that we monitor passive make sure port 10050 is also open</p> <pre><code>firewall-cmd --add-port=10051/tcp --permanent\nfirewall-cmd --add-port=10050/tcp --permanent\nfirewall-cmd --reload\n</code></pre> <p>Now there is another step that we need to fix. On our Zabbix Agents we need to add all the proxy addresses to our Zabbix agents configuration.</p> <p>open the file <code>/etc/zabbix/zabbix_agentd.conf</code> and add a comma delimited list of IPs for <code>Server</code> and <code>ServerActive</code> pointing to all your proxies This way the agent can sent active data to the proxies or it can be polled by all 3 proxies</p> Note <p>Don't forget to restart your agents and proxies when making changes in the configuration files.</p>"},{"location":"proxies/loadbalancing-proxies/#loadbalancing-and-ha","title":"Loadbalancing and HA","text":"<p>Ok now that we have configured our proxies and agents properly and made a proxy group everything is up and running. When you go to <code>Data Collection -&gt; Hosts</code> you will see that your proxie agents  are monitored by the group <code>Active proxies</code>. It is possible that your ProxyA1 is monitored by ProxyA2 or A3 so don't panic if your dashboard is not the same. Zabbix proxies will besides HA also do loadbalancing.</p> <p></p> <p>It's time to test this so let us stop one of our proxies for example ProxyA2</p> <pre><code>systemctl stop zabbix-proxy\n</code></pre> <p>Since we configured our Proxy group failover period to be 1m it can take 1m before you will see changes</p> <p></p> <p>When you look at the log files of the agent you will see that he is not able to connect the proxy anymore and that he will be redirected to another proxy in the group</p> <pre><code>  1391:20240528:115433.344 Unable to connect to [xxx.xxx.xxx.xxx]:10051 [cannot connect to [[xxx.xxx.xxx.xxx]:10051]: connection error (POLLERR,POLLHUP)]\n  1391:20240528:115433.344 Unable to send heartbeat message to [xxx.xxx.xxx.xxx]:10051 [cannot connect to [[xxx.xxx.xxx.xxx]:10051]: connection error (POLLERR,POLLHUP)]\n  1392:20240528:115433.344 Unable to connect to [xxx.xxx.xxx.xxx]:10051 [cannot connect to [[xxx.xxx.xxx.xxx]:10051]: connection error (POLLERR,POLLHUP)]\n  1392:20240528:115433.353 Unable to connect to [xxx.xxx.xxx.xxx]:10051 [cannot connect to [[xxx.xxx.xxx.xxx]:10051]: connection error (POLLERR,POLLHUP)]\n  1392:20240528:115433.355 Unable to send heartbeat message to [xxx.xxx.xxx.xxx]:10051 [sequential redirect responses detected]\n  1390:20240528:115433.407 Unable to connect to [xxx.xxx.xxx.xxx]:10051 [cannot connect to [[xxx.xxx.xxx.xxx]:10051]: connection error (POLLERR,POLLHUP)]\n  1390:20240528:115433.408 Unable to connect to [xxx.xxx.xxx.xxx]:10051 [cannot connect to [[xxx.xxx.xxx.xxx]:10051]: connection error (POLLERR,POLLHUP)]\n  1390:20240528:115433.408 Unable to send heartbeat message to [xxx.xxx.xxx.xxx]:10051 [sequential redirect responses detected]\n  1392:20240528:115533.508 Successfully sent heartbeat message to [xxx.xxx.xxx.xxx]:10051\n  1390:20240528:115533.562 Successfully sent heartbeat message to [xxx.xxx.xxx.xxx]:10051\n  1392:20240528:115558.583 Active check configuration update from [xxx.xxx.xxx.xxx:10051] is working again\n  1391:20240528:115558.598 Active check configuration update from [xxx.xxx.xxx.xxx:10051] is working again\n</code></pre> Warning <p>There are a few limitations when using proxies in HA/Loadbalancing. - SNMP traps are not supported by proxies in proxy group. - Checks depending on external configuration must have the same configuration on all proxies in proxy group. That includes:   - external checks - scripts;   - database checks - odbc configuration.   - When monitored in proxy group the VMware hosts will be randomly spread between proxies in the group and will cause each proxy to cache all VMware data causing additional load to vCenter.</p>"},{"location":"proxies/passive-proxy/","title":"Passive proxy","text":"<p>Lets try to setup our <code>passive proxy</code>. Things should be very simple just make sure you have a VM that you can use to install a proxy.</p>"},{"location":"proxies/passive-proxy/#zabbix-gui-config","title":"Zabbix Gui config","text":"<p>First we will have to add the config in our Zabbix server frontend. From our Administration menu choose the menu <code>Proxies</code>.</p> <p></p> <p>Go to the upper right corner of the screen and press <code>Create proxy</code> You will now get a pop-up like shown here. Fill in the proxy name. I have chosen for ProxyP as it will be our passive proxy. You can use for yourself whatever you like. In production I would suggest to use names that make it easy for you to see it's a proxy and where the proxy belongs to. Ex: what vlan or what division ....</p> <p>Choose Proxy mode <code>Passive</code> and fill in the IP of your virtualmachine. Here besides IP we also have the option to specify a port. This is standard 10051, Zabbix proxy will listen on the same port as our Zabbix server does.</p> <p></p> <p>When done press <code>Add</code> at the bottom.</p>"},{"location":"proxies/passive-proxy/#zabbix-proxy-config","title":"Zabbix Proxy config","text":"<p>Ok now that this is done lets go to the VM where we like to install our proxy and add the Zabbix repository so we can install our needed packages.</p> <pre><code>rpm -Uvh https://repo.zabbix.com/zabbix/7.0/rhel/9/x86_64/zabbix-release-7.0-1.el9.noarch.rpm\n</code></pre> <p>Zabbix provides the proxy with the option to connecto to a SQLiteDB this can be enough for most setups. In case you need more performance from the DB there is also the option to install the Proxy with a PostgreSQL or MySQL DB. We will cover how to do with the SQLite db as this is the most easy way. We show you later what to look for if installing a proxy With MySQL or PostgreSQL.</p> <pre><code>dnf install zabbix-proxy-sqlite3 zabbix-selinux-policy -y\n</code></pre> <p>Once this is done let's change the proxy configuration by editing the proxy configuration file.</p> <pre><code>vi /etc/zabbix/zabbix_proxy.conf\n</code></pre> <p>Here a few parameters needs to be changed before we can use our proxy</p> <ul> <li>ProxyMode=</li> <li>Server=</li> <li>DBName=</li> <li>Hostname=</li> </ul> <p>Change them according to your settings:</p> <ul> <li>ProxyMode=1</li> <li>Server=&lt; zabbix server ip &gt;</li> <li>Hostname=ProxyA ( or the name you have used in your Zabbix frontend for the Proxy )</li> <li>DBName=/tmp/zabbix_proxy.db</li> </ul> <p>The parameters are explained as follows:</p> <ul> <li>ProxyMode: This is standard 0 for Active proxy we have to change this to 1 this will turn our proxy into a Passive proxy. Be careful there is a <code>#</code> in front of the parameter this needs to be removed. If not Zabbix will not read this value in stay in Active mode.</li> <li>Server: Same as with passive agents. We have to specify the IP or DNS name or a list of IPs from zabbix servers that are allowed to connect to this proxy.</li> <li>DBName: This depends a bit, it is usually the name of the database like we configured on the Zabbix server in case we use PostgreSQL or MySQL. However with SQLite we need to specify dbname and location.           Username and Password will be ignored when using SQLite. Just make sure SELinux is properly configured else the DB will not be created. It can help to put SELinux in permissive first.</li> <li>Hostname: This parameter is used by the proxy to identify itself to the Zabbix server. This needs to be the same name we have registered in the Zabbix frontend.</li> </ul> Tip <p>Another parameter that can be useful is ListenPort this is usually 10051 for Active and Passive proxies. But if you run for some reason the proxy on the zabbix server then you have to change this port to something else.</p> Note <p>With Zabbix 7 a new parameter has been introduced on the proxy side <code>ProxyBufferMode</code>. This is standard set to <code>Hybrid</code> and is what is recommended. With Hybrid the proxy will buffer will work in memory and fallback to the database if needed. The documentation states that the proxy buffer normally works like in memory mode until it runs out of memory or the oldest record exceeds the configured age. If that happens the buffer is flushed to database and it works like in disk mode until all data have been uploaded and it starts working with memory again. On shutdown the memory buffer is flushed to database.</p> Note <p>Don't worry about the file for the db not existing Zabbix will create it by itself.</p> Warning <p>If you use DNS names make sure there is DNS caching configured on the machine. If not Zabbix will do a lookup on the DNS server everytime it wants to make a connection.</p> <p>So now that we have configured everything let's start our proxy. First disable SELinux as it will block a few things this can be done by running <code>setenforce 0</code>. This is only temporary and either you keep it disabled permanent or you fix the config. An easy way is to use <code>sealert -a /var/log/audit/audit.log</code>. Once this is done there is only 1 thing that rests us to do and that is start and enable the zabbix-proxy service.</p> <pre><code>systemctl enable zabbix-proxy --now\n</code></pre> <p>If you look now in the frontend of the Zabbix server you will see that the proxy we have configured is Offline.</p> <p></p> <p>This is because we have configured a Passive agent remember we had to specify the IP and the Port in our Zabbix frontend? So we need to open port 10051/tcp for our zabbix server.</p> <pre><code>firewall-cmd --new-zone=proxy-access --permanent\nfirewall-cmd --zone=proxy-access --add-source=&lt;zabbix server ip&gt; --permanent\nfirewall-cmd --zone=proxy-access --add-port=10051/tcp --permanent\nfirewall-cmd --reload\n</code></pre> <p>We can now check our access rules in the firewall:</p> <pre><code># firewall-cmd --zone=proxy-access --list-all\nproxy-access (active)\n  target: default\n  icmp-block-inversion: no\n  interfaces:\n  sources: xxx.xxx.xxx.xxx\n  services:\n  ports: 10051/tcp\n  protocols:\n  forward: no\n  masquerade: no\n  forward-ports:\n  source-ports:\n  icmp-blocks:\n  rich rules:\n</code></pre> <p>When we now look at our frontend our proxy should be online </p> <p></p> Note <p>If you like to install the proxy with MySQL or PostgreSQL as database then it is important to also install the package <code>zabbix-sql-scripts</code>. There is a special shema to be used for the proxy database that can be found under <code>/usr/share/zabbix-sql-scripts/mysql|postgresql&gt;/proxy.sql</code>. Also in this case don't forget to edit the zabbix_proxy.conf file and add DBHost, DBUser, DBPassword and DBSchema as needed.</p>"},{"location":"security/securing-zabbix-selinux/","title":"Securing Zabbix with SELinux","text":""},{"location":"security/securing-zabbix/","title":"Securing Zabbix Frontend","text":"<p>The frontend is what we use to login into our system. The Zabbix frontend will connect to our Zabbix server and our database. But we also send information from our laptop to the frontend. It's important that when we enter our credentials that we can do this in a safe way. So it makes sense to make use of certificates and one way to do this is by making use of Self-Signed certificates.</p> <p>To give you a better understanding of why your browser will warn you when using self signed certificates, we have to know that when we request an SSL certificate from an official Certificate Authority (CA) that you submit a Certificate Signing Reauest (CSR) to them. They in return provide you with a Signed SSL certificate. For this they make use of their root certificate and private key. Our browser comes with a copy of the root certificate (CA) from various authorities or it can access it from the OS. This is why our self signed certificates are not trusted by our browser, we don't have any CA validation. Our only workaround is to create our own root certificate and private key.</p>"},{"location":"security/securing-zabbix/#understanding-the-concepts","title":"Understanding the concepts","text":""},{"location":"security/securing-zabbix/#how-to-create-an-ssl-certificate","title":"How to create an SSL certificate","text":""},{"location":"security/securing-zabbix/#how-ssl-works-client-server-flow","title":"How SSL works - Client - Server flow","text":"Note <p>Borrowed the designs from https://www.youtube.com/watch?v=WqgzYuHtnIM this video explains well how SSL works.</p>"},{"location":"security/securing-zabbix/#securing-the-frontend-with-self-signed-ssl-on-nginx","title":"Securing the Frontend with Self signed SSL on Nginx","text":"<p>To configure this there are a few steps that we need to follow:</p> <pre><code>- Generate a private key for the CA ( Certificate Authority )\n- Generate a root certficate\n- Generating CA-Authenticated Certificates\n- Generate a Certificate Signing Request (CSR)\n- Generate an X509 V3 certificate extension configuration file\n- Generate the certificate using our CSR, the CA private key, the CA certificate, and the config file\n- Copy the SSL certificates to our Virtual Host\n- Adapt your Nginx Zabbix config\n</code></pre>"},{"location":"security/securing-zabbix/#generate-a-private-key-for-the-ca","title":"Generate a private key for the CA","text":"<p>First step is to make a folder named SSL so we can create our certificates and safe them:</p> <pre><code>&gt;- mkdir ~/ssl\n&gt;- cd ~/ssl\n&gt;- openssl ecparam -out myCA.key -name prime256v1 -genkey\n</code></pre> <p>Let's explain all the options;</p> <ul> <li>openssl : The tool to use the OpenSSL library, this library provides us with cryptographic functions and utilities.</li> <li>out myCA.key : This part of the command specifies the output file name for the generated private key. </li> <li>name prime256v1: Name of the elliptic curve; X9.62/SECG curve over a 256 bit prime field</li> <li>ecparam: This command is used to manipulate or generate EC parameter files.</li> <li>genkey: This option will generate a EC private key using the specified parameters.</li> </ul>"},{"location":"security/securing-zabbix/#generate-a-root-certificate","title":"Generate a Root Certificate","text":"<pre><code>openssl req -x509 -new -nodes -key myCA.key -sha256 -days 1825 -out myCA.pem\n</code></pre> <p>Let's explain all the options;</p> <ul> <li>openssl: The command-line tool for OpenSSL.</li> <li>req: This command is used for X.509 certificate signing request (CSR) management.</li> <li>x509: This option specifies that a self-signed certificate should be created.</li> <li>new: This option is used to generate a new certificate.</li> <li>nodes: This option indicates that the private key should not be encrypted. It will generates a private key without a passphrase, making it more convenient but potentially less secure.</li> <li>key myCA.key: This specifies the private key file (myCA.key) to be used in generating the certificate.</li> <li>sha256: This option specifies the hash algorithm to be used for the certificate. In this case, SHA-256 is chosen for stronger security.</li> <li>days 1825: This sets the validity period of the certificate in days. Here, it\u2019s set to 1825 days (5 years).</li> <li>out myCA.pem: This specifies the output file name for the generated certificate. In this case, \u201cmyCA.pem.\u201d</li> </ul> <p>The information you enter is not so important but it's best to fill it in as good as possible. Just make sure you enter for CN you IP or DNS.</p> <pre><code>You are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [XX]:BE\nState or Province Name (full name) []:vlaams-brabant\nLocality Name (eg, city) [Default City]:leuven\nOrganization Name (eg, company) [Default Company Ltd]:\nOrganizational Unit Name (eg, section) []:\nCommon Name (eg, your name or your server's hostname) []:192.168.0.134\nEmail Address []:\n</code></pre>"},{"location":"security/securing-zabbix/#generating-ca-authenticated-certificates","title":"Generating CA-Authenticated Certificates","text":"<p>It's probably good practice to use de dns name of your webiste in the name fo the private key. As we use in this case no DNS but an IP address I will use the fictive dns zabbix.mycompany.internal.</p> <pre><code>openssl genrsa -out zabbix.mycompany.internal.key 2048\n</code></pre>"},{"location":"security/securing-zabbix/#generate-a-certificate-signing-request-csr","title":"Generate a Certificate Signing Request (CSR)","text":"<pre><code>openssl req -new -key zabbix.mycompany.internal.key -out zabbix.mycompany.internal.csr\n</code></pre> <p>You will be asked the same set of questions as above. Once again your answers hold minimal significance and in our case no one will inspect the certificate so they matter even less.</p> <pre><code>You are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [XX]:BE\nState or Province Name (full name) []:vlaams-brabant\nLocality Name (eg, city) [Default City]:leuven\nOrganization Name (eg, company) [Default Company Ltd]:\nOrganizational Unit Name (eg, section) []:\nCommon Name (eg, your name or your server's hostname) []:192.168.0.134\nEmail Address []:\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []:\nAn optional company name []:\n</code></pre>"},{"location":"security/securing-zabbix/#generate-an-x509-v3-certificate-extension-configuration-file","title":"Generate an X509 V3 certificate extension configuration file.","text":"<pre><code># vi zabbix.mycompany.internal.ext\n</code></pre> <p>Add the following lines in your certificate extension file. Replace IP or DNS with your own values.</p> <pre><code>authorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName = @alt_names\n\n[alt_names]\nIP.1 = 192.168.0.133\n#DNS.1 = MYDNS (You can use DNS if you have a dns name if you use IP then use the above line)\n</code></pre>"},{"location":"security/securing-zabbix/#generate-the-certificate-using-our-csr-the-ca-private-key-the-ca-certificate-and-the-config-file","title":"Generate the certificate using our CSR, the CA private key, the CA certificate, and the config file","text":"<pre><code>openssl x509 -req -in zabbix.mycompany.internal.csr -CA myCA.pem -CAkey myCA.key \\\n-CAcreateserial -out zabbix.mycompany.internal.crt -days 825 -sha256 -extfile zabbix.mycompany.internal.ext\n</code></pre>"},{"location":"security/securing-zabbix/#copy-the-ssl-certificates-to-our-virtual-host","title":"Copy the SSL certificates to our Virtual Host","text":"<pre><code>cp zabbix.mycompany.internal.crt /etc/pki/tls/certs/. \ncp zabbix.mycompany.internal.key /etc/pki/tls/private/.\n</code></pre>"},{"location":"security/securing-zabbix/#import-the-ca-in-linux-rhel","title":"Import the CA in Linux (RHEL)","text":"<p>We need to update the CA certificate\u2019s, run the below command to update the CA certs.</p> <pre><code>cp myCA.pem /etc/pki/ca-trust/source/anchors/myCA.crt\nupdate-ca-trust extract\n</code></pre>"},{"location":"security/securing-zabbix/#import-the-ca-in-osx","title":"Import the CA in OSX","text":"<ul> <li>Open the macOS Keychain app.</li> <li>Navigate to File &gt; Import Items</li> <li>Choose your private key file (i.e., myCA.pem)</li> <li>Search for the \u201cCommon Name\u201d you provided earlier.</li> <li>Double-click on your root certificate in the list.</li> <li>Expand the Trust section.</li> <li>Modify the \u201cWhen using this certificate:\u201d dropdown to \u201cAlways Trust\u201d.</li> <li>Close the certificate window.</li> </ul>"},{"location":"security/securing-zabbix/#import-the-ca-in-windows","title":"Import the CA in Windows","text":"<ul> <li>Open the \u201cMicrosoft Management Console\u201d by pressing Windows + R, typing mmc, and clicking Open.</li> <li>Navigate to File &gt; Add/Remove Snap-in.</li> <li>Select Certificates and click Add.</li> <li>Choose Computer Account and proceed by clicking Next.</li> <li>Select Local Computer and click Finish.</li> <li>Click OK to return to the MMC window.</li> <li>Expand the view by double-clicking Certificates (local computer).</li> <li>Right-click on Certificates under \u201cObject Type\u201d in the middle column, select All Tasks, and then Import.</li> <li>Click Next, followed by Browse. Change the certificate extension dropdown next to the filename field to All Files (.) and locate the myCA.pem file.</li> <li>Click Open, then Next.</li> <li>Choose \u201cPlace all certificates in the following store.\u201d with \u201cTrusted Root Certification Authorities store\u201d as the default. Proceed by clicking Next, then Finish, to finalize the wizard.</li> <li>If all went well you should find your certficate under Trusted Root Certification Authorities &gt; Certificates</li> </ul> Warning <p>You also need to import the myCA.crt file in your OS we are not an official CA so we have to import it in our OS and tell it to trust this Certificate. This action depends on the OS you use.</p> <p>As you are using OpenSSL, you should also create a strong Diffie-Hellman group, which is used in negotiating Perfect Forward Secrecy with clients. You can do this by typing:</p> <pre><code>openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n</code></pre>"},{"location":"security/securing-zabbix/#adapt-your-nginx-zabbix-config","title":"Adapt your Nginx Zabbix config","text":"<p>Add the following lines to your Nginx configuration, modifying the file paths as needed. Replace the the already existing lines with port 80 with this configuration. This will enable SSL and HTTP2.</p> <pre><code># vi /etc/nginx/conf.d/zabbix.conf\n</code></pre> <pre><code>server {\n        listen          443 http2 ssl;\n        listen          [::]:443 http2 ssl;\n        server_name     &lt;ip qddress&gt;;\n        ssl_certificate /etc/ssl/certs/zabbix.mycompany.internal.crt;\n        ssl_certificate_key /etc/pki/tls/private/zabbix.mycompany.internal.key;\n        ssl_dhparam /etc/ssl/certs/dhparam.pem;\n</code></pre> <p>To redirect traffic from port 80 to 443 we can add the following lines above our https block:</p> <pre><code>server {\n       listen         80;\n       server_name    _; #dns or ip is also possible\n       return         301 https://$host$request_uri;\n}\n</code></pre>"},{"location":"security/securing-zabbix/#restart-all-services-and-allow-https-traffic","title":"Restart all services and allow https traffic","text":"<pre><code>systemctl restart php-fpm.service\nsystemctl restart nginx\n\nfirewall-cmd --add-service=https --permanent\nfirewall-cmd --reload\n</code></pre> <p>When we go to our url <code>http://&lt;IP or DNS&gt;/</code> we get redirected to our <code>https://</code> page and when we check we can see that our site is secure:</p> <p></p> Note <ul> <li>To be even more secure have a loot at https://cipherlist.eu/ this page maintains a list of strong ciphers that you can use so secure your Nginx even more.</li> <li>You can test your nginx config with 'nginx -t' before you restart.</li> <li>For HTTP/2 to work you need atleast nginx 1.9.5 or later</li> </ul>"},{"location":"security/securing-zabbix/#securing-the-frontend-with-lets-encrypt-on-nginx","title":"Securing the Frontend with Let's Encrypt  on Nginx","text":""},{"location":"visualising/Visualising-our-problems/","title":"Visualising our problems","text":""},{"location":"vmware/vmware-monitoring/","title":"VMware monitoring with Zabbix","text":"<p>Zabbix can automatically discover Virtual Machines and VMware hypervisors based on Low-level discovery rules. Zabbix provides a set of templates to do this out of the box to make life more easy. In this chapter, we will see how we can configure this.</p> <p>Zabbix requires VMware vCenter or vSphere to be at least 5.1 or higher but always check the official documentation to be sure this hasn't changed.</p>"},{"location":"vmware/vmware-monitoring/#what-do-we-need","title":"What do we need ?","text":"<ul> <li>VMware vCenter or vSphere to be at least 5.1</li> <li>A monitoring account with RO access to the API</li> <li>Enable performance counter statistics and requests on the VMware side as well.</li> </ul> <p>Before we start it's important to know that Zabbix does not start any processes to start monitoring VMware out of the box if we do not configure this. So the first thing we have to do is edit out <code>zabbix_server.conf</code> file. This file can be found here : <code>/etc/zabbix/zabbix_server.conf</code>.</p> <p>Look for the parameter StartVMwareCollectors, edit this line, or add a new line where you add <code>StartVMwareCollectors=2</code> and restart the server service. Why do we add 2? Is it always 2? Of course not else it would be hardcoded. But Zabbix recommends not going below 2 and it should also not exceed twice the amount of monitored VMware services.</p> <p>So we can use the next formula to calculate the optimal value?</p> <p><code>Amount of services &lt; StartVMwareCollectors &lt; (Amount of services * 2)</code></p> <p>So for the setups with 1 VMware service we will set it to 2 and with instances where we have 3 we will set it to 5 </p> Note <p>A VMware instance can be a vSphere or vCenter instance and not a virtual machine or hypervisor. So the number of collectors depends on the data points we use to collect values from.</p>"},{"location":"vmware/vmware-monitoring/#configuration","title":"Configuration","text":"<p>The first step is to create a new host. If you are unsure how to take a look at the topic Zabbix hosts. Only adding a <code>Host name</code> should be ok we don't need to configure any interfaces. Once this is done before you press <code>Add</code> go to the tab <code>Macros</code>.</p> <p></p> <p>Add the following macros :</p> <ul> <li>{$VMWARE.USERNAME}</li> <li>{$VMWARE.PASSWORD}</li> <li>{$VMWARE.URL}</li> </ul> <p></p> Tip <p>Do not use the admin account of your VMware VCenter but create a new monitoring account with RO rights to read out the information and use a secret macro for the password and even maybe the username.</p> <p>Once done go back to the <code>Host</code> tab and fill in the <code>Host group</code> and the correct template. Zabbix provides 2 templates to choose from. </p> <ul> <li>VMware FQDN : The template making use of the FQDN for the VMs (recommended) but:</li> <li>Every Monitored VM should have a unique OS name compliant with the FQDN rules.</li> <li> <p>VMware Tools must be installed on every machine</p> </li> <li> <p>VMware : The template making use of the UUID for every VM.</p> </li> <li> <p>This one is recommended if the FQDN requirements cannot be met.</p> </li> <li> <p>VMWare Guest : Will monitor the virtual machines</p> </li> <li>VMWare Hypervisor : Will monitor the hypervisors</li> <li>These 2 templates should not be linked manually Zabbix will handle this for you !</li> </ul> <p>Zabbix will discover VMware clusters, hypervisors, data stores, and virtual machines. It's possible to control which parts will be monitored by going to the template to the Discovery and disabling the Discovery rules you don't need.</p> <p>It's also possible to change the configuration of our host prototype. Ex: we can configure the host interface to <code>Inherit</code> or to create the interface with <code>Custom</code> data. A list with <code>MACROS</code> can be found here https://www.zabbix.com/documentation/7.0/en/manual/vm_monitoring/discovery_fields</p> <p></p> <p>As you have may have noticed already, in the Zabbix server configuration file there are a few more parameter that we can tweak.</p> <ul> <li>VMWareFrequency</li> <li>How often Zabbix will connect to the VMWare service to collect new data.</li> <li>VMwarePerfFrequency</li> <li>How often Zabbix will connect to the VMWare service to collect performance data.</li> <li>VMWareTimeout</li> <li>This is the maximum number of seconds that a VMWare collector will wait for a response from the VMWare vCenter or Hypervisor</li> <li>VMwareCacheSize</li> <li>This is the shared memory size for storing VMware data. A VMware internal check zabbix[vmware,buffer,...] can be used to monitor the VMware cache usage. This should be verified if enabled in your <code>zabbix server healt template</code>. The size of the cache will depend on the size of your VMware setup.</li> </ul> Note <p>It's best to keep VMWareFrequency and VMwarePerfFrequency with the same values. Using values where <code>VMWareFrequency</code> is less then <code>VMwarePerfFrequency</code> will lead to strange looking graphs.</p> Note <p>If config.vpxd.stats.maxQueryMetrics is invalid or exceeds the maximum number of characters permitted error, add a config.vpxd.stats.maxQueryMetrics parameter to the vCenter Server settings. The value of this parameter should be the same as the value of maxQuerysize in VMware's web.xml file.</p>"},{"location":"vmware/vmware-monitoring/#available-metrics","title":"Available metrics","text":"<p>After some time in latest data you should see for all the items data being populated. It can take a while before every item is populated it depends a bit on the order of the LLD rule being executed.</p> <p>These are the items that are configure with our standard Zabbix VMware template. But the template does not cover all items and more items might be added over time. A list of all keys can be found in the online documentation. https://www.zabbix.com/documentation/7.0/en/manual/vm_monitoring/vmware_keys Those items are <code>simple checks</code> so when creating a new item don't forget to select the correct item type.</p>"},{"location":"vmware/vmware-monitoring/#internal-working","title":"Internal working","text":"<p>We know now that Zabbix can monitor VMware out of the box and the setup for it is very easy. There is a lot of information that we can retreive but to get to this information there is a complex process behind it. To tune this process we have seen that there are parameters that can be set like VMWareFrequency, VMwarePerfFrequency, VMWareTimeout and VMwareCacheSize.</p> <p>The next diagram shows us how Zabbix collects the data and end up with the data in it's history Cache.</p> <p></p> <p>Here we can see the different steps involving in the data flow when monitoring VMWare with Zabbix. Connections are made from the VMWare collector to the SDK interface. The collectors will grab the data and place it in a special VMWare chache. Pollers then will look into the cache and grab the data from it and send it to the preprocessors. The data after preprocessin is then placed in the Zabbix history cache. In case of a proxy it will be sent to the Zabbix server.</p> Note <p>VMwarePerfFrequency and VMWareFrequency are both set standard to 60 seconds wich is fine for small to medium setups lowering this number could create some overload on the VMWare servers. On a larger instance it's probably best to increase then together with the VMWareTimeout parameter.</p>"},{"location":"vmware/vmware-monitoring/#debugging","title":"Debugging","text":"Warning <p>It can take some time before you will see all the VMs in your Zabbix setup popup. If you want to know what the Zabbix server or Proxy (if you monitor VMware over a proxy then you have to adjust all config on the proxy) is doing then you can increase the debug level. This can be done on they fly without changing the debug parameter in the zabbix_server.conf file. Just one the console run the following command to increase logging for all the vmware collectors.</p> <pre><code>zabbix_server -R log_level_increase=\"vmware collector\"\n</code></pre> <p>In case you like to increase logging for only collector 2 then you could run the following command:</p> <pre><code>zabbix_server -R log_level_increase=\"vmware collector,2\"\n</code></pre> Note <p>If you see a message like \"config.vpxd.stats.maxQueryMetrics' is invalid or exceeds the maximum number of characters permitted**\" in the debug don't be alarmed right away. The message is a bit confusing. Have alook at this ticket as it will explain that its not always a problem. https://support.zabbix.com/browse/ZBX-24499</p>"},{"location":"websites/monitoring-websites/","title":"Monitoring websites","text":""},{"location":"windows/monitoring-windows/","title":"Monitoring Windows","text":""}]}